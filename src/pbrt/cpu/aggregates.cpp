// pbrt is Copyright(c) 1998-2020 Matt Pharr, Wenzel Jakob, and Greg Humphreys.
// The pbrt source code is licensed under the Apache License, Version 2.0.
// SPDX: Apache-2.0

#include <pbrt/cpu/aggregates.h>

#include <pbrt/interaction.h>
#include <pbrt/paramdict.h>
#include <pbrt/shapes.h>
#include <pbrt/util/error.h>
#include <pbrt/util/log.h>
#include <pbrt/util/math.h>
#include <pbrt/util/memory.h>
#include <pbrt/util/parallel.h>
#include <pbrt/util/print.h>
#include <pbrt/util/stats.h>

#include <algorithm>
#include <tuple>

namespace pbrt {

STAT_MEMORY_COUNTER("Memory/BVH", treeBytes);
STAT_RATIO("BVH/Primitives per leaf node", totalPrimitives, totalLeafNodes);
STAT_COUNTER("BVH/Interior nodes", interiorNodes);
STAT_COUNTER("BVH/Leaf nodes", leafNodes);
STAT_PIXEL_COUNTER("BVH/Nodes visited", bvhNodesVisited);

STAT_PERCENT("VWBVH/Mask false positive rate", maskFalses, maskTests);
STAT_PERCENT("VWBVH/Voxel occupancy rate", voxelSets, voxels);
// MortonPrimitive Definition
struct MortonPrimitive {
    int primitiveIndex;
    uint32_t mortonCode;
};

// LBVHTreelet Definition
struct LBVHTreelet {
    size_t startIndex, nPrimitives;
    BVHBuildNode *buildNodes;
};

// BVHAggregate Utility Functions
static void RadixSort(std::vector<MortonPrimitive> *v) {
    std::vector<MortonPrimitive> tempVector(v->size());
    constexpr int bitsPerPass = 6;
    constexpr int nBits = 30;
    static_assert((nBits % bitsPerPass) == 0,
                  "Radix sort bitsPerPass must evenly divide nBits");
    constexpr int nPasses = nBits / bitsPerPass;
    for (int pass = 0; pass < nPasses; ++pass) {
        // Perform one pass of radix sort, sorting _bitsPerPass_ bits
        int lowBit = pass * bitsPerPass;
        // Set in and out vector references for radix sort pass
        std::vector<MortonPrimitive> &in = (pass & 1) ? tempVector : *v;
        std::vector<MortonPrimitive> &out = (pass & 1) ? *v : tempVector;

        // Count number of zero bits in array for current radix sort bit
        constexpr int nBuckets = 1 << bitsPerPass;
        int bucketCount[nBuckets] = {0};
        constexpr int bitMask = (1 << bitsPerPass) - 1;
        for (const MortonPrimitive &mp : in) {
            int bucket = (mp.mortonCode >> lowBit) & bitMask;
            CHECK_GE(bucket, 0);
            CHECK_LT(bucket, nBuckets);
            ++bucketCount[bucket];
        }

        // Compute starting index in output array for each bucket
        int outIndex[nBuckets];
        outIndex[0] = 0;
        for (int i = 1; i < nBuckets; ++i)
            outIndex[i] = outIndex[i - 1] + bucketCount[i - 1];

        // Store sorted values in output array
        for (const MortonPrimitive &mp : in) {
            int bucket = (mp.mortonCode >> lowBit) & bitMask;
            out[outIndex[bucket]++] = mp;
        }
    }
    // Copy final result from _tempVector_, if needed
    if (nPasses & 1)
        std::swap(*v, tempVector);
}

// BVHSplitBucket Definition
struct BVHSplitBucket {
    int count = 0;
    Bounds3f bounds;
};

// BVHPrimitive Definition
struct BVHPrimitive {
    BVHPrimitive() {}
    BVHPrimitive(size_t primitiveIndex, const Bounds3f &bounds)
        : primitiveIndex(primitiveIndex), bounds(bounds) {}
    size_t primitiveIndex;
    Bounds3f bounds;
    // BVHPrimitive Public Methods
    Point3f Centroid() const { return .5f * bounds.pMin + .5f * bounds.pMax; }
};

// BVHBuildNode Definition
struct BVHBuildNode {
    // BVHBuildNode Public Methods
    void InitLeaf(int first, int n, const Bounds3f &b) {
        firstPrimOffset = first;
        nPrimitives = n;
        bounds = b;
        children[0] = children[1] = nullptr;
        ++leafNodes;
        ++totalLeafNodes;
        totalPrimitives += n;
    }

    void InitInterior(int axis, BVHBuildNode *c0, BVHBuildNode *c1) {
        children[0] = c0;
        children[1] = c1;
        bounds = Union(c0->bounds, c1->bounds);
        splitAxis = axis;
        nPrimitives = 0;
        ++interiorNodes;
    }

    Bounds3f bounds;
    BVHBuildNode *children[2];
    int splitAxis, firstPrimOffset, nPrimitives;
};

// LinearBVHNode Definition
struct alignas(32) LinearBVHNode {
    Bounds3f bounds;
    union {
        int primitivesOffset;   // leaf
        int secondChildOffset;  // interior
    };
    uint16_t nPrimitives;  // 0 -> interior node
    uint8_t axis;          // interior node: xyz
};


struct alignas(16) LinearVWBVHNode {
    uint64_t mask;   
    Bounds3f bounds;
    union {
        int primitivesOffset;
        int secondChildOffset;
    };
    uint16_t nPrimitives;  // 0 -> interior nodeu
    uint8_t axis;          // interior node: xyz  
};

// BVHAggregate Method Definitions
BVHAggregate::BVHAggregate(std::vector<Primitive> prims, int maxPrimsInNode,
                           SplitMethod splitMethod)
    : maxPrimsInNode(std::min(255, maxPrimsInNode)),
      primitives(std::move(prims)),
      splitMethod(splitMethod) {
    CHECK(!primitives.empty());
    // Build BVH from _primitives_
    // Initialize _bvhPrimitives_ array for primitives
    std::vector<BVHPrimitive> bvhPrimitives(primitives.size());
    for (size_t i = 0; i < primitives.size(); ++i)
        bvhPrimitives[i] = BVHPrimitive(i, primitives[i].Bounds());

    // Build BVH for primitives using _bvhPrimitives_
    // Declare _Allocator_s used for BVH construction
    pstd::pmr::monotonic_buffer_resource resource;
    Allocator alloc(&resource);
    using Resource = pstd::pmr::monotonic_buffer_resource;
    std::vector<std::unique_ptr<Resource>> threadBufferResources;
    ThreadLocal<Allocator> threadAllocators([&threadBufferResources]() {
        threadBufferResources.push_back(std::make_unique<Resource>());
        auto ptr = threadBufferResources.back().get();
        return Allocator(ptr);
    });

    std::vector<Primitive> orderedPrims(primitives.size());
    BVHBuildNode *root;
    // Build BVH according to selected _splitMethod_
    std::atomic<int> totalNodes{0};
    if (splitMethod == SplitMethod::HLBVH) {
        root = buildHLBVH(alloc, bvhPrimitives, &totalNodes, orderedPrims);
    } else {
        std::atomic<int> orderedPrimsOffset{0};
        root = buildRecursive(threadAllocators, pstd::span<BVHPrimitive>(bvhPrimitives),
                              &totalNodes, &orderedPrimsOffset, orderedPrims);
        CHECK_EQ(orderedPrimsOffset.load(), orderedPrims.size());
    }
    primitives.swap(orderedPrims);

    // Convert BVH into compact representation in _nodes_ array
    bvhPrimitives.resize(0);
    bvhPrimitives.shrink_to_fit();
    LOG_VERBOSE("BVH created with %d nodes for %d primitives (%.2f MB)",
                totalNodes.load(), (int)primitives.size(),
                float(totalNodes.load() * sizeof(LinearBVHNode)) / (1024.f * 1024.f));
    treeBytes += totalNodes * sizeof(LinearBVHNode) + sizeof(*this) +
                 primitives.size() * sizeof(primitives[0]);
    nodes = new LinearBVHNode[totalNodes];
    int offset = 0;
    flattenBVH(root, &offset);
    CHECK_EQ(totalNodes.load(), offset);
}

BVHBuildNode *BVHAggregate::buildRecursive(ThreadLocal<Allocator> &threadAllocators,
                                           pstd::span<BVHPrimitive> bvhPrimitives,
                                           std::atomic<int> *totalNodes,
                                           std::atomic<int> *orderedPrimsOffset,
                                           std::vector<Primitive> &orderedPrims) {
    DCHECK_NE(bvhPrimitives.size(), 0);
    Allocator alloc = threadAllocators.Get();
    BVHBuildNode *node = alloc.new_object<BVHBuildNode>();
    // Initialize _BVHBuildNode_ for primitive range
    ++*totalNodes;
    // Compute bounds of all primitives in BVH node
    Bounds3f bounds;
    for (const auto &prim : bvhPrimitives)
        bounds = Union(bounds, prim.bounds);

    if (bounds.SurfaceArea() == 0 || bvhPrimitives.size() == 1) {
        // Create leaf _BVHBuildNode_
        int firstPrimOffset = orderedPrimsOffset->fetch_add(bvhPrimitives.size());
        for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
            int index = bvhPrimitives[i].primitiveIndex;
            orderedPrims[firstPrimOffset + i] = primitives[index];
        }
        node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
        return node;

    } else {
        // Compute bound of primitive centroids and choose split dimension _dim_
        Bounds3f centroidBounds;
        for (const auto &prim : bvhPrimitives)
            centroidBounds = Union(centroidBounds, prim.Centroid());
        int dim = centroidBounds.MaxDimension();

        // Partition primitives into two sets and build children
        if (centroidBounds.pMax[dim] == centroidBounds.pMin[dim]) {
            // Create leaf _BVHBuildNode_
            int firstPrimOffset = orderedPrimsOffset->fetch_add(bvhPrimitives.size());
            for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
                int index = bvhPrimitives[i].primitiveIndex;
                orderedPrims[firstPrimOffset + i] = primitives[index];
            }
            node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
            return node;

        } else {
            int mid = bvhPrimitives.size() / 2;
            // Partition primitives based on _splitMethod_
            switch (splitMethod) {
            case SplitMethod::Middle: {
                // Partition primitives through node's midpoint
                Float pmid = (centroidBounds.pMin[dim] + centroidBounds.pMax[dim]) / 2;
                auto midIter = std::partition(bvhPrimitives.begin(), bvhPrimitives.end(),
                                              [dim, pmid](const BVHPrimitive &pi) {
                                                  return pi.Centroid()[dim] < pmid;
                                              });
                mid = midIter - bvhPrimitives.begin();
                // For lots of prims with large overlapping bounding boxes, this
                // may fail to partition; in that case do not break and fall through
                // to EqualCounts.
                if (midIter != bvhPrimitives.begin() && midIter != bvhPrimitives.end())
                    break;
            }
            case SplitMethod::EqualCounts: {
                // Partition primitives into equally sized subsets
                mid = bvhPrimitives.size() / 2;
                std::nth_element(bvhPrimitives.begin(), bvhPrimitives.begin() + mid,
                                 bvhPrimitives.end(),
                                 [dim](const BVHPrimitive &a, const BVHPrimitive &b) {
                                     return a.Centroid()[dim] < b.Centroid()[dim];
                                 });

                break;
            }
            case SplitMethod::SAH:
            default: {
                // Partition primitives using approximate SAH
                if (bvhPrimitives.size() <= 2) {
                    // Partition primitives into equally sized subsets
                    mid = bvhPrimitives.size() / 2;
                    std::nth_element(bvhPrimitives.begin(), bvhPrimitives.begin() + mid,
                                     bvhPrimitives.end(),
                                     [dim](const BVHPrimitive &a, const BVHPrimitive &b) {
                                         return a.Centroid()[dim] < b.Centroid()[dim];
                                     });

                } else {
                    // Allocate _BVHSplitBucket_ for SAH partition buckets
                    constexpr int nBuckets = 12;
                    BVHSplitBucket buckets[nBuckets];

                    // Initialize _BVHSplitBucket_ for SAH partition buckets
                    for (const auto &prim : bvhPrimitives) {
                        int b = nBuckets * centroidBounds.Offset(prim.Centroid())[dim];
                        if (b == nBuckets)
                            b = nBuckets - 1;
                        DCHECK_GE(b, 0);
                        DCHECK_LT(b, nBuckets);
                        buckets[b].count++;
                        buckets[b].bounds = Union(buckets[b].bounds, prim.bounds);
                    }

                    // Compute costs for splitting after each bucket
                    constexpr int nSplits = nBuckets - 1;
                    Float costs[nSplits] = {};
                    // Partially initialize _costs_ using a forward scan over splits
                    int countBelow = 0;
                    Bounds3f boundBelow;
                    for (int i = 0; i < nSplits; ++i) {
                        boundBelow = Union(boundBelow, buckets[i].bounds);
                        countBelow += buckets[i].count;
                        costs[i] += countBelow * boundBelow.SurfaceArea();
                    }

                    // Finish initializing _costs_ using a backward scan over splits
                    int countAbove = 0;
                    Bounds3f boundAbove;
                    for (int i = nSplits; i >= 1; --i) {
                        boundAbove = Union(boundAbove, buckets[i].bounds);
                        countAbove += buckets[i].count;
                        costs[i - 1] += countAbove * boundAbove.SurfaceArea();
                    }

                    // Find bucket to split at that minimizes SAH metric
                    int minCostSplitBucket = -1;
                    Float minCost = Infinity;
                    for (int i = 0; i < nSplits; ++i) {
                        // Compute cost for candidate split and update minimum if
                        // necessary
                        if (costs[i] < minCost) {
                            minCost = costs[i];
                            minCostSplitBucket = i;
                        }
                    }
                    // Compute leaf cost and SAH split cost for chosen split
                    Float leafCost = bvhPrimitives.size();
                    minCost = 1.f / 2.f + minCost / bounds.SurfaceArea();

                    // Either create leaf or split primitives at selected SAH bucket
                    if (bvhPrimitives.size() > maxPrimsInNode || minCost < leafCost) {
                        auto midIter = std::partition(
                            bvhPrimitives.begin(), bvhPrimitives.end(),
                            [=](const BVHPrimitive &bp) {
                                int b =
                                    nBuckets * centroidBounds.Offset(bp.Centroid())[dim];
                                if (b == nBuckets)
                                    b = nBuckets - 1;
                                return b <= minCostSplitBucket;
                            });
                        mid = midIter - bvhPrimitives.begin();
                    } else {
                        // Create leaf _BVHBuildNode_
                        int firstPrimOffset =
                            orderedPrimsOffset->fetch_add(bvhPrimitives.size());
                        for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
                            int index = bvhPrimitives[i].primitiveIndex;
                            orderedPrims[firstPrimOffset + i] = primitives[index];
                        }
                        node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
                        return node;
                    }
                }

                break;
            }
            }

            BVHBuildNode *children[2];
            // Recursively build BVHs for _children_
            if (bvhPrimitives.size() > 128 * 1024) {
                // Recursively build child BVHs in parallel
                ParallelFor(0, 2, [&](int i) {
                    if (i == 0)
                        children[0] = buildRecursive(
                            threadAllocators, bvhPrimitives.subspan(0, mid), totalNodes,
                            orderedPrimsOffset, orderedPrims);
                    else
                        children[1] =
                            buildRecursive(threadAllocators, bvhPrimitives.subspan(mid),
                                           totalNodes, orderedPrimsOffset, orderedPrims);
                });

            } else {
                // Recursively build child BVHs sequentially
                children[0] =
                    buildRecursive(threadAllocators, bvhPrimitives.subspan(0, mid),
                                   totalNodes, orderedPrimsOffset, orderedPrims);
                children[1] =
                    buildRecursive(threadAllocators, bvhPrimitives.subspan(mid),
                                   totalNodes, orderedPrimsOffset, orderedPrims);
            }

            node->InitInterior(dim, children[0], children[1]);
        }
    }

    return node;
}

BVHBuildNode *BVHAggregate::buildHLBVH(Allocator alloc,
                                       const std::vector<BVHPrimitive> &bvhPrimitives,
                                       std::atomic<int> *totalNodes,
                                       std::vector<Primitive> &orderedPrims) {
    // Compute bounding box of all primitive centroids
    Bounds3f bounds;
    for (const BVHPrimitive &prim : bvhPrimitives)
        bounds = Union(bounds, prim.Centroid());

    // Compute Morton indices of primitives
    std::vector<MortonPrimitive> mortonPrims(bvhPrimitives.size());
    ParallelFor(0, bvhPrimitives.size(), [&](int64_t i) {
        // Initialize _mortonPrims[i]_ for _i_th primitive
        constexpr int mortonBits = 10;
        constexpr int mortonScale = 1 << mortonBits;
        mortonPrims[i].primitiveIndex = bvhPrimitives[i].primitiveIndex;
        Vector3f centroidOffset = bounds.Offset(bvhPrimitives[i].Centroid());
        Vector3f offset = centroidOffset * mortonScale;
        mortonPrims[i].mortonCode = EncodeMorton3(offset.x, offset.y, offset.z);
    });

    // Radix sort primitive Morton indices
    RadixSort(&mortonPrims);

    // Create LBVH treelets at bottom of BVH
    // Find intervals of primitives for each treelet
    std::vector<LBVHTreelet> treeletsToBuild;
    for (size_t start = 0, end = 1; end <= mortonPrims.size(); ++end) {
        uint32_t mask = 0b00111111111111000000000000000000;
        if (end == (int)mortonPrims.size() || ((mortonPrims[start].mortonCode & mask) !=
                                               (mortonPrims[end].mortonCode & mask))) {
            // Add entry to _treeletsToBuild_ for this treelet
            size_t nPrimitives = end - start;
            int maxBVHNodes = 2 * nPrimitives - 1;
            BVHBuildNode *nodes = alloc.allocate_object<BVHBuildNode>(maxBVHNodes);
            treeletsToBuild.push_back({start, nPrimitives, nodes});

            start = end;
        }
    }

    // Create LBVHs for treelets in parallel
    std::atomic<int> orderedPrimsOffset(0);
    ParallelFor(0, treeletsToBuild.size(), [&](int i) {
        // Generate _i_th LBVH treelet
        int nodesCreated = 0;
        const int firstBitIndex = 29 - 12;
        LBVHTreelet &tr = treeletsToBuild[i];
        tr.buildNodes = emitLBVH(
            tr.buildNodes, bvhPrimitives, &mortonPrims[tr.startIndex], tr.nPrimitives,
            &nodesCreated, orderedPrims, &orderedPrimsOffset, firstBitIndex);
        *totalNodes += nodesCreated;
    });

    // Create and return SAH BVH from LBVH treelets
    std::vector<BVHBuildNode *> finishedTreelets;
    finishedTreelets.reserve(treeletsToBuild.size());
    for (LBVHTreelet &treelet : treeletsToBuild)
        finishedTreelets.push_back(treelet.buildNodes);
    return buildUpperSAH(alloc, finishedTreelets, 0, finishedTreelets.size(), totalNodes);
}

BVHBuildNode *BVHAggregate::emitLBVH(BVHBuildNode *&buildNodes,
                                     const std::vector<BVHPrimitive> &bvhPrimitives,
                                     MortonPrimitive *mortonPrims, int nPrimitives,
                                     int *totalNodes,
                                     std::vector<Primitive> &orderedPrims,
                                     std::atomic<int> *orderedPrimsOffset, int bitIndex) {
    CHECK_GT(nPrimitives, 0);
    if (bitIndex == -1 || nPrimitives < maxPrimsInNode) {
        // Create and return leaf node of LBVH treelet
        ++*totalNodes;
        BVHBuildNode *node = buildNodes++;
        Bounds3f bounds;
        int firstPrimOffset = orderedPrimsOffset->fetch_add(nPrimitives);
        for (int i = 0; i < nPrimitives; ++i) {
            int primitiveIndex = mortonPrims[i].primitiveIndex;
            orderedPrims[firstPrimOffset + i] = primitives[primitiveIndex];
            bounds = Union(bounds, bvhPrimitives[primitiveIndex].bounds);
        }
        node->InitLeaf(firstPrimOffset, nPrimitives, bounds);
        return node;

    } else {
        int mask = 1 << bitIndex;
        // Advance to next subtree level if there is no LBVH split for this bit
        if ((mortonPrims[0].mortonCode & mask) ==
            (mortonPrims[nPrimitives - 1].mortonCode & mask))
            return emitLBVH(buildNodes, bvhPrimitives, mortonPrims, nPrimitives,
                            totalNodes, orderedPrims, orderedPrimsOffset, bitIndex - 1);

        // Find LBVH split point for this dimension
        int splitOffset = FindInterval(nPrimitives, [&](int index) {
            return ((mortonPrims[0].mortonCode & mask) ==
                    (mortonPrims[index].mortonCode & mask));
        });
        ++splitOffset;
        CHECK_LE(splitOffset, nPrimitives - 1);
        CHECK_NE(mortonPrims[splitOffset - 1].mortonCode & mask,
                 mortonPrims[splitOffset].mortonCode & mask);

        // Create and return interior LBVH node
        (*totalNodes)++;
        BVHBuildNode *node = buildNodes++;
        BVHBuildNode *lbvh[2] = {
            emitLBVH(buildNodes, bvhPrimitives, mortonPrims, splitOffset, totalNodes,
                     orderedPrims, orderedPrimsOffset, bitIndex - 1),
            emitLBVH(buildNodes, bvhPrimitives, &mortonPrims[splitOffset],
                     nPrimitives - splitOffset, totalNodes, orderedPrims,
                     orderedPrimsOffset, bitIndex - 1)};
        int axis = bitIndex % 3;
        node->InitInterior(axis, lbvh[0], lbvh[1]);
        return node;
    }
}

int BVHAggregate::flattenBVH(BVHBuildNode *node, int *offset) {
    LinearBVHNode *linearNode = &nodes[*offset];
    linearNode->bounds = node->bounds;
    int nodeOffset = (*offset)++;
    if (node->nPrimitives > 0) {
        CHECK(!node->children[0] && !node->children[1]);
        CHECK_LT(node->nPrimitives, 65536);
        linearNode->primitivesOffset = node->firstPrimOffset;
        linearNode->nPrimitives = node->nPrimitives;
    } else {
        // Create interior flattened BVH node
        linearNode->axis = node->splitAxis;
        linearNode->nPrimitives = 0;
        flattenBVH(node->children[0], offset);
        linearNode->secondChildOffset = flattenBVH(node->children[1], offset);
    }
    return nodeOffset;
}

Bounds3f BVHAggregate::Bounds() const {
    CHECK(nodes);
    return nodes[0].bounds;
}

pstd::optional<ShapeIntersection> BVHAggregate::Intersect(const Ray &ray,
                                                          Float tMax) const {
    if (!nodes)
        return {};
    pstd::optional<ShapeIntersection> si;
    Vector3f invDir(1 / ray.d.x, 1 / ray.d.y, 1 / ray.d.z);
    int dirIsNeg[3] = {int(invDir.x < 0), int(invDir.y < 0), int(invDir.z < 0)};
    // Follow ray through BVH nodes to find primitive intersections
    int toVisitOffset = 0, currentNodeIndex = 0;
    int nodesToVisit[64];
    int nodesVisited = 0;
    while (true) {
        ++nodesVisited;
        const LinearBVHNode *node = &nodes[currentNodeIndex];
        // Check ray against BVH node
        if (node->bounds.IntersectP(ray.o, ray.d, tMax, invDir, dirIsNeg)) {
            if (node->nPrimitives > 0) {
                // Intersect ray with primitives in leaf BVH node
                for (int i = 0; i < node->nPrimitives; ++i) {
                    // Check for intersection with primitive in BVH node
                    pstd::optional<ShapeIntersection> primSi =
                        primitives[node->primitivesOffset + i].Intersect(ray, tMax);
                    if (primSi) {
                        si = primSi;
                        tMax = si->tHit;
                    }
                }
                if (toVisitOffset == 0)
                    break;
                currentNodeIndex = nodesToVisit[--toVisitOffset];

            } else {
                // Put far BVH node on _nodesToVisit_ stack, advance to near node
                if (dirIsNeg[node->axis]) {
                    nodesToVisit[toVisitOffset++] = currentNodeIndex + 1;
                    currentNodeIndex = node->secondChildOffset;
                } else {
                    nodesToVisit[toVisitOffset++] = node->secondChildOffset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
            }
        } else {
            if (toVisitOffset == 0)
                break;
            currentNodeIndex = nodesToVisit[--toVisitOffset];
        }
    }

    bvhNodesVisited += nodesVisited;
    return si;
}

bool BVHAggregate::IntersectP(const Ray &ray, Float tMax) const {
    if (!nodes)
        return false;
    Vector3f invDir(1.f / ray.d.x, 1.f / ray.d.y, 1.f / ray.d.z);
    int dirIsNeg[3] = {static_cast<int>(invDir.x < 0), static_cast<int>(invDir.y < 0),
                       static_cast<int>(invDir.z < 0)};
    int nodesToVisit[64];
    int toVisitOffset = 0, currentNodeIndex = 0;
    int nodesVisited = 0;

    while (true) {
        ++nodesVisited;
        const LinearBVHNode *node = &nodes[currentNodeIndex];
        if (node->bounds.IntersectP(ray.o, ray.d, tMax, invDir, dirIsNeg)) {
            // Process BVH node _node_ for traversal
            if (node->nPrimitives > 0) {
                for (int i = 0; i < node->nPrimitives; ++i) {
                    if (primitives[node->primitivesOffset + i].IntersectP(ray, tMax)) {
                        bvhNodesVisited += nodesVisited;
                        return true;
                    }
                }
                if (toVisitOffset == 0)
                    break;
                currentNodeIndex = nodesToVisit[--toVisitOffset];
            } else {
                if (dirIsNeg[node->axis] != 0) {
                    /// second child first
                    nodesToVisit[toVisitOffset++] = currentNodeIndex + 1;
                    currentNodeIndex = node->secondChildOffset;
                } else {
                    nodesToVisit[toVisitOffset++] = node->secondChildOffset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
            }
        } else {
            if (toVisitOffset == 0)
                break;
            currentNodeIndex = nodesToVisit[--toVisitOffset];
        }
    }
    bvhNodesVisited += nodesVisited;
    return false;
}

BVHBuildNode *BVHAggregate::buildUpperSAH(Allocator alloc,
                                          std::vector<BVHBuildNode *> &treeletRoots,
                                          int start, int end,
                                          std::atomic<int> *totalNodes) const {
    CHECK_LT(start, end);
    int nNodes = end - start;
    if (nNodes == 1)
        return treeletRoots[start];
    (*totalNodes)++;
    BVHBuildNode *node = alloc.new_object<BVHBuildNode>();

    // Compute bounds of all nodes under this HLBVH node
    Bounds3f bounds;
    for (int i = start; i < end; ++i)
        bounds = Union(bounds, treeletRoots[i]->bounds);

    // Compute bound of HLBVH node centroids, choose split dimension _dim_
    Bounds3f centroidBounds;
    for (int i = start; i < end; ++i) {
        Point3f centroid =
            (treeletRoots[i]->bounds.pMin + treeletRoots[i]->bounds.pMax) * 0.5f;
        centroidBounds = Union(centroidBounds, centroid);
    }
    int dim = centroidBounds.MaxDimension();
    // FIXME: if this hits, what do we need to do?
    // Make sure the SAH split below does something... ?
    CHECK_NE(centroidBounds.pMax[dim], centroidBounds.pMin[dim]);

    // Allocate _BVHSplitBucket_ for SAH partition buckets
    constexpr int nBuckets = 12;
    struct BVHSplitBucket {
        int count = 0;
        Bounds3f bounds;
    };
    BVHSplitBucket buckets[nBuckets];

    // Initialize _BVHSplitBucket_ for HLBVH SAH partition buckets
    for (int i = start; i < end; ++i) {
        Float centroid =
            (treeletRoots[i]->bounds.pMin[dim] + treeletRoots[i]->bounds.pMax[dim]) *
            0.5f;
        int b = nBuckets * ((centroid - centroidBounds.pMin[dim]) /
                            (centroidBounds.pMax[dim] - centroidBounds.pMin[dim]));
        if (b == nBuckets)
            b = nBuckets - 1;
        CHECK_GE(b, 0);
        CHECK_LT(b, nBuckets);
        buckets[b].count++;
        buckets[b].bounds = Union(buckets[b].bounds, treeletRoots[i]->bounds);
    }

    // Compute costs for splitting after each bucket
    Float cost[nBuckets - 1];
    for (int i = 0; i < nBuckets - 1; ++i) {
        Bounds3f b0, b1;
        int count0 = 0, count1 = 0;
        for (int j = 0; j <= i; ++j) {
            b0 = Union(b0, buckets[j].bounds);
            count0 += buckets[j].count;
        }
        for (int j = i + 1; j < nBuckets; ++j) {
            b1 = Union(b1, buckets[j].bounds);
            count1 += buckets[j].count;
        }
        cost[i] = .125f + (count0 * b0.SurfaceArea() + count1 * b1.SurfaceArea()) /
                              bounds.SurfaceArea();
    }

    // Find bucket to split at that minimizes SAH metric
    Float minCost = cost[0];
    int minCostSplitBucket = 0;
    for (int i = 1; i < nBuckets - 1; ++i) {
        if (cost[i] < minCost) {
            minCost = cost[i];
            minCostSplitBucket = i;
        }
    }

    // Split nodes and create interior HLBVH SAH node
    BVHBuildNode **pmid = std::partition(
        &treeletRoots[start], &treeletRoots[end - 1] + 1, [=](const BVHBuildNode *node) {
            Float centroid = (node->bounds.pMin[dim] + node->bounds.pMax[dim]) * 0.5f;
            int b = nBuckets * ((centroid - centroidBounds.pMin[dim]) /
                                (centroidBounds.pMax[dim] - centroidBounds.pMin[dim]));
            if (b == nBuckets)
                b = nBuckets - 1;
            CHECK_GE(b, 0);
            CHECK_LT(b, nBuckets);
            return b <= minCostSplitBucket;
        });
    int mid = pmid - &treeletRoots[0];
    CHECK_GT(mid, start);
    CHECK_LT(mid, end);
    node->InitInterior(dim,
                       this->buildUpperSAH(alloc, treeletRoots, start, mid, totalNodes),
                       this->buildUpperSAH(alloc, treeletRoots, mid, end, totalNodes));
    return node;
}

BVHAggregate *BVHAggregate::Create(std::vector<Primitive> prims,
                                   const ParameterDictionary &parameters) {
    std::string splitMethodName = parameters.GetOneString("splitmethod", "sah");
    BVHAggregate::SplitMethod splitMethod;
    if (splitMethodName == "sah")
        splitMethod = BVHAggregate::SplitMethod::SAH;
    else if (splitMethodName == "hlbvh")
        splitMethod = BVHAggregate::SplitMethod::HLBVH;
    else if (splitMethodName == "middle")
        splitMethod = BVHAggregate::SplitMethod::Middle;
    else if (splitMethodName == "equal")
        splitMethod = BVHAggregate::SplitMethod::EqualCounts;
    else {
        Warning(R"(BVH split method "%s" unknown.  Using "sah".)", splitMethodName);
        splitMethod = BVHAggregate::SplitMethod::SAH;
    }

    int maxPrimsInNode = parameters.GetOneInt("maxnodeprims", 4);
    return new BVHAggregate(std::move(prims), maxPrimsInNode, splitMethod);
}


// VWBVHAggrefate Method Definitions
VWBVHAggregate::VWBVHAggregate(std::vector<Primitive> prims, int maxPrimsInNode,
                           SplitMethod splitMethod)
    : maxPrimsInNode(std::min(255, maxPrimsInNode)),
      primitives(std::move(prims)),
      splitMethod(splitMethod) {
    CHECK(!primitives.empty());
    // Build BVH from _primitives_
    // Initialize _bvhPrimitives_ array for primitives
    std::vector<BVHPrimitive> bvhPrimitives(primitives.size());
    for (size_t i = 0; i < primitives.size(); ++i)
    bvhPrimitives[i] = BVHPrimitive(i, primitives[i].Bounds());

    // Build BVH for primitives using _bvhPrimitives_
    // Declare _Allocator_s used for BVH construction
    pstd::pmr::monotonic_buffer_resource resource;
    Allocator alloc(&resource);
    using Resource = pstd::pmr::monotonic_buffer_resource;
    std::vector<std::unique_ptr<Resource>> threadBufferResources;
    ThreadLocal<Allocator> threadAllocators([&threadBufferResources]() {
        threadBufferResources.push_back(std::make_unique<Resource>());
        auto ptr = threadBufferResources.back().get();
        return Allocator(ptr);
    });

    std::vector<Primitive> orderedPrims(primitives.size());
    BVHBuildNode *root;
    // Build BVH according to selected _splitMethod_
    std::atomic<int> totalNodes{0};

    std::atomic<int> orderedPrimsOffset{0};
    root = buildRecursive(threadAllocators, pstd::span<BVHPrimitive>(bvhPrimitives),
                            &totalNodes, &orderedPrimsOffset, orderedPrims);
    CHECK_EQ(orderedPrimsOffset.load(), orderedPrims.size());
    
    primitives.swap(orderedPrims);

    // Convert BVH into compact representation in _nodes_ array
    bvhPrimitives.resize(0);
    bvhPrimitives.shrink_to_fit();
    LOG_CONCISE("BVH created with %d nodes for %d primitives (%.2f MB)",
                totalNodes.load(), (int)primitives.size(),
                float(totalNodes.load() * sizeof(LinearBVHNode)) / (1024.f * 1024.f));
    treeBytes += totalNodes * sizeof(LinearBVHNode) + sizeof(*this) +
                 primitives.size() * sizeof(primitives[0]);
    nodes = new LinearVWBVHNode[totalNodes];
    int offset = 0;

    flattenVWBVH(root, &offset);
    
    CHECK_EQ(totalNodes.load(), offset);
}

BVHBuildNode *VWBVHAggregate::buildRecursive(ThreadLocal<Allocator> &threadAllocators,
                                           pstd::span<BVHPrimitive> bvhPrimitives,
                                           std::atomic<int> *totalNodes,
                                           std::atomic<int> *orderedPrimsOffset,
                                           std::vector<Primitive> &orderedPrims) {
    DCHECK_NE(bvhPrimitives.size(), 0);
    Allocator alloc = threadAllocators.Get();
    BVHBuildNode *node = alloc.new_object<BVHBuildNode>();
    // Initialize _BVHBuildNode_ for primitive range
    ++*totalNodes;
    // Compute bounds of all primitives in BVH node
    Bounds3f bounds;
    for (const auto &prim : bvhPrimitives)
        bounds = Union(bounds, prim.bounds);

    if (bounds.SurfaceArea() == 0 || bvhPrimitives.size() == 1) {
        // Create leaf _BVHBuildNode_
        int firstPrimOffset = orderedPrimsOffset->fetch_add(bvhPrimitives.size());
        for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
            int index = bvhPrimitives[i].primitiveIndex;
            orderedPrims[firstPrimOffset + i] = primitives[index];
        }
        node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
        return node;

    } else {
        // Compute bound of primitive centroids and choose split dimension _dim_
        Bounds3f centroidBounds;
        for (const auto &prim : bvhPrimitives)
            centroidBounds = Union(centroidBounds, prim.Centroid());
        int dim = centroidBounds.MaxDimension();

        // Partition primitives into two sets and build children
        if (centroidBounds.pMax[dim] == centroidBounds.pMin[dim]) {
            // Create leaf _BVHBuildNode_
            int firstPrimOffset = orderedPrimsOffset->fetch_add(bvhPrimitives.size());
            for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
                int index = bvhPrimitives[i].primitiveIndex;
                orderedPrims[firstPrimOffset + i] = primitives[index];
            }
            node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
            return node;

        } else {
            int mid = bvhPrimitives.size() / 2;
            // Partition primitives based on _splitMethod_
            switch (splitMethod) {
            case SplitMethod::Middle: {
                // Partition primitives through node's midpoint
                Float pmid = (centroidBounds.pMin[dim] + centroidBounds.pMax[dim]) / 2;
                auto midIter = std::partition(bvhPrimitives.begin(), bvhPrimitives.end(),
                                              [dim, pmid](const BVHPrimitive &pi) {
                                                  return pi.Centroid()[dim] < pmid;
                                              });
                mid = midIter - bvhPrimitives.begin();
                // For lots of prims with large overlapping bounding boxes, this
                // may fail to partition; in that case do not break and fall through
                // to EqualCounts.
                if (midIter != bvhPrimitives.begin() && midIter != bvhPrimitives.end())
                    break;
            }
            case SplitMethod::EqualCounts: {
                // Partition primitives into equally sized subsets
                mid = bvhPrimitives.size() / 2;
                std::nth_element(bvhPrimitives.begin(), bvhPrimitives.begin() + mid,
                                 bvhPrimitives.end(),
                                 [dim](const BVHPrimitive &a, const BVHPrimitive &b) {
                                     return a.Centroid()[dim] < b.Centroid()[dim];
                                 });

                break;
            }
            case SplitMethod::SAH:
            default: {
                // Partition primitives using approximate SAH
                if (bvhPrimitives.size() <= 2) {
                    // Partition primitives into equally sized subsets
                    mid = bvhPrimitives.size() / 2;
                    std::nth_element(bvhPrimitives.begin(), bvhPrimitives.begin() + mid,
                                     bvhPrimitives.end(),
                                     [dim](const BVHPrimitive &a, const BVHPrimitive &b) {
                                         return a.Centroid()[dim] < b.Centroid()[dim];
                                     });

                } else {
                    // Allocate _BVHSplitBucket_ for SAH partition buckets
                    constexpr int nBuckets = 12;
                    BVHSplitBucket buckets[nBuckets];

                    // Initialize _BVHSplitBucket_ for SAH partition buckets
                    for (const auto &prim : bvhPrimitives) {
                        int b = nBuckets * centroidBounds.Offset(prim.Centroid())[dim];
                        if (b == nBuckets)
                            b = nBuckets - 1;
                        DCHECK_GE(b, 0);
                        DCHECK_LT(b, nBuckets);
                        buckets[b].count++;
                        buckets[b].bounds = Union(buckets[b].bounds, prim.bounds);
                    }

                    // Compute costs for splitting after each bucket
                    constexpr int nSplits = nBuckets - 1;
                    Float costs[nSplits] = {};
                    // Partially initialize _costs_ using a forward scan over splits
                    int countBelow = 0;
                    Bounds3f boundBelow;
                    for (int i = 0; i < nSplits; ++i) {
                        boundBelow = Union(boundBelow, buckets[i].bounds);
                        countBelow += buckets[i].count;
                        costs[i] += countBelow * boundBelow.SurfaceArea();
                    }

                    // Finish initializing _costs_ using a backward scan over splits
                    int countAbove = 0;
                    Bounds3f boundAbove;
                    for (int i = nSplits; i >= 1; --i) {
                        boundAbove = Union(boundAbove, buckets[i].bounds);
                        countAbove += buckets[i].count;
                        costs[i - 1] += countAbove * boundAbove.SurfaceArea();
                    }

                    // Find bucket to split at that minimizes SAH metric
                    int minCostSplitBucket = -1;
                    Float minCost = Infinity;
                    for (int i = 0; i < nSplits; ++i) {
                        // Compute cost for candidate split and update minimum if
                        // necessary
                        if (costs[i] < minCost) {
                            minCost = costs[i];
                            minCostSplitBucket = i;
                        }
                    }
                    // Compute leaf cost and SAH split cost for chosen split
                    Float leafCost = bvhPrimitives.size();
                    minCost = 1.f / 2.f + minCost / bounds.SurfaceArea();

                    // Either create leaf or split primitives at selected SAH bucket
                    if (bvhPrimitives.size() > maxPrimsInNode || minCost < leafCost) {
                        auto midIter = std::partition(
                            bvhPrimitives.begin(), bvhPrimitives.end(),
                            [=](const BVHPrimitive &bp) {
                                int b =
                                    nBuckets * centroidBounds.Offset(bp.Centroid())[dim];
                                if (b == nBuckets)
                                    b = nBuckets - 1;
                                return b <= minCostSplitBucket;
                            });
                        mid = midIter - bvhPrimitives.begin();
                    } else {
                        // Create leaf _BVHBuildNode_
                        int firstPrimOffset =
                            orderedPrimsOffset->fetch_add(bvhPrimitives.size());
                        for (size_t i = 0; i < bvhPrimitives.size(); ++i) {
                            int index = bvhPrimitives[i].primitiveIndex;
                            orderedPrims[firstPrimOffset + i] = primitives[index];
                        }
                        node->InitLeaf(firstPrimOffset, bvhPrimitives.size(), bounds);
                        return node;
                    }
                }

                break;
            }
            }

            BVHBuildNode *children[2];
            // Recursively build BVHs for _children_
            if (bvhPrimitives.size() > 128 * 1024) {
                // Recursively build child BVHs in parallel
                ParallelFor(0, 2, [&](int i) {
                    if (i == 0)
                        children[0] = buildRecursive(
                            threadAllocators, bvhPrimitives.subspan(0, mid), totalNodes,
                            orderedPrimsOffset, orderedPrims);
                    else
                        children[1] =
                            buildRecursive(threadAllocators, bvhPrimitives.subspan(mid),
                                           totalNodes, orderedPrimsOffset, orderedPrims);
                });

            } else {
                // Recursively build child BVHs sequentially
                children[0] =
                    buildRecursive(threadAllocators, bvhPrimitives.subspan(0, mid),
                                   totalNodes, orderedPrimsOffset, orderedPrims);
                children[1] =
                    buildRecursive(threadAllocators, bvhPrimitives.subspan(mid),
                                   totalNodes, orderedPrimsOffset, orderedPrims);
            }

            node->InitInterior(dim, children[0], children[1]);
        }
    }

    return node;
}


/*
BVHBuildNode *VWBVHAggregate::buildHLBVH(Allocator alloc,
                                       const std::vector<BVHPrimitive> &bvhPrimitives,
                                       std::atomic<int> *totalNodes,
                                       std::vector<Primitive> &orderedPrims) {
    // Compute bounding box of all primitive centroids
    Bounds3f bounds;
    for (const BVHPrimitive &prim : bvhPrimitives)
        bounds = Union(bounds, prim.Centroid());

    // Compute Morton indices of primitives
    std::vector<MortonPrimitive> mortonPrims(bvhPrimitives.size());
    ParallelFor(0, bvhPrimitives.size(), [&](int64_t i) {
        // Initialize _mortonPrims[i]_ for _i_th primitive
        constexpr int mortonBits = 10;
        constexpr int mortonScale = 1 << mortonBits;
        mortonPrims[i].primitiveIndex = bvhPrimitives[i].primitiveIndex;
        Vector3f centroidOffset = bounds.Offset(bvhPrimitives[i].Centroid());
        Vector3f offset = centroidOffset * mortonScale;
        mortonPrims[i].mortonCode = EncodeMorton3(offset.x, offset.y, offset.z);
    });

    // Radix sort primitive Morton indices
    RadixSort(&mortonPrims);

    // Create LBVH treelets at bottom of BVH
    // Find intervals of primitives for each treelet
    std::vector<LBVHTreelet> treeletsToBuild;
    for (size_t start = 0, end = 1; end <= mortonPrims.size(); ++end) {
        uint32_t mask = 0b00111111111111000000000000000000;
        if (end == (int)mortonPrims.size() || ((mortonPrims[start].mortonCode & mask) !=
                                               (mortonPrims[end].mortonCode & mask))) {
            // Add entry to _treeletsToBuild_ for this treelet
            size_t nPrimitives = end - start;
            int maxBVHNodes = 2 * nPrimitives - 1;
            BVHBuildNode *nodes = alloc.allocate_object<BVHBuildNode>(maxBVHNodes);
            treeletsToBuild.push_back({start, nPrimitives, nodes});

            start = end;
        }
    }

    // Create LBVHs for treelets in parallel
    std::atomic<int> orderedPrimsOffset(0);
    ParallelFor(0, treeletsToBuild.size(), [&](int i) {
        // Generate _i_th LBVH treelet
        int nodesCreated = 0;
        const int firstBitIndex = 29 - 12;
        LBVHTreelet &tr = treeletsToBuild[i];
        tr.buildNodes = emitLBVH(
            tr.buildNodes, bvhPrimitives, &mortonPrims[tr.startIndex], tr.nPrimitives,
            &nodesCreated, orderedPrims, &orderedPrimsOffset, firstBitIndex);
        *totalNodes += nodesCreated;
    });

    // Create and return SAH BVH from LBVH treelets
    std::vector<BVHBuildNode *> finishedTreelets;
    finishedTreelets.reserve(treeletsToBuild.size());
    for (LBVHTreelet &treelet : treeletsToBuild)
        finishedTreelets.push_back(treelet.buildNodes);
    return buildUpperSAH(alloc, finishedTreelets, 0, finishedTreelets.size(), totalNodes);
}

BVHBuildNode *VWBVHAggregate::emitLBVH(BVHBuildNode *&buildNodes,
                                     const std::vector<BVHPrimitive> &bvhPrimitives,
                                     MortonPrimitive *mortonPrims, int nPrimitives,
                                     int *totalNodes,
                                     std::vector<Primitive> &orderedPrims,
                                     std::atomic<int> *orderedPrimsOffset, int bitIndex) {
    CHECK_GT(nPrimitives, 0);
    if (bitIndex == -1 || nPrimitives < maxPrimsInNode) {
        // Create and return leaf node of LBVH treelet
        ++*totalNodes;
        BVHBuildNode *node = buildNodes++;
        Bounds3f bounds;
        int firstPrimOffset = orderedPrimsOffset->fetch_add(nPrimitives);
        for (int i = 0; i < nPrimitives; ++i) {
            int primitiveIndex = mortonPrims[i].primitiveIndex;
            orderedPrims[firstPrimOffset + i] = primitives[primitiveIndex];
            bounds = Union(bounds, bvhPrimitives[primitiveIndex].bounds);
        }
        node->InitLeaf(firstPrimOffset, nPrimitives, bounds);
        return node;

    } else {
        int mask = 1 << bitIndex;
        // Advance to next subtree level if there is no LBVH split for this bit
        if ((mortonPrims[0].mortonCode & mask) ==
            (mortonPrims[nPrimitives - 1].mortonCode & mask))
            return emitLBVH(buildNodes, bvhPrimitives, mortonPrims, nPrimitives,
                            totalNodes, orderedPrims, orderedPrimsOffset, bitIndex - 1);

        // Find LBVH split point for this dimension
        int splitOffset = FindInterval(nPrimitives, [&](int index) {
            return ((mortonPrims[0].mortonCode & mask) ==
                    (mortonPrims[index].mortonCode & mask));
        });
        ++splitOffset;
        CHECK_LE(splitOffset, nPrimitives - 1);
        CHECK_NE(mortonPrims[splitOffset - 1].mortonCode & mask,
                 mortonPrims[splitOffset].mortonCode & mask);

        // Create and return interior LBVH node
        (*totalNodes)++;
        BVHBuildNode *node = buildNodes++;
        BVHBuildNode *lbvh[2] = {
            emitLBVH(buildNodes, bvhPrimitives, mortonPrims, splitOffset, totalNodes,
                     orderedPrims, orderedPrimsOffset, bitIndex - 1),
            emitLBVH(buildNodes, bvhPrimitives, &mortonPrims[splitOffset],
                     nPrimitives - splitOffset, totalNodes, orderedPrims,
                     orderedPrimsOffset, bitIndex - 1)};
        int axis = bitIndex % 3;
        node->InitInterior(axis, lbvh[0], lbvh[1]);
        return node;
    }
}

BVHBuildNode *VWBVHAggregate::buildUpperSAH(Allocator alloc,
                                          std::vector<BVHBuildNode *> &treeletRoots,
                                          int start, int end,
                                          std::atomic<int> *totalNodes) const {
    CHECK_LT(start, end);
    int nNodes = end - start;
    if (nNodes == 1)
        return treeletRoots[start];
    (*totalNodes)++;
    BVHBuildNode *node = alloc.new_object<BVHBuildNode>();

    // Compute bounds of all nodes under this HLBVH node
    Bounds3f bounds;
    for (int i = start; i < end; ++i)
        bounds = Union(bounds, treeletRoots[i]->bounds);

    // Compute bound of HLBVH node centroids, choose split dimension _dim_
    Bounds3f centroidBounds;
    for (int i = start; i < end; ++i) {
        Point3f centroid =
            (treeletRoots[i]->bounds.pMin + treeletRoots[i]->bounds.pMax) * 0.5f;
        centroidBounds = Union(centroidBounds, centroid);
    }
    int dim = centroidBounds.MaxDimension();
    // FIXME: if this hits, what do we need to do?
    // Make sure the SAH split below does something... ?
    CHECK_NE(centroidBounds.pMax[dim], centroidBounds.pMin[dim]);

    // Allocate _BVHSplitBucket_ for SAH partition buckets
    constexpr int nBuckets = 12;
    struct BVHSplitBucket {
        int count = 0;
        Bounds3f bounds;
    };
    BVHSplitBucket buckets[nBuckets];

    // Initialize _BVHSplitBucket_ for HLBVH SAH partition buckets
    for (int i = start; i < end; ++i) {
        Float centroid =
            (treeletRoots[i]->bounds.pMin[dim] + treeletRoots[i]->bounds.pMax[dim]) *
            0.5f;
        int b = nBuckets * ((centroid - centroidBounds.pMin[dim]) /
                            (centroidBounds.pMax[dim] - centroidBounds.pMin[dim]));
        if (b == nBuckets)
            b = nBuckets - 1;
        CHECK_GE(b, 0);
        CHECK_LT(b, nBuckets);
        buckets[b].count++;
        buckets[b].bounds = Union(buckets[b].bounds, treeletRoots[i]->bounds);
    }

    // Compute costs for splitting after each bucket
    Float cost[nBuckets - 1];
    for (int i = 0; i < nBuckets - 1; ++i) {
        Bounds3f b0, b1;
        int count0 = 0, count1 = 0;
        for (int j = 0; j <= i; ++j) {
            b0 = Union(b0, buckets[j].bounds);
            count0 += buckets[j].count;
        }
        for (int j = i + 1; j < nBuckets; ++j) {
            b1 = Union(b1, buckets[j].bounds);
            count1 += buckets[j].count;
        }
        cost[i] = .125f + (count0 * b0.SurfaceArea() + count1 * b1.SurfaceArea()) /
                              bounds.SurfaceArea();
    }

    // Find bucket to split at that minimizes SAH metric
    Float minCost = cost[0];
    int minCostSplitBucket = 0;
    for (int i = 1; i < nBuckets - 1; ++i) {
        if (cost[i] < minCost) {
            minCost = cost[i];
            minCostSplitBucket = i;
        }
    }

    // Split nodes and create interior HLBVH SAH node
    BVHBuildNode **pmid = std::partition(
        &treeletRoots[start], &treeletRoots[end - 1] + 1, [=](const BVHBuildNode *node) {
            Float centroid = (node->bounds.pMin[dim] + node->bounds.pMax[dim]) * 0.5f;
            int b = nBuckets * ((centroid - centroidBounds.pMin[dim]) /
                                (centroidBounds.pMax[dim] - centroidBounds.pMin[dim]));
            if (b == nBuckets)
                b = nBuckets - 1;
            CHECK_GE(b, 0);
            CHECK_LT(b, nBuckets);
            return b <= minCostSplitBucket;
        });
    int mid = pmid - &treeletRoots[0];
    CHECK_GT(mid, start);
    CHECK_LT(mid, end);
    node->InitInterior(dim,
                       this->buildUpperSAH(alloc, treeletRoots, start, mid, totalNodes),
                       this->buildUpperSAH(alloc, treeletRoots, mid, end, totalNodes));
    return node;
}
*/



int VWBVHAggregate::flattenVWBVH(BVHBuildNode *node, int *offset) {
    LinearVWBVHNode *linearNode = &nodes[*offset];
    linearNode->bounds = node->bounds;

    int nodeOffset = (*offset)++;
    if (node->nPrimitives > 0) {
        CHECK(!node->children[0] && !node->children[1]);
        CHECK_LT(node->nPrimitives, 64);
        linearNode->primitivesOffset = node->firstPrimOffset;
        linearNode->nPrimitives = node->nPrimitives;

        // surface voxelization
        linearNode->mask = ~(0UL); // clear
        
    } else {
        // Create interior flattened BVH node
        linearNode->axis = node->splitAxis;
        linearNode->nPrimitives = 0;
        flattenVWBVH(node->children[0], offset);
        linearNode->secondChildOffset = flattenVWBVH(node->children[1], offset);

        linearNode->mask = 0UL; // all clear 
        // computer mask for tighter bound, traverse childrens
        hierarchicalMask(linearNode, nodeOffset + 1, max_depth);
        hierarchicalMask(linearNode, linearNode->secondChildOffset, max_depth);
    }
    voxels += 64;
    voxelSets += __builtin_popcountl(linearNode->mask);
    return nodeOffset;
}

std::unordered_map<uint16_t, uint64_t> VWBVHAggregate::filling_lut = {
{0xfff, 0x8000000000000000}, {0xfbf, 0xc000000000000000}, {0xf7f, 0xe000000000000000}, {0xf3f, 0xf000000000000000}, {0xefb, 0x800000000000000}, {0xebb, 0xc00000000000000}, {0xe7b, 0xe00000000000000}, {0xe3f, 0xff00000000000000}, {0xdf7, 0x80000000000000}, {0xdb7, 0xc0000000000000}, {0xd77, 0xe0000000000000}, {0xd3f, 0xfff0000000000000}, {0xcf3, 0x8000000000000}, {0xcb3, 0xc000000000000}, {0xcb2, 0x4000000000000}, {0xc73, 0xe000000000000}, {0xc72, 0x6000000000000}, {0xc71, 0x2000000000000}, {0xc3f, 0xffff000000000000}, {0xc3e, 0x7777000000000000}, {0xc3d, 0x3333000000000000}, {0xc3c, 0x1111000000000000}, {0xc3b, 0xfff000000000000}, {0xc3a, 0x777000000000000}, {0xc37, 0xff000000000000}, {0xc36, 0x77000000000000}, {0xc35, 0x33000000000000}, {0xc33, 0xf000000000000}, {0xc32, 0x7000000000000}, {0xc31, 0x3000000000000}, {0xc30, 0x1000000000000}, {0xbff, 0x8000800000000000}, {0xbef, 0x800000000000}, {0xbbf, 0xc000c00000000000}, {0xbbe, 0x4000400000000000}, {0xbaf, 0xc00000000000}, {0xbae, 0x400000000000}, {0xb7f, 0xe000e00000000000}, {0xb7e, 0x6000600000000000}, {0xb7d, 0x2000200000000000}, {0xb6f, 0xe00000000000}, {0xb6e, 0x600000000000}, {0xb6d, 0x200000000000}, {0xb3f, 0xf000f00000000000}, {0xb3e, 0x7000700000000000}, {0xb3d, 0x3000300000000000}, {0xb3c, 0x1000100000000000}, {0xb2f, 0xf00000000000}, {0xb2e, 0x700000000000}, {0xb2d, 0x300000000000}, {0xb2c, 0x100000000000}, {0xafb, 0x800080000000000}, {0xaeb, 0x80000000000}, {0xabb, 0xc000c0000000000}, {0xaba, 0x400040000000000}, {0xaab, 0xc0000000000}, {0xeff, 0x8800000000000000}, {0xaaa, 0x40000000000}, {0xa7b, 0xe000e0000000000}, {0xa7a, 0x600060000000000}, {0xa6b, 0xe0000000000}, {0xebf, 0xcc00000000000000}, {0xa6a, 0x60000000000}, {0xa3f, 0xff00ff0000000000}, {0xa3e, 0x7700770000000000}, {0xa3d, 0x3300330000000000}, {0xa3b, 0xf000f0000000000}, {0xa3a, 0x700070000000000}, {0xa2f, 0xff0000000000}, {0xa2e, 0x770000000000}, {0xa2d, 0x330000000000}, {0xa2b, 0xf0000000000}, {0xe7f, 0xee00000000000000}, {0xa2a, 0x70000000000}, {0x9a7, 0xc000000000}, {0xdfb, 0x880000000000000}, {0x9a6, 0x4000000000}, {0x977, 0xe000e000000000}, {0x976, 0x60006000000000}, {0x967, 0xe000000000}, {0xdbb, 0xcc0000000000000}, {0x966, 0x6000000000}, {0x93f, 0xfff0fff000000000}, {0x93e, 0x7770777000000000}, {0x93b, 0xff00ff000000000}, {0x93a, 0x770077000000000}, {0x937, 0xf000f000000000}, {0x936, 0x70007000000000}, {0x92f, 0xfff000000000}, {0x92e, 0x777000000000}, {0x92b, 0xff000000000}, {0xd7f, 0xeee0000000000000}, {0x92a, 0x77000000000}, {0xd7b, 0xee0000000000000}, {0x926, 0x7000000000}, {0x8a3, 0xc00000000}, {0xcf7, 0x88000000000000}, {0x8a2, 0x400000000}, {0x863, 0xe00000000}, {0xcb7, 0xcc000000000000}, {0x862, 0x600000000}, {0xcb6, 0x44000000000000}, {0x861, 0x200000000}, {0x83f, 0xffffffff00000000}, {0x83e, 0x7777777700000000}, {0x83d, 0x3333333300000000}, {0x83c, 0x1111111100000000}, {0x83b, 0xfff0fff00000000}, {0x83a, 0x777077700000000}, {0x839, 0x333033300000000}, {0x838, 0x111011100000000}, {0x837, 0xff00ff00000000}, {0x836, 0x77007700000000}, {0x835, 0x33003300000000}, {0x833, 0xf000f00000000}, {0x832, 0x7000700000000}, {0x831, 0x3000300000000}, {0x830, 0x1000100000000}, {0x82f, 0xffff00000000}, {0x82e, 0x777700000000}, {0x82d, 0x333300000000}, {0x82c, 0x111100000000}, {0x82b, 0xfff00000000}, {0xc7f, 0xeeee000000000000}, {0x82a, 0x77700000000}, {0xc7e, 0x6666000000000000}, {0x829, 0x33300000000}, {0xc7d, 0x2222000000000000}, {0x828, 0x11100000000}, {0x827, 0xff00000000}, {0xc7b, 0xeee000000000000}, {0x826, 0x7700000000}, {0xc7a, 0x666000000000000}, {0x825, 0x3300000000}, {0x823, 0xf00000000}, {0xc77, 0xee000000000000}, {0x822, 0x700000000}, {0xc76, 0x66000000000000}, {0x821, 0x300000000}, {0xc75, 0x22000000000000}, {0x820, 0x100000000}, {0x7ff, 0x8000800080000000}, {0x7ef, 0x800080000000}, {0xc34, 0x11000000000000}, {0x7df, 0x80000000}, {0x7bf, 0xc000c000c0000000}, {0x7be, 0x4000400040000000}, {0x7af, 0xc000c0000000}, {0x7ae, 0x400040000000}, {0x79f, 0xc0000000}, {0x79e, 0x40000000}, {0x77f, 0xe000e000e0000000}, {0x77e, 0x6000600060000000}, {0x77d, 0x2000200020000000}, {0x76f, 0xe000e0000000}, {0x76e, 0x600060000000}, {0x76d, 0x200020000000}, {0x75f, 0xe0000000}, {0x75e, 0x60000000}, {0x75d, 0x20000000}, {0x73f, 0xf000f000f0000000}, {0x73e, 0x7000700070000000}, {0x73d, 0x3000300030000000}, {0x73c, 0x1000100010000000}, {0x72f, 0xf000f0000000}, {0x72e, 0x700070000000}, {0x72d, 0x300030000000}, {0x72c, 0x100010000000}, {0x71f, 0xf0000000}, {0x71e, 0x70000000}, {0x71d, 0x30000000}, {0x71c, 0x10000000}, {0x6fb, 0x800080008000000}, {0x6eb, 0x80008000000}, {0x6db, 0x8000000}, {0x6bb, 0xc000c000c000000}, {0x6ba, 0x400040004000000}, {0x6ab, 0xc000c000000}, {0xaff, 0x8800880000000000}, {0x6aa, 0x40004000000}, {0x69b, 0xc000000}, {0xaef, 0x880000000000}, {0x69a, 0x4000000}, {0x67b, 0xe000e000e000000}, {0x67a, 0x600060006000000}, {0x679, 0x200020002000000}, {0x66b, 0xe000e000000}, {0xabf, 0xcc00cc0000000000}, {0x66a, 0x60006000000}, {0xabe, 0x4400440000000000}, {0x669, 0x20002000000}, {0x65b, 0xe000000}, {0xaaf, 0xcc0000000000}, {0x65a, 0x6000000}, {0xaae, 0x440000000000}, {0x659, 0x2000000}, {0x63f, 0xff00ff00ff000000}, {0x63e, 0x7700770077000000}, {0x63d, 0x3300330033000000}, {0x63b, 0xf000f000f000000}, {0x63a, 0x700070007000000}, {0x639, 0x300030003000000}, {0x638, 0x100010001000000}, {0x62f, 0xff00ff000000}, {0x62e, 0x770077000000}, {0x62d, 0x330033000000}, {0x62b, 0xf000f000000}, {0xa7f, 0xee00ee0000000000}, {0x62a, 0x70007000000}, {0xa7e, 0x6600660000000000}, {0x629, 0x30003000000}, {0xa7d, 0x2200220000000000}, {0x628, 0x10001000000}, {0x61f, 0xff000000}, {0x61e, 0x77000000}, {0x61d, 0x33000000}, {0x61b, 0xf000000}, {0xa6f, 0xee0000000000}, {0x61a, 0x7000000}, {0xa6e, 0x660000000000}, {0x619, 0x3000000}, {0xa6d, 0x220000000000}, {0x618, 0x1000000}, {0x5f7, 0x80008000800000}, {0xa3c, 0x1100110000000000}, {0x5e7, 0x8000800000}, {0xa2c, 0x110000000000}, {0x5d7, 0x800000}, {0x5b7, 0xc000c000c00000}, {0x5b6, 0x40004000400000}, {0x5a7, 0xc000c00000}, {0x9fb, 0x880088000000000}, {0x5a6, 0x4000400000}, {0x597, 0xc00000}, {0x9eb, 0x88000000000}, {0x596, 0x400000}, {0x577, 0xe000e000e00000}, {0x576, 0x60006000600000}, {0x575, 0x20002000200000}, {0x567, 0xe000e00000}, {0x9bb, 0xcc00cc000000000}, {0x566, 0x6000600000}, {0x9ba, 0x440044000000000}, {0x565, 0x2000200000}, {0x557, 0xe00000}, {0x9ab, 0xcc000000000}, {0x556, 0x600000}, {0xdff, 0x8880000000000000}, {0x9aa, 0x44000000000}, {0x555, 0x200000}, {0x53f, 0xfff0fff0fff00000}, {0x53e, 0x7770777077700000}, {0x53d, 0x3330333033300000}, {0x53b, 0xff00ff00ff00000}, {0x53a, 0x770077007700000}, {0x539, 0x330033003300000}, {0x537, 0xf000f000f00000}, {0x536, 0x70007000700000}, {0x535, 0x30003000300000}, {0x52f, 0xfff0fff00000}, {0x52e, 0x777077700000}, {0x52d, 0x333033300000}, {0x5fb, 0x880088008800000}, {0x1a6, 0x4000400040}, {0x19e, 0x44404440}, {0x5ef, 0x888088800000}, {0x19a, 0x4400440}, {0x5eb, 0x88008800000}, {0x196, 0x400040}, {0xa38, 0x100010000000000}, {0x18e, 0x4440}, {0x5df, 0x88800000}, {0x18a, 0x440}, {0x5db, 0x8800000}, {0x186, 0x40}, {0x17d, 0x2220222022202220}, {0x179, 0x220022002200220}, {0x175, 0x20002000200020}, {0x16d, 0x222022202220}, {0x5be, 0x4440444044400000}, {0x169, 0x22002200220}, {0x5ba, 0x440044004400000}, {0x165, 0x2000200020}, {0x15d, 0x22202220}, {0x5ae, 0x444044400000}, {0x159, 0x2200220}, {0x9ff, 0x8880888000000000}, {0x5aa, 0x44004400000}, {0x155, 0x200020}, {0x9f7, 0x80008000000000}, {0x14d, 0x2220}, {0x59e, 0x44400000}, {0x149, 0x220}, {0x9ef, 0x888000000000}, {0x59a, 0x4400000}, {0x145, 0x20}, {0xff, 0x8888888888888888}, {0x31c, 0x10001000}, {0xfb, 0x888088808880888}, {0xf7, 0x88008800880088}, {0xf3, 0x8000800080008}, {0xef, 0x888888888888}, {0x30c, 0x1000}, {0x97e, 0x6660666000000000}, {0x529, 0x33003300000}, {0xeb, 0x88808880888}, {0x97a, 0x660066000000000}, {0x525, 0x3000300000}, {0x53c, 0x1110111011100000}, {0xe7, 0x8800880088}, {0x538, 0x110011001100000}, {0xe3, 0x800080008}, {0x51d, 0x33300000}, {0x534, 0x10001000100000}, {0xdf, 0x88888888}, {0x96e, 0x666000000000}, {0x519, 0x3300000}, {0xdb, 0x8880888}, {0xdbf, 0xccc0000000000000}, {0x96a, 0x66000000000}, {0x515, 0x300000}, {0x975, 0x20002000000000}, {0xcb, 0x888}, {0xbe, 0x4444444444444444}, {0x2db, 0x8000800}, {0xdba, 0x440000000000000}, {0x965, 0x2000000000}, {0xbb, 0xccc0ccc0ccc0ccc}, {0xba, 0x444044404440444}, {0xdb6, 0x40000000000000}, {0xb7, 0xcc00cc00cc00cc}, {0xb6, 0x44004400440044}, {0xb3, 0xc000c000c000c}, {0xb2, 0x4000400040004}, {0x2cf, 0x8800}, {0xaf, 0xcccccccccccc}, {0xae, 0x444444444444}, {0x2cb, 0x800}, {0xab, 0xccc0ccc0ccc}, {0xa7, 0xcc00cc00cc}, {0xa3, 0xc000c000c}, {0xfbe, 0x4000000000000000}, {0x2bf, 0xcc00cc00cc00cc00}, {0x9f, 0xcccccccc}, {0xe3a, 0x700000000000000}, {0x13b, 0xff00ff00ff00ff0}, {0xd39, 0x330000000000000}, {0x3a, 0x777077707770777}, {0xe39, 0x300000000000000}, {0x13a, 0x770077007700770}, {0xd38, 0x110000000000000}, {0x8e3, 0x800000000}, {0x39, 0x333033303330333}, {0xe38, 0x100000000000000}, {0x139, 0x330033003300330}, {0xd37, 0xf0000000000000}, {0x38, 0x111011101110111}, {0x138, 0x110011001100110}, {0xd36, 0x70000000000000}, {0x37, 0xff00ff00ff00ff}, {0x137, 0xf000f000f000f0}, {0xd35, 0x30000000000000}, {0x36, 0x77007700770077}, {0x136, 0x70007000700070}, {0xd34, 0x10000000000000}, {0x35, 0x33003300330033}, {0x135, 0x30003000300030}, {0x34, 0x11001100110011}, {0x134, 0x10001000100010}, {0x33, 0xf000f000f000f}, {0x32, 0x7000700070007}, {0x24f, 0xee00}, {0x31, 0x3000300030003}, {0x24e, 0x6600}, {0x30, 0x1000100010001}, {0x24d, 0x2200}, {0x2f, 0xffffffffffff}, {0x12f, 0xfff0fff0fff0}, {0x2e, 0x777777777777}, {0x24b, 0xe00}, {0x12e, 0x777077707770}, {0x2d, 0x333333333333}, {0x69f, 0xcc000000}, {0x24a, 0x600}, {0x12d, 0x333033303330}, {0x2c, 0x111111111111}, {0x69e, 0x44000000}, {0x249, 0x200}, {0x12c, 0x111011101110}, {0x2b, 0xfff0fff0fff}, {0x12b, 0xff00ff00ff0}, {0x57f, 0xeee0eee0eee00000}, {0x12a, 0x77007700770}, {0x57e, 0x6660666066600000}, {0x129, 0x33003300330}, {0x57d, 0x2220222022200000}, {0x128, 0x11001100110}, {0x27, 0xff00ff00ff}, {0x127, 0xf000f000f0}, {0x57b, 0xee00ee00ee00000}, {0x126, 0x7000700070}, {0x57a, 0x660066006600000}, {0x125, 0x3000300030}, {0x579, 0x220022002200000}, {0x124, 0x1000100010}, {0x23, 0xf000f000f}, {0xf3e, 0x7000000000000000}, {0x23f, 0xff00ff00ff00ff00}, {0xf3d, 0x3000000000000000}, {0x23e, 0x7700770077007700}, {0xf3c, 0x1000000000000000}, {0x23d, 0x3300330033003300}, {0x1f, 0xffffffff}, {0x23c, 0x1100110011001100}, {0x19f, 0xccc0ccc0}, {0x2bb, 0xc000c000c000c00}, {0x11f, 0xfff0fff0}, {0x33c, 0x1000100010001000}, {0x473, 0xe000e000e0000}, {0x1e, 0x77777777}, {0x23b, 0xf000f000f000f00}, {0x11e, 0x77707770}, {0x472, 0x6000600060000}, {0x1d, 0x33333333}, {0x23a, 0x700070007000700}, {0x9b7, 0xc000c000000000}, {0x10d, 0x3330}, {0x8b6, 0x44004400000000}, {0x461, 0x200020000}, {0xc, 0x1111}, {0x67e, 0x6600660066000000}, {0x229, 0x30003000300}, {0x935, 0x30003000000000}, {0x8b, 0xccc}, {0x9b6, 0x40004000000000}, {0x10c, 0x1110}, {0xb, 0xfff}, {0x67d, 0x2200220022000000}, {0x228, 0x10001000100}, {0x18b, 0xcc0}, {0x10b, 0xff0}, {0x45f, 0xeeee0000}, {0xa, 0x777}, {0x55f, 0xeee00000}, {0x10a, 0x770}, {0x8b3, 0xc000c00000000}, {0x45e, 0x66660000}, {0x9, 0x333}, {0x55e, 0x66600000}, {0x109, 0x330}, {0x8b2, 0x4000400000000}, {0x45d, 0x22220000}, {0x8, 0x111}, {0x87, 0xcc}, {0x55d, 0x22200000}, {0x108, 0x110}, {0x7, 0xff}, {0x187, 0xc0}, {0x107, 0xf0}, {0x45b, 0xeee0000}, {0x6, 0x77}, {0x55b, 0xee00000}, {0x106, 0x70}, {0x8af, 0xcccc00000000}, {0x45a, 0x6660000}, {0x5, 0x33}, {0x43f, 0xffffffffffff0000}, {0x9af, 0xccc000000000}, {0x55a, 0x6600000}, {0x105, 0x30}, {0x8ae, 0x444400000000}, {0x459, 0x2220000}, {0x4, 0x11}, {0x43e, 0x7777777777770000}, {0x92d, 0x333000000000}, {0x83, 0xc}, {0x9ae, 0x444000000000}, {0x559, 0x2200000}, {0x104, 0x10}, {0x3, 0xf}, {0x43d, 0x3333333333330000}, {0x29f, 0xcc00cc00}, {0x457, 0xee0000}, {0x2, 0x7}, {0x21f, 0xff00ff00}, {0x43c, 0x1111111111110000}, {0x21e, 0x77007700}, {0x43b, 0xfff0fff0fff0000}, {0x21d, 0x33003300}, {0x43a, 0x777077707770000}, {0xd7e, 0x6660000000000000}, {0x929, 0x33000000000}, {0x7f, 0xeeeeeeeeeeeeeeee}, {0x10e, 0x7770}, {0x8b7, 0xcc00cc00000000}, {0x462, 0x600060000}, {0xd, 0x3333}, {0x67f, 0xee00ee00ee000000}, {0x22a, 0x70007000700}, {0x10f, 0xfff0}, {0x32c, 0x100010001000}, {0x463, 0xe000e0000}, {0xe, 0x7777}, {0x22b, 0xf000f000f00}, {0xf, 0xffff}, {0x22c, 0x110011001100}, {0xa39, 0x300030000000000}, {0x18f, 0xccc0}, {0x2ab, 0xc000c000c00}, {0x8ba, 0x444044400000000}, {0x465, 0x2200220000}, {0x10, 0x10001}, {0x22d, 0x330033003300}, {0x939, 0x330033000000000}, {0x8f, 0xcccc}, {0x8bb, 0xccc0ccc00000000}, {0x466, 0x6600660000}, {0x11, 0x30003}, {0x22e, 0x770077007700}, {0x467, 0xee00ee0000}, {0x12, 0x70007}, {0x22f, 0xff00ff00ff00}, {0x9be, 0x4440444000000000}, {0x569, 0x22002200000}, {0x114, 0x100010}, {0x13, 0xf000f}, {0x2af, 0xcc00cc00cc00}, {0x9bf, 0xccc0ccc000000000}, {0x56a, 0x66006600000}, {0x115, 0x300030}, {0x8be, 0x4444444400000000}, {0x469, 0x22202220000}, {0x14, 0x110011}, {0x93d, 0x3330333000000000}, {0x93, 0xc000c}, {0x56b, 0xee00ee00000}, {0x116, 0x700070}, {0x8bf, 0xcccccccc00000000}, {0x46a, 0x66606660000}, {0x15, 0x330033}, {0x117, 0xf000f0}, {0x46b, 0xeee0eee0000}, {0x16, 0x770077}, {0x56d, 0x222022200000}, {0x118, 0x1100110}, {0x17, 0xff00ff}, {0xcfb, 0x888000000000000}, {0x8a6, 0x4400000000}, {0x451, 0x20000}, {0x197, 0xc000c0}, {0x56e, 0x666066600000}, {0x119, 0x3300330}, {0x46d, 0x222222220000}, {0x18, 0x1110111}, {0x8a7, 0xcc00000000}, {0x452, 0x60000}, {0x97, 0xcc00cc}, {0x56f, 0xeee0eee00000}, {0x11a, 0x7700770}, {0x46e, 0x666666660000}, {0x19, 0x3330333}, {0x453, 0xe0000}, {0x11b, 0xff00ff0}, {0x46f, 0xeeeeeeee0000}, {0x1a, 0x7770777}, {0x11c, 0x11101110}, {0x1b, 0xfff0fff}, {0x238, 0x100010001000100}, {0xcff, 0x8888000000000000}, {0x8aa, 0x44400000000}, {0x0, 0x1}, {0x455, 0x220000}, {0x19b, 0xcc00cc0}, {0x11d, 0x33303330}, {0x471, 0x2000200020000}, {0x1c, 0x11111111}, {0x239, 0x300030003000300}, {0x8ab, 0xccc00000000}, {0x1, 0x3}, {0x456, 0x660000}, {0x9b, 0xccc0ccc}, {0xe3b, 0xf00000000000000}, {0x13c, 0x1110111011101110}, {0xd3a, 0x770000000000000}, {0x3b, 0xfff0fff0fff0fff}, {0x20, 0x100010001}, {0x475, 0x22002200220000}, {0xe3c, 0x1100000000000000}, {0x9e7, 0x8000000000}, {0x13d, 0x3330333033303330}, {0xd3b, 0xff0000000000000}, {0x3c, 0x1111111111111111}, {0x6ae, 0x440044000000}, {0x259, 0x2000200}, {0x21, 0x300030003}, {0x476, 0x66006600660000}, {0xe3d, 0x3300000000000000}, {0x13e, 0x7770777077707770}, {0x6af, 0xcc00cc000000}, {0x25a, 0x6000600}, {0x22, 0x700070007}, {0x477, 0xee00ee00ee0000}, {0xe3e, 0x7700000000000000}, {0x13f, 0xfff0fff0fff0fff0}, {0x25b, 0xe000e00}, {0xd3e, 0x7770000000000000}, {0x3f, 0xffffffffffffffff}, {0x24, 0x1100110011}, {0x479, 0x222022202220000}, {0x25e, 0x66006600}, {0x26, 0x7700770077}, {0x47b, 0xeee0eee0eee0000}, {0x25f, 0xee00ee00}, {0x43, 0xe}, {0x28, 0x11101110111}, {0x47d, 0x2222222222220000}, {0x59b, 0xcc00000}, {0x146, 0x60}, {0x2a, 0x77707770777}, {0x47f, 0xeeeeeeeeeeee0000}, {0x147, 0xe0}, {0x47, 0xee}, {0x59f, 0xccc00000}, {0x14a, 0x660}, {0x14b, 0xee0}, {0x4b, 0xeee}, {0x14e, 0x6660}, {0x6bf, 0xcc00cc00cc000000}, {0x26a, 0x60006000600}, {0x14f, 0xeee0}, {0x26b, 0xe000e000e00}, {0x4f, 0xeeee}, {0x26e, 0x660066006600}, {0x26f, 0xee00ee00ee00}, {0x53, 0xe000e}, {0x5ab, 0xcc00cc00000}, {0x156, 0x600060}, {0x157, 0xe000e0}, {0x57, 0xee00ee}, {0x5af, 0xccc0ccc00000}, {0x15a, 0x6600660}, {0xd3d, 0x3330000000000000}, {0x3e, 0x7777777777777777}, {0x493, 0xc0000}, {0x15b, 0xee00ee0}, {0x5b, 0xeee0eee}, {0x15e, 0x66606660}, {0x27a, 0x600060006000600}, {0x42, 0x6}, {0x497, 0xcc0000}, {0x15f, 0xeee0eee0}, {0x27b, 0xe000e000e000e00}, {0x5f, 0xeeeeeeee}, {0xf7d, 0x2000000000000000}, {0x27e, 0x6600660066006600}, {0x46, 0x66}, {0x49b, 0xccc0000}, {0xf7e, 0x6000000000000000}, {0x27f, 0xee00ee00ee00ee00}, {0x63, 0xe000e000e}, {0x5bb, 0xcc00cc00cc00000}, {0x166, 0x6000600060}, {0x4a, 0x666}, {0x49f, 0xcccc0000}, {0x167, 0xe000e000e0}, {0x67, 0xee00ee00ee}, {0x5bf, 0xccc0ccc0ccc00000}, {0x16a, 0x66006600660}, {0x4e, 0x6666}, {0x4a3, 0xc000c0000}, {0x16b, 0xee00ee00ee0}, {0x6b, 0xeee0eee0eee}, {0x16e, 0x666066606660}, {0x6d, 0x222222222222}, {0x6df, 0x88000000}, {0x28a, 0x400}, {0x52, 0x60006}, {0x4a7, 0xcc00cc0000}, {0x16f, 0xeee0eee0eee0}, {0x6e, 0x666666666666}, {0x28b, 0xc00}, {0x6f, 0xeeeeeeeeeeee}, {0x71, 0x2000200020002}, {0x28e, 0x4400}, {0x56, 0x660066}, {0x4ab, 0xccc0ccc0000}, {0x72, 0x6000600060006}, {0x28f, 0xcc00}, {0x73, 0xe000e000e000e}, {0x176, 0x60006000600060}, {0x75, 0x22002200220022}, {0x5a, 0x6660666}, {0x4af, 0xcccccccc0000}, {0x177, 0xe000e000e000e0}, {0xd75, 0x20000000000000}, {0x76, 0x66006600660066}, {0xd76, 0x60000000000000}, {0x77, 0xee00ee00ee00ee}, {0xe79, 0x200000000000000}, {0x17a, 0x660066006600660}, {0x79, 0x222022202220222}, {0x5e, 0x66666666}, {0x4b3, 0xc000c000c0000}, {0xe7a, 0x600000000000000}, {0x17b, 0xee00ee00ee00ee0}, {0xd79, 0x220000000000000}, {0x924, 0x1000000000}, {0x7a, 0x666066606660666}, {0xd7a, 0x660000000000000}, {0x925, 0x3000000000}, {0x7b, 0xeee0eee0eee0eee}, {0xe7d, 0x2200000000000000}, {0xa28, 0x10000000000}, {0x17e, 0x6660666066606660}, {0x927, 0xf000000000}, {0x7d, 0x2222222222222222}, {0x6ef, 0x880088000000}, {0x29a, 0x4000400}, {0x62, 0x600060006}, {0x4b7, 0xcc00cc00cc0000}, {0xe7e, 0x6600000000000000}, {0xa29, 0x30000000000}, {0x17f, 0xeee0eee0eee0eee0}, {0x29b, 0xc000c00}, {0x1a7, 0xc000c000c0}, {0x5ff, 0x8880888088800000}, {0x1aa, 0x44004400440}, {0x1ab, 0xcc00cc00cc0}, {0x1ae, 0x444044404440}, {0x1af, 0xccc0ccc0ccc0}, {0x1b6, 0x40004000400040}, {0x1b7, 0xc000c000c000c0}, {0x1ba, 0x440044004400440}, {0xeba, 0x400000000000000}, {0x1bb, 0xcc00cc00cc00cc0}, {0x1be, 0x4440444044404440}, {0xebe, 0x4400000000000000}, {0xa69, 0x20000000000}, {0x1bf, 0xccc0ccc0ccc0ccc0}, {0x61c, 0x11000000}, {0x1c7, 0x80}, {0x1cb, 0x880}, {0xa79, 0x200020000000000}, {0x1cf, 0x8880}, {0x62c, 0x110011000000}, {0x1d7, 0x800080}, {0x1db, 0x8800880}, {0x1df, 0x88808880}, {0x63c, 0x1100110011000000}, {0x1e7, 0x8000800080}, {0x1eb, 0x88008800880}, {0x1ef, 0x888088808880}, {0x1f7, 0x80008000800080}, {0xcbe, 0x4444000000000000}, {0x869, 0x22200000000}, {0x414, 0x110000}, {0x1fb, 0x880088008800880}, {0x86d, 0x222200000000}, {0x418, 0x1110000}, {0x1ff, 0x8880888088808880}, {0x871, 0x2000200000000}, {0x41c, 0x11110000}, {0x65d, 0x22000000}, {0x208, 0x100}, {0x87a, 0x666066600000000}, {0x425, 0x3300330000}, {0x65e, 0x66000000}, {0x209, 0x300}, {0x87b, 0xeee0eee00000000}, {0x426, 0x7700770000}, {0x65f, 0xee000000}, {0x20a, 0x700}, {0x427, 0xff00ff0000}, {0x20b, 0xf00}, {0x87d, 0x2222222200000000}, {0x428, 0x11101110000}, {0x20c, 0x1100}, {0x87e, 0x6666666600000000}, {0x429, 0x33303330000}, {0x20d, 0x3300}, {0x87f, 0xeeeeeeee00000000}, {0x42a, 0x77707770000}, {0x20e, 0x7700}, {0x42b, 0xfff0fff0000}, {0x20f, 0xff00}, {0x42c, 0x111111110000}, {0x66d, 0x220022000000}, {0x218, 0x1000100}, {0x435, 0x33003300330000}, {0x66e, 0x660066000000}, {0x219, 0x3000300}, {0x436, 0x77007700770000}, {0x66f, 0xee00ee000000}, {0x21a, 0x7000700}, {0x437, 0xff00ff00ff0000}, {0x21b, 0xf000f00}, {0x438, 0x111011101110000}, {0x21c, 0x11001100}, {0x439, 0x333033303330000}, {0x25d, 0x22002200}, {0x25, 0x3300330033}, {0x47a, 0x666066606660000}, {0x6be, 0x4400440044000000}, {0x269, 0x20002000200}, {0x26d, 0x220022002200}, {0x279, 0x200020002000200}, {0x8eb, 0x88800000000}, {0x41, 0x2}, {0x496, 0x440000}, {0x27d, 0x2200220022002200}, {0x8ef, 0x888800000000}, {0x45, 0x22}, {0x49a, 0x4440000}, {0x29e, 0x44004400}, {0x66, 0x6600660066}, {0x4bb, 0xccc0ccc0ccc0000}, {0x6ff, 0x8800880088000000}, {0x2aa, 0x40004000400}, {0x2ae, 0x440044004400}, {0x2ba, 0x400040004000400}, {0x92c, 0x111000000000}, {0x82, 0x4}, {0x4d7, 0x880000}, {0x2be, 0x4400440044004400}, {0x86, 0x44}, {0x4db, 0x8880000}, {0x2df, 0x88008800}, {0x2eb, 0x80008000800}, {0x2ef, 0x880088008800}, {0x2fb, 0x800080008000800}, {0x96d, 0x222000000000}, {0xc3, 0x8}, {0x518, 0x1100000}, {0x2ff, 0x8800880088008800}, {0xc7, 0x88}, {0x51c, 0x11100000}, {0x30d, 0x3000}, {0x97f, 0xeee0eee000000000}, {0x52a, 0x77007700000}, {0x30e, 0x7000}, {0x52b, 0xff00ff00000}, {0x30f, 0xf000}, {0xd7, 0x880088}, {0x52c, 0x111011100000}, {0x31d, 0x30003000}, {0x31e, 0x70007000}, {0x31f, 0xf000f000}, {0x32d, 0x300030003000}, {0x32e, 0x700070007000}, {0x32f, 0xf000f000f000}, {0x33d, 0x3000300030003000}, {0x33e, 0x7000700070007000}, {0x33f, 0xf000f000f000f000}, {0x34d, 0x2000}, {0x34e, 0x6000}, {0x34f, 0xe000}, {0x35d, 0x20002000}, {0x35e, 0x60006000}, {0x35f, 0xe000e000}, {0x36d, 0x200020002000}, {0x36e, 0x600060006000}, {0x36f, 0xe000e000e000}, {0x37d, 0x2000200020002000}, {0x37e, 0x6000600060006000}, {0x37f, 0xe000e000e000e000}, {0xc38, 0x111000000000000}, {0x38e, 0x4000}, {0xc39, 0x333000000000000}, {0x38f, 0xc000}, {0x39e, 0x40004000}, {0x39f, 0xc000c000}, {0x3ae, 0x400040004000}, {0x3af, 0xc000c000c000}, {0x3be, 0x4000400040004000}, {0x3bf, 0xc000c000c000c000}, {0xc79, 0x222000000000000}, {0x824, 0x1100000000}, {0x3cf, 0x8000}, {0x834, 0x11001100000000}, {0x3df, 0x80008000}, {0x3ef, 0x800080008000}, {0x3ff, 0x8000800080008000}, {0xcba, 0x444000000000000}, {0x865, 0x2200000000}, {0x410, 0x10000}, {0xcbb, 0xccc000000000000}, {0x866, 0x6600000000}, {0x411, 0x30000}, {0x867, 0xee00000000}, {0x412, 0x70000}, {0x413, 0xf0000}, {0xcbf, 0xcccc000000000000}, {0x86a, 0x66600000000}, {0x415, 0x330000}, {0x86b, 0xeee00000000}, {0x416, 0x770000}, {0x417, 0xff0000}, {0x86e, 0x666600000000}, {0x419, 0x3330000}, {0x86f, 0xeeee00000000}, {0x41a, 0x7770000}, {0x41b, 0xfff0000}, {0x872, 0x6000600000000}, {0x41d, 0x33330000}, {0x873, 0xe000e00000000}, {0x41e, 0x77770000}, {0x41f, 0xffff0000}, {0x875, 0x22002200000000}, {0x420, 0x100010000}, {0x876, 0x66006600000000}, {0x421, 0x300030000}, {0x877, 0xee00ee00000000}, {0x422, 0x700070000}, {0x423, 0xf000f0000}, {0x879, 0x222022200000000}, {0x424, 0x1100110000}, {0x42d, 0x333333330000}, {0x42e, 0x777777770000}, {0x42f, 0xffffffff0000}, {0x430, 0x1000100010000}, {0x431, 0x3000300030000}, {0x432, 0x7000700070000}, {0x433, 0xf000f000f0000}, {0x434, 0x11001100110000}, {0x29, 0x33303330333}, {0x47e, 0x6666666666660000}, {0xd3c, 0x1110000000000000}, {0x8e7, 0x8800000000}, {0x3d, 0x3333333333333333}, {0x492, 0x40000}, {0x8f3, 0x8000800000000}, {0x49, 0x222}, {0x49e, 0x44440000}, {0x8f7, 0x88008800000000}, {0x4d, 0x2222}, {0x4a2, 0x400040000}, {0x8fb, 0x888088800000000}, {0x51, 0x20002}, {0x4a6, 0x4400440000}, {0x8ff, 0x8888888800000000}, {0x55, 0x220022}, {0x4aa, 0x44404440000}, {0x59, 0x2220222}, {0x4ae, 0x444444440000}, {0x5d, 0x22222222}, {0x4b2, 0x4000400040000}, {0x61, 0x200020002}, {0x4b6, 0x44004400440000}, {0x65, 0x2200220022}, {0x4ba, 0x444044404440000}, {0x69, 0x22202220222}, {0x4be, 0x4444444444440000}, {0x6a, 0x66606660666}, {0x4bf, 0xcccccccccccc0000}, {0xd7d, 0x2220000000000000}, {0x928, 0x11000000000}, {0x7e, 0x6666666666666666}, {0x4d3, 0x80000}, {0x934, 0x10001000000000}, {0x8a, 0x444}, {0x4df, 0x88880000}, {0x938, 0x110011000000000}, {0x8e, 0x4444}, {0x4e3, 0x800080000}, {0x93c, 0x1110111000000000}, {0x92, 0x40004}, {0x4e7, 0x8800880000}, {0x96, 0x440044}, {0x4eb, 0x88808880000}, {0x9a, 0x4440444}, {0x4ef, 0x888888880000}, {0x9e, 0x44444444}, {0x4f3, 0x8000800080000}, {0xa2, 0x400040004}, {0x4f7, 0x88008800880000}, {0xa6, 0x4400440044}, {0x4fb, 0x888088808880000}, {0xaa, 0x44404440444}, {0x4ff, 0x8888888888880000}, {0xdbe, 0x4440000000000000}, {0x969, 0x22000000000}, {0xbf, 0xcccccccccccccccc}, {0x514, 0x100000}, {0x96b, 0xee000000000}, {0x516, 0x700000}, {0x517, 0xf00000}, {0x96f, 0xeee000000000}, {0x51a, 0x7700000}, {0x51b, 0xff00000}, {0x51e, 0x77700000}, {0x51f, 0xfff00000}, {0x979, 0x220022000000000}, {0xcf, 0x8888}, {0x524, 0x1000100000}, {0x97b, 0xee00ee000000000}, {0x526, 0x7000700000}, {0x527, 0xf000f00000}, {0x97d, 0x2220222000000000}, {0xd3, 0x80008}, {0x528, 0x11001100000}

};

void VWBVHAggregate::hierarchicalMask(LinearVWBVHNode* pNode, int cOffset, int depth){
    if(depth != 0 && nodes[cOffset].nPrimitives == 0){
        // interior node
        hierarchicalMask(pNode, cOffset + 1, depth - 1);
        hierarchicalMask(pNode, nodes[cOffset].secondChildOffset, depth - 1);
    }
    else{
        // Aciheve limit node.
        uint64_t cmask = nodes[cOffset].mask;
        Bounds3f &pBounds = pNode->bounds;
        Bounds3f &cBounds = nodes[cOffset].bounds;
        Vector3f cStep = (cBounds.pMax - cBounds.pMin) / 4.0f;
        Vector3f pStep = (pBounds.pMax - pBounds.pMin) / 4.0f;
        Vector3f cOffset[5];
        for(int i=0; i<5; ++i){
            cOffset[i] = pBounds.Offset(cBounds.pMin + i * cStep);
        }
        

        for(uint32_t key = 0; key < 64; ++key){
            if((cmask & (1UL << key)) == 0)
                continue;
            Point3i vIndex((key >>  4) & 0b11, (key >>  2) & 0b11, (key >>  0) & 0b11);
            Vector3i s(cOffset[vIndex.x].x, cOffset[vIndex.y].y, cOffset[vIndex.z].z);
            Vector3i e(cOffset[vIndex.x + 1].x, cOffset[vIndex.y + 1].y, cOffset[vIndex.z + 1].z);
            s.x = std::clamp(s.x, 0, 3);
            s.y = std::clamp(s.y, 0, 3);
            s.z = std::clamp(s.z, 0, 3);
            e.x = std::clamp(e.x, 0, 3);
            e.y = std::clamp(e.y, 0, 3);
            e.z = std::clamp(e.z, 0, 3);
            uint16_t se = s.x << 10 | s.y << 8 | s.z << 6 | e.x << 4 | e.y << 2 | e.z;
            pNode->mask |= filling_lut[se];
        }
    }
};

std::unordered_map<uint16_t, uint64_t> VWBVHAggregate::raymask_lut = {
    {0xfff, 0x8000000000000000}, {0xffe, 0xc000000000000000}, {0xffd, 0xe000000000000000}, {0xffc, 0xf000000000000000}, {0xffb, 0x8800000000000000}, {0xffa, 0xcc00000000000000}, {0xff9, 0xee00000000000000}, {0xff8, 0xff00000000000000}, {0xff7, 0x8880000000000000}, {0xff6, 0xccc0000000000000}, {0xff5, 0xce60000000000000}, {0xff4, 0xef70000000000000}, {0xff3, 0x8888000000000000}, {0xff2, 0xcccc000000000000}, {0xff1, 0xcee6000000000000}, {0xff0, 0xce73000000000000}, {0xfef, 0x8000800000000000}, {0xfee, 0xc000c00000000000}, {0xfed, 0xe000e00000000000}, {0xfec, 0xf000f00000000000}, {0xfeb, 0x8800880000000000}, {0xfea, 0xcc00cc0000000000}, {0xfe9, 0xee00ee0000000000}, {0xfe8, 0xff00ff0000000000}, {0xfe7, 0x8880888000000000}, {0xfe6, 0xccc0ccc000000000}, {0xfe5, 0xce60ce6000000000}, {0xfe4, 0xef70ef7000000000}, {0xfe3, 0x8888888800000000}, {0xfe2, 0xcccccccc00000000}, {0xfe1, 0xcee6cee600000000}, {0xfe0, 0xce73ce7300000000}, {0xfdf, 0x8000800080000000}, {0xfde, 0xc000c000c0000000}, {0xfdd, 0xc000e00060000000}, {0xfdc, 0xe000f00070000000}, {0xfdb, 0x8800880088000000}, {0xfda, 0xcc00cc00cc000000}, {0xfd9, 0xcc00ee0066000000}, {0xfd8, 0xee00ff0077000000}, {0xfd7, 0x8800888008800000}, {0xfd6, 0xcc00ccc00cc00000}, {0xfd5, 0xcc00ce6006600000}, {0xfd4, 0xee00ef7007700000}, {0xfd3, 0x8880888808880000}, {0xfd2, 0xccc0cccc0ccc0000}, {0xfd1, 0xccc0cee606660000}, {0xfd0, 0xce60ce7306730000}, {0xfcf, 0x8000800080008000}, {0xfce, 0xc000c000c000c000}, {0xfcd, 0xc000e000e0006000}, {0xfcc, 0xc000e00070003000}, {0xfcb, 0x8800880088008800}, {0xfca, 0xcc00cc00cc00cc00}, {0xfc9, 0xcc00ee00ee006600}, {0xfc8, 0xcc00ee0077003300}, {0xfc7, 0x8800888088800880}, {0xfc6, 0xcc00ccc0ccc00cc0}, {0xfc5, 0xcc00ce60ce600660}, {0xfc4, 0xcc00ee6067700330}, {0xfc3, 0x8800888008880088}, {0xfc2, 0xcc00ccc00ccc00cc}, {0xfc1, 0xcc00cee00ee60066}, {0xfc0, 0xcc00ce6006730033}, {0xfbf, 0xc000000000000000}, {0xfbe, 0x4000000000000000}, {0xfbd, 0x6000000000000000}, {0xfbc, 0x7000000000000000}, {0xfbb, 0xcc00000000000000}, {0xfba, 0x4400000000000000}, {0xfb9, 0x6600000000000000}, {0xfb8, 0x7700000000000000}, {0xfb7, 0xccc0000000000000}, {0xfb6, 0x4440000000000000}, {0xfb5, 0x6660000000000000}, {0xfb4, 0x6730000000000000}, {0xfb3, 0xcccc000000000000}, {0xfb2, 0x4444000000000000}, {0xfb1, 0x6666000000000000}, {0xfb0, 0x6773000000000000}, {0xfaf, 0xc000c00000000000}, {0xfae, 0x4000400000000000}, {0xfad, 0x6000600000000000}, {0xfac, 0x7000700000000000}, {0xfab, 0xcc00cc0000000000}, {0xfaa, 0x4400440000000000}, {0xfa9, 0x6600660000000000}, {0xfa8, 0x7700770000000000}, {0xfa7, 0xccc0ccc000000000}, {0xfa6, 0x4440444000000000}, {0xfa5, 0x6660666000000000}, {0xfa4, 0x6730673000000000}, {0xfa3, 0xcccccccc00000000}, {0xfa2, 0x4444444400000000}, {0xfa1, 0x6666666600000000}, {0xfa0, 0x6773677300000000}, {0xf9f, 0xc000c000c0000000}, {0xf9e, 0x4000400040000000}, {0xf9d, 0x6000600060000000}, {0xf9c, 0x6000700030000000}, {0xf9b, 0xcc00cc00cc000000}, {0xf9a, 0x4400440044000000}, {0xf99, 0x6600660066000000}, {0xf98, 0x6600770033000000}, {0xf97, 0xcc00ccc00cc00000}, {0xf96, 0x4400444004400000}, {0xf95, 0x6600666006600000}, {0xf94, 0x6600673003300000}, {0xf93, 0xccc0cccc0ccc0000}, {0xf92, 0x4440444404440000}, {0xf91, 0x6660666606660000}, {0xf90, 0x6660677303330000}, {0xf8f, 0xc000c000c000c000}, {0xf8e, 0x4000400040004000}, {0xf8d, 0x6000600060006000}, {0xf8c, 0x6000700070003000}, {0xf8b, 0xcc00cc00cc00cc00}, {0xf8a, 0x4400440044004400}, {0xf89, 0x6600660066006600}, {0xf88, 0x6600770077003300}, {0xf87, 0xcc00ccc0ccc00cc0}, {0xf86, 0x4400444044400440}, {0xf85, 0x6600666066600660}, {0xf84, 0x6600673067300330}, {0xf83, 0xcc00ccc00ccc00cc}, {0xf82, 0x4400444004440044}, {0xf81, 0x6600666006660066}, {0xf80, 0x6600677007730033}, {0xf7f, 0xe000000000000000}, {0xf7e, 0x6000000000000000}, {0xf7d, 0x2000000000000000}, {0xf7c, 0x3000000000000000}, {0xf7b, 0xee00000000000000}, {0xf7a, 0x6600000000000000}, {0xf79, 0x2200000000000000}, {0xf78, 0x3300000000000000}, {0xf77, 0x6ec0000000000000}, {0xf76, 0x6660000000000000}, {0xf75, 0x2220000000000000}, {0xf74, 0x3330000000000000}, {0xf73, 0x6eec000000000000}, {0xf72, 0x6666000000000000}, {0xf71, 0x2222000000000000}, {0xf70, 0x3333000000000000}, {0xf6f, 0xe000e00000000000}, {0xf6e, 0x6000600000000000}, {0xf6d, 0x2000200000000000}, {0xf6c, 0x3000300000000000}, {0xf6b, 0xee00ee0000000000}, {0xf6a, 0x6600660000000000}, {0xf69, 0x2200220000000000}, {0xf68, 0x3300330000000000}, {0xf67, 0x6ec06ec000000000}, {0xf66, 0x6660666000000000}, {0xf65, 0x2220222000000000}, {0xf64, 0x3330333000000000}, {0xf63, 0x6eec6eec00000000}, {0xf62, 0x6666666600000000}, {0xf61, 0x2222222200000000}, {0xf60, 0x3333333300000000}, {0xf5f, 0x6000e000c0000000}, {0xf5e, 0x6000600060000000}, {0xf5d, 0x2000200020000000}, {0xf5c, 0x3000300030000000}, {0xf5b, 0x6600ee00cc000000}, {0xf5a, 0x6600660066000000}, {0xf59, 0x2200220022000000}, {0xf58, 0x3300330033000000}, {0xf57, 0x66006ec00cc00000}, {0xf56, 0x6600666006600000}, {0xf55, 0x2200222002200000}, {0xf54, 0x3300333003300000}, {0xf53, 0x66606eec0ccc0000}, {0xf52, 0x6660666606660000}, {0xf51, 0x2220222202220000}, {0xf50, 0x3330333303330000}, {0xf4f, 0x6000e000e000c000}, {0xf4e, 0x6000600060006000}, {0xf4d, 0x2000200020002000}, {0xf4c, 0x3000300030003000}, {0xf4b, 0x6600ee00ee00cc00}, {0xf4a, 0x6600660066006600}, {0xf49, 0x2200220022002200}, {0xf48, 0x3300330033003300}, {0xf47, 0x66006ec06ec00cc0}, {0xf46, 0x6600666066600660}, {0xf45, 0x2200222022200220}, {0xf44, 0x3300333033300330}, {0xf43, 0x66006ee00eec00cc}, {0xf42, 0x6600666006660066}, {0xf41, 0x2200222002220022}, {0xf40, 0x3300333003330033}, {0xf3f, 0xf000000000000000}, {0xf3e, 0x7000000000000000}, {0xf3d, 0x3000000000000000}, {0xf3c, 0x1000000000000000}, {0xf3b, 0xff00000000000000}, {0xf3a, 0x7700000000000000}, {0xf39, 0x3300000000000000}, {0xf38, 0x1100000000000000}, {0xf37, 0x7fe0000000000000}, {0xf36, 0x3760000000000000}, {0xf35, 0x3330000000000000}, {0xf34, 0x1110000000000000}, {0xf33, 0x37ec000000000000}, {0xf32, 0x3776000000000000}, {0xf31, 0x3333000000000000}, {0xf30, 0x1111000000000000}, {0xf2f, 0xf000f00000000000}, {0xf2e, 0x7000700000000000}, {0xf2d, 0x3000300000000000}, {0xf2c, 0x1000100000000000}, {0xf2b, 0xff00ff0000000000}, {0xf2a, 0x7700770000000000}, {0xf29, 0x3300330000000000}, {0xf28, 0x1100110000000000}, {0xf27, 0x7fe07fe000000000}, {0xf26, 0x3760376000000000}, {0xf25, 0x3330333000000000}, {0xf24, 0x1110111000000000}, {0xf23, 0x37ec37ec00000000}, {0xf22, 0x3776377600000000}, {0xf21, 0x3333333300000000}, {0xf20, 0x1111111100000000}, {0xf1f, 0x7000f000e0000000}, {0xf1e, 0x3000700060000000}, {0xf1d, 0x3000300030000000}, {0xf1c, 0x1000100010000000}, {0xf1b, 0x7700ff00ee000000}, {0xf1a, 0x3300770066000000}, {0xf19, 0x3300330033000000}, {0xf18, 0x1100110011000000}, {0xf17, 0x77007fe00ee00000}, {0xf16, 0x3300376006600000}, {0xf15, 0x3300333003300000}, {0xf14, 0x1100111001100000}, {0xf13, 0x376037ec06ec0000}, {0xf12, 0x3330377606660000}, {0xf11, 0x3330333303330000}, {0xf10, 0x1110111101110000}, {0xf0f, 0x30007000e000c000}, {0xf0e, 0x3000700070006000}, {0xf0d, 0x3000300030003000}, {0xf0c, 0x1000100010001000}, {0xf0b, 0x33007700ee00cc00}, {0xf0a, 0x3300770077006600}, {0xf09, 0x3300330033003300}, {0xf08, 0x1100110011001100}, {0xf07, 0x330077606ee00cc0}, {0xf06, 0x3300376037600660}, {0xf05, 0x3300333033300330}, {0xf04, 0x1100111011100110}, {0xf03, 0x3300376006ec00cc}, {0xf02, 0x3300377007760066}, {0xf01, 0x3300333003330033}, {0xf00, 0x1100111001110011}, {0xeff, 0x8800000000000000}, {0xefe, 0xcc00000000000000}, {0xefd, 0xee00000000000000}, {0xefc, 0xff00000000000000}, {0xefb, 0x800000000000000}, {0xefa, 0xc00000000000000}, {0xef9, 0xe00000000000000}, {0xef8, 0xf00000000000000}, {0xef7, 0x880000000000000}, {0xef6, 0xcc0000000000000}, {0xef5, 0xee0000000000000}, {0xef4, 0xff0000000000000}, {0xef3, 0x888000000000000}, {0xef2, 0xccc000000000000}, {0xef1, 0xce6000000000000}, {0xef0, 0xef7000000000000}, {0xeef, 0x8800880000000000}, {0xeee, 0xcc00cc0000000000}, {0xeed, 0xee00ee0000000000}, {0xeec, 0xff00ff0000000000}, {0xeeb, 0x800080000000000}, {0xeea, 0xc000c0000000000}, {0xee9, 0xe000e0000000000}, {0xee8, 0xf000f0000000000}, {0xee7, 0x880088000000000}, {0xee6, 0xcc00cc000000000}, {0xee5, 0xee00ee000000000}, {0xee4, 0xff00ff000000000}, {0xee3, 0x888088800000000}, {0xee2, 0xccc0ccc00000000}, {0xee1, 0xce60ce600000000}, {0xee0, 0xef70ef700000000}, {0xedf, 0x8800880088000000}, {0xede, 0xcc00cc00cc000000}, {0xedd, 0xcc00ee0066000000}, {0xedc, 0xee00ff0077000000}, {0xedb, 0x800080008000000}, {0xeda, 0xc000c000c000000}, {0xed9, 0xc000e0006000000}, {0xed8, 0xe000f0007000000}, {0xed7, 0x880088008800000}, {0xed6, 0xcc00cc00cc00000}, {0xed5, 0xcc00ee006600000}, {0xed4, 0xee00ff007700000}, {0xed3, 0x880088800880000}, {0xed2, 0xcc00ccc00cc0000}, {0xed1, 0xcc00ce600660000}, {0xed0, 0xee00ef700770000}, {0xecf, 0x8800880088008800}, {0xece, 0xcc00cc00cc00cc00}, {0xecd, 0xcc00ee00ee006600}, {0xecc, 0xcc00ee0077003300}, {0xecb, 0x800080008000800}, {0xeca, 0xc000c000c000c00}, {0xec9, 0xc000e000e000600}, {0xec8, 0xc000e0007000300}, {0xec7, 0x880088008800880}, {0xec6, 0xcc00cc00cc00cc0}, {0xec5, 0xcc00ee00ee00660}, {0xec4, 0xcc00ee007700330}, {0xec3, 0x880088808880088}, {0xec2, 0xcc00ccc0ccc00cc}, {0xec1, 0xcc00ce60ce60066}, {0xec0, 0xcc00ee606770033}, {0xebf, 0xcc00000000000000}, {0xebe, 0x4400000000000000}, {0xebd, 0x6600000000000000}, {0xebc, 0x7700000000000000}, {0xebb, 0xc00000000000000}, {0xeba, 0x400000000000000}, {0xeb9, 0x600000000000000}, {0xeb8, 0x700000000000000}, {0xeb7, 0xcc0000000000000}, {0xeb6, 0x440000000000000}, {0xeb5, 0x660000000000000}, {0xeb4, 0x770000000000000}, {0xeb3, 0xccc000000000000}, {0xeb2, 0x444000000000000}, {0xeb1, 0x666000000000000}, {0xeb0, 0x673000000000000}, {0xeaf, 0xcc00cc0000000000}, {0xeae, 0x4400440000000000}, {0xead, 0x6600660000000000}, {0xeac, 0x7700770000000000}, {0xeab, 0xc000c0000000000}, {0xeaa, 0x400040000000000}, {0xea9, 0x600060000000000}, {0xea8, 0x700070000000000}, {0xea7, 0xcc00cc000000000}, {0xea6, 0x440044000000000}, {0xea5, 0x660066000000000}, {0xea4, 0x770077000000000}, {0xea3, 0xccc0ccc00000000}, {0xea2, 0x444044400000000}, {0xea1, 0x666066600000000}, {0xea0, 0x673067300000000}, {0xe9f, 0xcc00cc00cc000000}, {0xe9e, 0x4400440044000000}, {0xe9d, 0x6600660066000000}, {0xe9c, 0x6600770033000000}, {0xe9b, 0xc000c000c000000}, {0xe9a, 0x400040004000000}, {0xe99, 0x600060006000000}, {0xe98, 0x600070003000000}, {0xe97, 0xcc00cc00cc00000}, {0xe96, 0x440044004400000}, {0xe95, 0x660066006600000}, {0xe94, 0x660077003300000}, {0xe93, 0xcc00ccc00cc0000}, {0xe92, 0x440044400440000}, {0xe91, 0x660066600660000}, {0xe90, 0x660067300330000}, {0xe8f, 0xcc00cc00cc00cc00}, {0xe8e, 0x4400440044004400}, {0xe8d, 0x6600660066006600}, {0xe8c, 0x6600770077003300}, {0xe8b, 0xc000c000c000c00}, {0xe8a, 0x400040004000400}, {0xe89, 0x600060006000600}, {0xe88, 0x600070007000300}, {0xe87, 0xcc00cc00cc00cc0}, {0xe86, 0x440044004400440}, {0xe85, 0x660066006600660}, {0xe84, 0x660077007700330}, {0xe83, 0xcc00ccc0ccc00cc}, {0xe82, 0x440044404440044}, {0xe81, 0x660066606660066}, {0xe80, 0x660067306730033}, {0xe7f, 0xee00000000000000}, {0xe7e, 0x6600000000000000}, {0xe7d, 0x2200000000000000}, {0xe7c, 0x3300000000000000}, {0xe7b, 0xe00000000000000}, {0xe7a, 0x600000000000000}, {0xe79, 0x200000000000000}, {0xe78, 0x300000000000000}, {0xe77, 0xee0000000000000}, {0xe76, 0x660000000000000}, {0xe75, 0x220000000000000}, {0xe74, 0x330000000000000}, {0xe73, 0x6ec000000000000}, {0xe72, 0x666000000000000}, {0xe71, 0x222000000000000}, {0xe70, 0x333000000000000}, {0xe6f, 0xee00ee0000000000}, {0xe6e, 0x6600660000000000}, {0xe6d, 0x2200220000000000}, {0xe6c, 0x3300330000000000}, {0xe6b, 0xe000e0000000000}, {0xe6a, 0x600060000000000}, {0xe69, 0x200020000000000}, {0xe68, 0x300030000000000}, {0xe67, 0xee00ee000000000}, {0xe66, 0x660066000000000}, {0xe65, 0x220022000000000}, {0xe64, 0x330033000000000}, {0xe63, 0x6ec06ec00000000}, {0xe62, 0x666066600000000}, {0xe61, 0x222022200000000}, {0xe60, 0x333033300000000}, {0xe5f, 0x6600ee00cc000000}, {0xe5e, 0x6600660066000000}, {0xe5d, 0x2200220022000000}, {0xe5c, 0x3300330033000000}, {0xe5b, 0x6000e000c000000}, {0xe5a, 0x600060006000000}, {0xe59, 0x200020002000000}, {0xe58, 0x300030003000000}, {0xe57, 0x6600ee00cc00000}, {0xe56, 0x660066006600000}, {0xe55, 0x220022002200000}, {0xe54, 0x330033003300000}, {0xe53, 0x66006ec00cc0000}, {0xe52, 0x660066600660000}, {0xe51, 0x220022200220000}, {0xe50, 0x330033300330000}, {0xe4f, 0x6600ee00ee00cc00}, {0xe4e, 0x6600660066006600}, {0xe4d, 0x2200220022002200}, {0xe4c, 0x3300330033003300}, {0xe4b, 0x6000e000e000c00}, {0xe4a, 0x600060006000600}, {0xe49, 0x200020002000200}, {0xe48, 0x300030003000300}, {0xe47, 0x6600ee00ee00cc0}, {0xe46, 0x660066006600660}, {0xe45, 0x220022002200220}, {0xe44, 0x330033003300330}, {0xe43, 0x66006ec06ec00cc}, {0xe42, 0x660066606660066}, {0xe41, 0x220022202220022}, {0xe40, 0x330033303330033}, {0xe3f, 0xff00000000000000}, {0xe3e, 0x7700000000000000}, {0xe3d, 0x3300000000000000}, {0xe3c, 0x1100000000000000}, {0xe3b, 0xf00000000000000}, {0xe3a, 0x700000000000000}, {0xe39, 0x300000000000000}, {0xe38, 0x100000000000000}, {0xe37, 0xff0000000000000}, {0xe36, 0x770000000000000}, {0xe35, 0x330000000000000}, {0xe34, 0x110000000000000}, {0xe33, 0x7fe000000000000}, {0xe32, 0x376000000000000}, {0xe31, 0x333000000000000}, {0xe30, 0x111000000000000}, {0xe2f, 0xff00ff0000000000}, {0xe2e, 0x7700770000000000}, {0xe2d, 0x3300330000000000}, {0xe2c, 0x1100110000000000}, {0xe2b, 0xf000f0000000000}, {0xe2a, 0x700070000000000}, {0xe29, 0x300030000000000}, {0xe28, 0x100010000000000}, {0xe27, 0xff00ff000000000}, {0xe26, 0x770077000000000}, {0xe25, 0x330033000000000}, {0xe24, 0x110011000000000}, {0xe23, 0x7fe07fe00000000}, {0xe22, 0x376037600000000}, {0xe21, 0x333033300000000}, {0xe20, 0x111011100000000}, {0xe1f, 0x7700ff00ee000000}, {0xe1e, 0x3300770066000000}, {0xe1d, 0x3300330033000000}, {0xe1c, 0x1100110011000000}, {0xe1b, 0x7000f000e000000}, {0xe1a, 0x300070006000000}, {0xe19, 0x300030003000000}, {0xe18, 0x100010001000000}, {0xe17, 0x7700ff00ee00000}, {0xe16, 0x330077006600000}, {0xe15, 0x330033003300000}, {0xe14, 0x110011001100000}, {0xe13, 0x77007fe00ee0000}, {0xe12, 0x330037600660000}, {0xe11, 0x330033300330000}, {0xe10, 0x110011100110000}, {0xe0f, 0x33007700ee00cc00}, {0xe0e, 0x3300770077006600}, {0xe0d, 0x3300330033003300}, {0xe0c, 0x1100110011001100}, {0xe0b, 0x30007000e000c00}, {0xe0a, 0x300070007000600}, {0xe09, 0x300030003000300}, {0xe08, 0x100010001000100}, {0xe07, 0x33007700ee00cc0}, {0xe06, 0x330077007700660}, {0xe05, 0x330033003300330}, {0xe04, 0x110011001100110}, {0xe03, 0x330077606ee00cc}, {0xe02, 0x330037603760066}, {0xe01, 0x330033303330033}, {0xe00, 0x110011101110011}, {0xdff, 0x8880000000000000}, {0xdfe, 0xccc0000000000000}, {0xdfd, 0x6ec0000000000000}, {0xdfc, 0x7fe0000000000000}, {0xdfb, 0x880000000000000}, {0xdfa, 0xcc0000000000000}, {0xdf9, 0xee0000000000000}, {0xdf8, 0xff0000000000000}, {0xdf7, 0x80000000000000}, {0xdf6, 0xc0000000000000}, {0xdf5, 0xe0000000000000}, {0xdf4, 0xf0000000000000}, {0xdf3, 0x88000000000000}, {0xdf2, 0xcc000000000000}, {0xdf1, 0xee000000000000}, {0xdf0, 0xff000000000000}, {0xdef, 0x8880888000000000}, {0xdee, 0xccc0ccc000000000}, {0xded, 0x6ec06ec000000000}, {0xdec, 0x7fe07fe000000000}, {0xdeb, 0x880088000000000}, {0xdea, 0xcc00cc000000000}, {0xde9, 0xee00ee000000000}, {0xde8, 0xff00ff000000000}, {0xde7, 0x80008000000000}, {0xde6, 0xc000c000000000}, {0xde5, 0xe000e000000000}, {0xde4, 0xf000f000000000}, {0xde3, 0x88008800000000}, {0xde2, 0xcc00cc00000000}, {0xde1, 0xee00ee00000000}, {0xde0, 0xff00ff00000000}, {0xddf, 0x880888088000000}, {0xdde, 0xcc0ccc0cc000000}, {0xddd, 0xcc06ec066000000}, {0xddc, 0xee07fe077000000}, {0xddb, 0x880088008800000}, {0xdda, 0xcc00cc00cc00000}, {0xdd9, 0xcc00ee006600000}, {0xdd8, 0xee00ff007700000}, {0xdd7, 0x80008000800000}, {0xdd6, 0xc000c000c00000}, {0xdd5, 0xc000e000600000}, {0xdd4, 0xe000f000700000}, {0xdd3, 0x88008800880000}, {0xdd2, 0xcc00cc00cc0000}, {0xdd1, 0xcc00ee00660000}, {0xdd0, 0xee00ff00770000}, {0xdcf, 0x880888088808800}, {0xdce, 0xcc0ccc0ccc0cc00}, {0xdcd, 0xcc06ec06ec06600}, {0xdcc, 0xcc06ee077603300}, {0xdcb, 0x880088008800880}, {0xdca, 0xcc00cc00cc00cc0}, {0xdc9, 0xcc00ee00ee00660}, {0xdc8, 0xcc00ee007700330}, {0xdc7, 0x80008000800080}, {0xdc6, 0xc000c000c000c0}, {0xdc5, 0xc000e000e00060}, {0xdc4, 0xc000e000700030}, {0xdc3, 0x88008800880088}, {0xdc2, 0xcc00cc00cc00cc}, {0xdc1, 0xcc00ee00ee0066}, {0xdc0, 0xcc00ee00770033}, {0xdbf, 0xccc0000000000000}, {0xdbe, 0x4440000000000000}, {0xdbd, 0x6660000000000000}, {0xdbc, 0x3760000000000000}, {0xdbb, 0xcc0000000000000}, {0xdba, 0x440000000000000}, {0xdb9, 0x660000000000000}, {0xdb8, 0x770000000000000}, {0xdb7, 0xc0000000000000}, {0xdb6, 0x40000000000000}, {0xdb5, 0x60000000000000}, {0xdb4, 0x70000000000000}, {0xdb3, 0xcc000000000000}, {0xdb2, 0x44000000000000}, {0xdb1, 0x66000000000000}, {0xdb0, 0x77000000000000}, {0xdaf, 0xccc0ccc000000000}, {0xdae, 0x4440444000000000}, {0xdad, 0x6660666000000000}, {0xdac, 0x3760376000000000}, {0xdab, 0xcc00cc000000000}, {0xdaa, 0x440044000000000}, {0xda9, 0x660066000000000}, {0xda8, 0x770077000000000}, {0xda7, 0xc000c000000000}, {0xda6, 0x40004000000000}, {0xda5, 0x60006000000000}, {0xda4, 0x70007000000000}, {0xda3, 0xcc00cc00000000}, {0xda2, 0x44004400000000}, {0xda1, 0x66006600000000}, {0xda0, 0x77007700000000}, {0xd9f, 0xcc0ccc0cc000000}, {0xd9e, 0x440444044000000}, {0xd9d, 0x660666066000000}, {0xd9c, 0x660376033000000}, {0xd9b, 0xcc00cc00cc00000}, {0xd9a, 0x440044004400000}, {0xd99, 0x660066006600000}, {0xd98, 0x660077003300000}, {0xd97, 0xc000c000c00000}, {0xd96, 0x40004000400000}, {0xd95, 0x60006000600000}, {0xd94, 0x60007000300000}, {0xd93, 0xcc00cc00cc0000}, {0xd92, 0x44004400440000}, {0xd91, 0x66006600660000}, {0xd90, 0x66007700330000}, {0xd8f, 0xcc0ccc0ccc0cc00}, {0xd8e, 0x440444044404400}, {0xd8d, 0x660666066606600}, {0xd8c, 0x660376037603300}, {0xd8b, 0xcc00cc00cc00cc0}, {0xd8a, 0x440044004400440}, {0xd89, 0x660066006600660}, {0xd88, 0x660077007700330}, {0xd87, 0xc000c000c000c0}, {0xd86, 0x40004000400040}, {0xd85, 0x60006000600060}, {0xd84, 0x60007000700030}, {0xd83, 0xcc00cc00cc00cc}, {0xd82, 0x44004400440044}, {0xd81, 0x66006600660066}, {0xd80, 0x66007700770033}, {0xd7f, 0xce60000000000000}, {0xd7e, 0x6660000000000000}, {0xd7d, 0x2220000000000000}, {0xd7c, 0x3330000000000000}, {0xd7b, 0xee0000000000000}, {0xd7a, 0x660000000000000}, {0xd79, 0x220000000000000}, {0xd78, 0x330000000000000}, {0xd77, 0xe0000000000000}, {0xd76, 0x60000000000000}, {0xd75, 0x20000000000000}, {0xd74, 0x30000000000000}, {0xd73, 0xee000000000000}, {0xd72, 0x66000000000000}, {0xd71, 0x22000000000000}, {0xd70, 0x33000000000000}, {0xd6f, 0xce60ce6000000000}, {0xd6e, 0x6660666000000000}, {0xd6d, 0x2220222000000000}, {0xd6c, 0x3330333000000000}, {0xd6b, 0xee00ee000000000}, {0xd6a, 0x660066000000000}, {0xd69, 0x220022000000000}, {0xd68, 0x330033000000000}, {0xd67, 0xe000e000000000}, {0xd66, 0x60006000000000}, {0xd65, 0x20002000000000}, {0xd64, 0x30003000000000}, {0xd63, 0xee00ee00000000}, {0xd62, 0x66006600000000}, {0xd61, 0x22002200000000}, {0xd60, 0x33003300000000}, {0xd5f, 0x660ce60cc000000}, {0xd5e, 0x660666066000000}, {0xd5d, 0x220222022000000}, {0xd5c, 0x330333033000000}, {0xd5b, 0x6600ee00cc00000}, {0xd5a, 0x660066006600000}, {0xd59, 0x220022002200000}, {0xd58, 0x330033003300000}, {0xd57, 0x6000e000c00000}, {0xd56, 0x60006000600000}, {0xd55, 0x20002000200000}, {0xd54, 0x30003000300000}, {0xd53, 0x6600ee00cc0000}, {0xd52, 0x66006600660000}, {0xd51, 0x22002200220000}, {0xd50, 0x33003300330000}, {0xd4f, 0x660ce60ce60cc00}, {0xd4e, 0x660666066606600}, {0xd4d, 0x220222022202200}, {0xd4c, 0x330333033303300}, {0xd4b, 0x6600ee00ee00cc0}, {0xd4a, 0x660066006600660}, {0xd49, 0x220022002200220}, {0xd48, 0x330033003300330}, {0xd47, 0x6000e000e000c0}, {0xd46, 0x60006000600060}, {0xd45, 0x20002000200020}, {0xd44, 0x30003000300030}, {0xd43, 0x6600ee00ee00cc}, {0xd42, 0x66006600660066}, {0xd41, 0x22002200220022}, {0xd40, 0x33003300330033}, {0xd3f, 0xef70000000000000}, {0xd3e, 0x6730000000000000}, {0xd3d, 0x3330000000000000}, {0xd3c, 0x1110000000000000}, {0xd3b, 0xff0000000000000}, {0xd3a, 0x770000000000000}, {0xd39, 0x330000000000000}, {0xd38, 0x110000000000000}, {0xd37, 0xf0000000000000}, {0xd36, 0x70000000000000}, {0xd35, 0x30000000000000}, {0xd34, 0x10000000000000}, {0xd33, 0xff000000000000}, {0xd32, 0x77000000000000}, {0xd31, 0x33000000000000}, {0xd30, 0x11000000000000}, {0xd2f, 0xef70ef7000000000}, {0xd2e, 0x6730673000000000}, {0xd2d, 0x3330333000000000}, {0xd2c, 0x1110111000000000}, {0xd2b, 0xff00ff000000000}, {0xd2a, 0x770077000000000}, {0xd29, 0x330033000000000}, {0xd28, 0x110011000000000}, {0xd27, 0xf000f000000000}, {0xd26, 0x70007000000000}, {0xd25, 0x30003000000000}, {0xd24, 0x10001000000000}, {0xd23, 0xff00ff00000000}, {0xd22, 0x77007700000000}, {0xd21, 0x33003300000000}, {0xd20, 0x11001100000000}, {0xd1f, 0x770ef70ee000000}, {0xd1e, 0x330673066000000}, {0xd1d, 0x330333033000000}, {0xd1c, 0x110111011000000}, {0xd1b, 0x7700ff00ee00000}, {0xd1a, 0x330077006600000}, {0xd19, 0x330033003300000}, {0xd18, 0x110011001100000}, {0xd17, 0x7000f000e00000}, {0xd16, 0x30007000600000}, {0xd15, 0x30003000300000}, {0xd14, 0x10001000100000}, {0xd13, 0x7700ff00ee0000}, {0xd12, 0x33007700660000}, {0xd11, 0x33003300330000}, {0xd10, 0x11001100110000}, {0xd0f, 0x3306770ee60cc00}, {0xd0e, 0x330673067306600}, {0xd0d, 0x330333033303300}, {0xd0c, 0x110111011101100}, {0xd0b, 0x33007700ee00cc0}, {0xd0a, 0x330077007700660}, {0xd09, 0x330033003300330}, {0xd08, 0x110011001100110}, {0xd07, 0x30007000e000c0}, {0xd06, 0x30007000700060}, {0xd05, 0x30003000300030}, {0xd04, 0x10001000100010}, {0xd03, 0x33007700ee00cc}, {0xd02, 0x33007700770066}, {0xd01, 0x33003300330033}, {0xd00, 0x11001100110011}, {0xcff, 0x8888000000000000}, {0xcfe, 0xcccc000000000000}, {0xcfd, 0x6eec000000000000}, {0xcfc, 0x37ec000000000000}, {0xcfb, 0x888000000000000}, {0xcfa, 0xccc000000000000}, {0xcf9, 0x6ec000000000000}, {0xcf8, 0x7fe000000000000}, {0xcf7, 0x88000000000000}, {0xcf6, 0xcc000000000000}, {0xcf5, 0xee000000000000}, {0xcf4, 0xff000000000000}, {0xcf3, 0x8000000000000}, {0xcf2, 0xc000000000000}, {0xcf1, 0xe000000000000}, {0xcf0, 0xf000000000000}, {0xcef, 0x8888888800000000}, {0xcee, 0xcccccccc00000000}, {0xced, 0x6eec6eec00000000}, {0xcec, 0x37ec37ec00000000}, {0xceb, 0x888088800000000}, {0xcea, 0xccc0ccc00000000}, {0xce9, 0x6ec06ec00000000}, {0xce8, 0x7fe07fe00000000}, {0xce7, 0x88008800000000}, {0xce6, 0xcc00cc00000000}, {0xce5, 0xee00ee00000000}, {0xce4, 0xff00ff00000000}, {0xce3, 0x8000800000000}, {0xce2, 0xc000c00000000}, {0xce1, 0xe000e00000000}, {0xce0, 0xf000f00000000}, {0xcdf, 0x888888888800000}, {0xcde, 0xcccccccccc00000}, {0xcdd, 0xccc6eec66600000}, {0xcdc, 0x6ec37ec37600000}, {0xcdb, 0x88088808800000}, {0xcda, 0xcc0ccc0cc00000}, {0xcd9, 0xcc06ec06600000}, {0xcd8, 0xee07fe07700000}, {0xcd7, 0x88008800880000}, {0xcd6, 0xcc00cc00cc0000}, {0xcd5, 0xcc00ee00660000}, {0xcd4, 0xee00ff00770000}, {0xcd3, 0x8000800080000}, {0xcd2, 0xc000c000c0000}, {0xcd1, 0xc000e00060000}, {0xcd0, 0xe000f00070000}, {0xccf, 0x88088888808800}, {0xcce, 0xcc0cccccc0cc00}, {0xccd, 0xcc0eec6ee06600}, {0xccc, 0xcc06ec37603300}, {0xccb, 0x88088808880880}, {0xcca, 0xcc0ccc0ccc0cc0}, {0xcc9, 0xcc06ec06ec0660}, {0xcc8, 0xcc06ee07760330}, {0xcc7, 0x88008800880088}, {0xcc6, 0xcc00cc00cc00cc}, {0xcc5, 0xcc00ee00ee0066}, {0xcc4, 0xcc00ee00770033}, {0xcc3, 0x8000800080008}, {0xcc2, 0xc000c000c000c}, {0xcc1, 0xc000e000e0006}, {0xcc0, 0xc000e00070003}, {0xcbf, 0xcccc000000000000}, {0xcbe, 0x4444000000000000}, {0xcbd, 0x6666000000000000}, {0xcbc, 0x3776000000000000}, {0xcbb, 0xccc000000000000}, {0xcba, 0x444000000000000}, {0xcb9, 0x666000000000000}, {0xcb8, 0x376000000000000}, {0xcb7, 0xcc000000000000}, {0xcb6, 0x44000000000000}, {0xcb5, 0x66000000000000}, {0xcb4, 0x77000000000000}, {0xcb3, 0xc000000000000}, {0xcb2, 0x4000000000000}, {0xcb1, 0x6000000000000}, {0xcb0, 0x7000000000000}, {0xcaf, 0xcccccccc00000000}, {0xcae, 0x4444444400000000}, {0xcad, 0x6666666600000000}, {0xcac, 0x3776377600000000}, {0xcab, 0xccc0ccc00000000}, {0xcaa, 0x444044400000000}, {0xca9, 0x666066600000000}, {0xca8, 0x376037600000000}, {0xca7, 0xcc00cc00000000}, {0xca6, 0x44004400000000}, {0xca5, 0x66006600000000}, {0xca4, 0x77007700000000}, {0xca3, 0xc000c00000000}, {0xca2, 0x4000400000000}, {0xca1, 0x6000600000000}, {0xca0, 0x7000700000000}, {0xc9f, 0xcccccccccc00000}, {0xc9e, 0x444444444400000}, {0xc9d, 0x666666666600000}, {0xc9c, 0x666377633300000}, {0xc9b, 0xcc0ccc0cc00000}, {0xc9a, 0x44044404400000}, {0xc99, 0x66066606600000}, {0xc98, 0x66037603300000}, {0xc97, 0xcc00cc00cc0000}, {0xc96, 0x44004400440000}, {0xc95, 0x66006600660000}, {0xc94, 0x66007700330000}, {0xc93, 0xc000c000c0000}, {0xc92, 0x4000400040000}, {0xc91, 0x6000600060000}, {0xc90, 0x6000700030000}, {0xc8f, 0xcc0cccccc0cc00}, {0xc8e, 0x44044444404400}, {0xc8d, 0x66066666606600}, {0xc8c, 0x66077637703300}, {0xc8b, 0xcc0ccc0ccc0cc0}, {0xc8a, 0x44044404440440}, {0xc89, 0x66066606660660}, {0xc88, 0x66037603760330}, {0xc87, 0xcc00cc00cc00cc}, {0xc86, 0x44004400440044}, {0xc85, 0x66006600660066}, {0xc84, 0x66007700770033}, {0xc83, 0xc000c000c000c}, {0xc82, 0x4000400040004}, {0xc81, 0x6000600060006}, {0xc80, 0x6000700070003}, {0xc7f, 0xcee6000000000000}, {0xc7e, 0x6666000000000000}, {0xc7d, 0x2222000000000000}, {0xc7c, 0x3333000000000000}, {0xc7b, 0xce6000000000000}, {0xc7a, 0x666000000000000}, {0xc79, 0x222000000000000}, {0xc78, 0x333000000000000}, {0xc77, 0xee000000000000}, {0xc76, 0x66000000000000}, {0xc75, 0x22000000000000}, {0xc74, 0x33000000000000}, {0xc73, 0xe000000000000}, {0xc72, 0x6000000000000}, {0xc71, 0x2000000000000}, {0xc70, 0x3000000000000}, {0xc6f, 0xcee6cee600000000}, {0xc6e, 0x6666666600000000}, {0xc6d, 0x2222222200000000}, {0xc6c, 0x3333333300000000}, {0xc6b, 0xce60ce600000000}, {0xc6a, 0x666066600000000}, {0xc69, 0x222022200000000}, {0xc68, 0x333033300000000}, {0xc67, 0xee00ee00000000}, {0xc66, 0x66006600000000}, {0xc65, 0x22002200000000}, {0xc64, 0x33003300000000}, {0xc63, 0xe000e00000000}, {0xc62, 0x6000600000000}, {0xc61, 0x2000200000000}, {0xc60, 0x3000300000000}, {0xc5f, 0x666cee6ccc00000}, {0xc5e, 0x666666666600000}, {0xc5d, 0x222222222200000}, {0xc5c, 0x333333333300000}, {0xc5b, 0x660ce60cc00000}, {0xc5a, 0x66066606600000}, {0xc59, 0x22022202200000}, {0xc58, 0x33033303300000}, {0xc57, 0x6600ee00cc0000}, {0xc56, 0x66006600660000}, {0xc55, 0x22002200220000}, {0xc54, 0x33003300330000}, {0xc53, 0x6000e000c0000}, {0xc52, 0x6000600060000}, {0xc51, 0x2000200020000}, {0xc50, 0x3000300030000}, {0xc4f, 0x660ee6cee0cc00}, {0xc4e, 0x66066666606600}, {0xc4d, 0x22022222202200}, {0xc4c, 0x33033333303300}, {0xc4b, 0x660ce60ce60cc0}, {0xc4a, 0x66066606660660}, {0xc49, 0x22022202220220}, {0xc48, 0x33033303330330}, {0xc47, 0x6600ee00ee00cc}, {0xc46, 0x66006600660066}, {0xc45, 0x22002200220022}, {0xc44, 0x33003300330033}, {0xc43, 0x6000e000e000c}, {0xc42, 0x6000600060006}, {0xc41, 0x2000200020002}, {0xc40, 0x3000300030003}, {0xc3f, 0xce73000000000000}, {0xc3e, 0x6773000000000000}, {0xc3d, 0x3333000000000000}, {0xc3c, 0x1111000000000000}, {0xc3b, 0xef7000000000000}, {0xc3a, 0x673000000000000}, {0xc39, 0x333000000000000}, {0xc38, 0x111000000000000}, {0xc37, 0xff000000000000}, {0xc36, 0x77000000000000}, {0xc35, 0x33000000000000}, {0xc34, 0x11000000000000}, {0xc33, 0xf000000000000}, {0xc32, 0x7000000000000}, {0xc31, 0x3000000000000}, {0xc30, 0x1000000000000}, {0xc2f, 0xce73ce7300000000}, {0xc2e, 0x6773677300000000}, {0xc2d, 0x3333333300000000}, {0xc2c, 0x1111111100000000}, {0xc2b, 0xef70ef700000000}, {0xc2a, 0x673067300000000}, {0xc29, 0x333033300000000}, {0xc28, 0x111011100000000}, {0xc27, 0xff00ff00000000}, {0xc26, 0x77007700000000}, {0xc25, 0x33003300000000}, {0xc24, 0x11001100000000}, {0xc23, 0xf000f00000000}, {0xc22, 0x7000700000000}, {0xc21, 0x3000300000000}, {0xc20, 0x1000100000000}, {0xc1f, 0x673ce73ce600000}, {0xc1e, 0x333677366600000}, {0xc1d, 0x333333333300000}, {0xc1c, 0x111111111100000}, {0xc1b, 0x770ef70ee00000}, {0xc1a, 0x33067306600000}, {0xc19, 0x33033303300000}, {0xc18, 0x11011101100000}, {0xc17, 0x7700ff00ee0000}, {0xc16, 0x33007700660000}, {0xc15, 0x33003300330000}, {0xc14, 0x11001100110000}, {0xc13, 0x7000f000e0000}, {0xc12, 0x3000700060000}, {0xc11, 0x3000300030000}, {0xc10, 0x1000100010000}, {0xc0f, 0x330673ce60cc00}, {0xc0e, 0x33077367706600}, {0xc0d, 0x33033333303300}, {0xc0c, 0x11011111101100}, {0xc0b, 0x3306770ee60cc0}, {0xc0a, 0x33067306730660}, {0xc09, 0x33033303330330}, {0xc08, 0x11011101110110}, {0xc07, 0x33007700ee00cc}, {0xc06, 0x33007700770066}, {0xc05, 0x33003300330033}, {0xc04, 0x11001100110011}, {0xc03, 0x30007000e000c}, {0xc02, 0x3000700070006}, {0xc01, 0x3000300030003}, {0xc00, 0x1000100010001}, {0xbff, 0x8000800000000000}, {0xbfe, 0xc000c00000000000}, {0xbfd, 0xe000e00000000000}, {0xbfc, 0xf000f00000000000}, {0xbfb, 0x8800880000000000}, {0xbfa, 0xcc00cc0000000000}, {0xbf9, 0xee00ee0000000000}, {0xbf8, 0xff00ff0000000000}, {0xbf7, 0x8880888000000000}, {0xbf6, 0xccc0ccc000000000}, {0xbf5, 0xce60ce6000000000}, {0xbf4, 0xef70ef7000000000}, {0xbf3, 0x8888888800000000}, {0xbf2, 0xcccccccc00000000}, {0xbf1, 0xcee6cee600000000}, {0xbf0, 0xce73ce7300000000}, {0xbef, 0x800000000000}, {0xbee, 0xc00000000000}, {0xbed, 0xe00000000000}, {0xbec, 0xf00000000000}, {0xbeb, 0x880000000000}, {0xbea, 0xcc0000000000}, {0xbe9, 0xee0000000000}, {0xbe8, 0xff0000000000}, {0xbe7, 0x888000000000}, {0xbe6, 0xccc000000000}, {0xbe5, 0xce6000000000}, {0xbe4, 0xef7000000000}, {0xbe3, 0x888800000000}, {0xbe2, 0xcccc00000000}, {0xbe1, 0xcee600000000}, {0xbe0, 0xce7300000000}, {0xbdf, 0x800080000000}, {0xbde, 0xc000c0000000}, {0xbdd, 0xe000e0000000}, {0xbdc, 0xf000f0000000}, {0xbdb, 0x880088000000}, {0xbda, 0xcc00cc000000}, {0xbd9, 0xee00ee000000}, {0xbd8, 0xff00ff000000}, {0xbd7, 0x888088800000}, {0xbd6, 0xccc0ccc00000}, {0xbd5, 0xce60ce600000}, {0xbd4, 0xef70ef700000}, {0xbd3, 0x888888880000}, {0xbd2, 0xcccccccc0000}, {0xbd1, 0xcee6cee60000}, {0xbd0, 0xce73ce730000}, {0xbcf, 0x800080008000}, {0xbce, 0xc000c000c000}, {0xbcd, 0xc000e0006000}, {0xbcc, 0xe000f0007000}, {0xbcb, 0x880088008800}, {0xbca, 0xcc00cc00cc00}, {0xbc9, 0xcc00ee006600}, {0xbc8, 0xee00ff007700}, {0xbc7, 0x880088800880}, {0xbc6, 0xcc00ccc00cc0}, {0xbc5, 0xcc00ce600660}, {0xbc4, 0xee00ef700770}, {0xbc3, 0x888088880888}, {0xbc2, 0xccc0cccc0ccc}, {0xbc1, 0xccc0cee60666}, {0xbc0, 0xce60ce730673}, {0xbbf, 0xc000c00000000000}, {0xbbe, 0x4000400000000000}, {0xbbd, 0x6000600000000000}, {0xbbc, 0x7000700000000000}, {0xbbb, 0xcc00cc0000000000}, {0xbba, 0x4400440000000000}, {0xbb9, 0x6600660000000000}, {0xbb8, 0x7700770000000000}, {0xbb7, 0xccc0ccc000000000}, {0xbb6, 0x4440444000000000}, {0xbb5, 0x6660666000000000}, {0xbb4, 0x6730673000000000}, {0xbb3, 0xcccccccc00000000}, {0xbb2, 0x4444444400000000}, {0xbb1, 0x6666666600000000}, {0xbb0, 0x6773677300000000}, {0xbaf, 0xc00000000000}, {0xbae, 0x400000000000}, {0xbad, 0x600000000000}, {0xbac, 0x700000000000}, {0xbab, 0xcc0000000000}, {0xbaa, 0x440000000000}, {0xba9, 0x660000000000}, {0xba8, 0x770000000000}, {0xba7, 0xccc000000000}, {0xba6, 0x444000000000}, {0xba5, 0x666000000000}, {0xba4, 0x673000000000}, {0xba3, 0xcccc00000000}, {0xba2, 0x444400000000}, {0xba1, 0x666600000000}, {0xba0, 0x677300000000}, {0xb9f, 0xc000c0000000}, {0xb9e, 0x400040000000}, {0xb9d, 0x600060000000}, {0xb9c, 0x700070000000}, {0xb9b, 0xcc00cc000000}, {0xb9a, 0x440044000000}, {0xb99, 0x660066000000}, {0xb98, 0x770077000000}, {0xb97, 0xccc0ccc00000}, {0xb96, 0x444044400000}, {0xb95, 0x666066600000}, {0xb94, 0x673067300000}, {0xb93, 0xcccccccc0000}, {0xb92, 0x444444440000}, {0xb91, 0x666666660000}, {0xb90, 0x677367730000}, {0xb8f, 0xc000c000c000}, {0xb8e, 0x400040004000}, {0xb8d, 0x600060006000}, {0xb8c, 0x600070003000}, {0xb8b, 0xcc00cc00cc00}, {0xb8a, 0x440044004400}, {0xb89, 0x660066006600}, {0xb88, 0x660077003300}, {0xb87, 0xcc00ccc00cc0}, {0xb86, 0x440044400440}, {0xb85, 0x660066600660}, {0xb84, 0x660067300330}, {0xb83, 0xccc0cccc0ccc}, {0xb82, 0x444044440444}, {0xb81, 0x666066660666}, {0xb80, 0x666067730333}, {0xb7f, 0xe000e00000000000}, {0xb7e, 0x6000600000000000}, {0xb7d, 0x2000200000000000}, {0xb7c, 0x3000300000000000}, {0xb7b, 0xee00ee0000000000}, {0xb7a, 0x6600660000000000}, {0xb79, 0x2200220000000000}, {0xb78, 0x3300330000000000}, {0xb77, 0x6ec06ec000000000}, {0xb76, 0x6660666000000000}, {0xb75, 0x2220222000000000}, {0xb74, 0x3330333000000000}, {0xb73, 0x6eec6eec00000000}, {0xb72, 0x6666666600000000}, {0xb71, 0x2222222200000000}, {0xb70, 0x3333333300000000}, {0xb6f, 0xe00000000000}, {0xb6e, 0x600000000000}, {0xb6d, 0x200000000000}, {0xb6c, 0x300000000000}, {0xb6b, 0xee0000000000}, {0xb6a, 0x660000000000}, {0xb69, 0x220000000000}, {0xb68, 0x330000000000}, {0xb67, 0x6ec000000000}, {0xb66, 0x666000000000}, {0xb65, 0x222000000000}, {0xb64, 0x333000000000}, {0xb63, 0x6eec00000000}, {0xb62, 0x666600000000}, {0xb61, 0x222200000000}, {0xb60, 0x333300000000}, {0xb5f, 0xe000e0000000}, {0xb5e, 0x600060000000}, {0xb5d, 0x200020000000}, {0xb5c, 0x300030000000}, {0xb5b, 0xee00ee000000}, {0xb5a, 0x660066000000}, {0xb59, 0x220022000000}, {0xb58, 0x330033000000}, {0xb57, 0x6ec06ec00000}, {0xb56, 0x666066600000}, {0xb55, 0x222022200000}, {0xb54, 0x333033300000}, {0xb53, 0x6eec6eec0000}, {0xb52, 0x666666660000}, {0xb51, 0x222222220000}, {0xb50, 0x333333330000}, {0xb4f, 0x6000e000c000}, {0xb4e, 0x600060006000}, {0xb4d, 0x200020002000}, {0xb4c, 0x300030003000}, {0xb4b, 0x6600ee00cc00}, {0xb4a, 0x660066006600}, {0xb49, 0x220022002200}, {0xb48, 0x330033003300}, {0xb47, 0x66006ec00cc0}, {0xb46, 0x660066600660}, {0xb45, 0x220022200220}, {0xb44, 0x330033300330}, {0xb43, 0x66606eec0ccc}, {0xb42, 0x666066660666}, {0xb41, 0x222022220222}, {0xb40, 0x333033330333}, {0xb3f, 0xf000f00000000000}, {0xb3e, 0x7000700000000000}, {0xb3d, 0x3000300000000000}, {0xb3c, 0x1000100000000000}, {0xb3b, 0xff00ff0000000000}, {0xb3a, 0x7700770000000000}, {0xb39, 0x3300330000000000}, {0xb38, 0x1100110000000000}, {0xb37, 0x7fe07fe000000000}, {0xb36, 0x3760376000000000}, {0xb35, 0x3330333000000000}, {0xb34, 0x1110111000000000}, {0xb33, 0x37ec37ec00000000}, {0xb32, 0x3776377600000000}, {0xb31, 0x3333333300000000}, {0xb30, 0x1111111100000000}, {0xb2f, 0xf00000000000}, {0xb2e, 0x700000000000}, {0xb2d, 0x300000000000}, {0xb2c, 0x100000000000}, {0xb2b, 0xff0000000000}, {0xb2a, 0x770000000000}, {0xb29, 0x330000000000}, {0xb28, 0x110000000000}, {0xb27, 0x7fe000000000}, {0xb26, 0x376000000000}, {0xb25, 0x333000000000}, {0xb24, 0x111000000000}, {0xb23, 0x37ec00000000}, {0xb22, 0x377600000000}, {0xb21, 0x333300000000}, {0xb20, 0x111100000000}, {0xb1f, 0xf000f0000000}, {0xb1e, 0x700070000000}, {0xb1d, 0x300030000000}, {0xb1c, 0x100010000000}, {0xb1b, 0xff00ff000000}, {0xb1a, 0x770077000000}, {0xb19, 0x330033000000}, {0xb18, 0x110011000000}, {0xb17, 0x7fe07fe00000}, {0xb16, 0x376037600000}, {0xb15, 0x333033300000}, {0xb14, 0x111011100000}, {0xb13, 0x37ec37ec0000}, {0xb12, 0x377637760000}, {0xb11, 0x333333330000}, {0xb10, 0x111111110000}, {0xb0f, 0x7000f000e000}, {0xb0e, 0x300070006000}, {0xb0d, 0x300030003000}, {0xb0c, 0x100010001000}, {0xb0b, 0x7700ff00ee00}, {0xb0a, 0x330077006600}, {0xb09, 0x330033003300}, {0xb08, 0x110011001100}, {0xb07, 0x77007fe00ee0}, {0xb06, 0x330037600660}, {0xb05, 0x330033300330}, {0xb04, 0x110011100110}, {0xb03, 0x376037ec06ec}, {0xb02, 0x333037760666}, {0xb01, 0x333033330333}, {0xb00, 0x111011110111}, {0xaff, 0x8800880000000000}, {0xafe, 0xcc00cc0000000000}, {0xafd, 0xee00ee0000000000}, {0xafc, 0xff00ff0000000000}, {0xafb, 0x800080000000000}, {0xafa, 0xc000c0000000000}, {0xaf9, 0xe000e0000000000}, {0xaf8, 0xf000f0000000000}, {0xaf7, 0x880088000000000}, {0xaf6, 0xcc00cc000000000}, {0xaf5, 0xee00ee000000000}, {0xaf4, 0xff00ff000000000}, {0xaf3, 0x888088800000000}, {0xaf2, 0xccc0ccc00000000}, {0xaf1, 0xce60ce600000000}, {0xaf0, 0xef70ef700000000}, {0xaef, 0x880000000000}, {0xaee, 0xcc0000000000}, {0xaed, 0xee0000000000}, {0xaec, 0xff0000000000}, {0xaeb, 0x80000000000}, {0xaea, 0xc0000000000}, {0xae9, 0xe0000000000}, {0xae8, 0xf0000000000}, {0xae7, 0x88000000000}, {0xae6, 0xcc000000000}, {0xae5, 0xee000000000}, {0xae4, 0xff000000000}, {0xae3, 0x88800000000}, {0xae2, 0xccc00000000}, {0xae1, 0xce600000000}, {0xae0, 0xef700000000}, {0xadf, 0x880088000000}, {0xade, 0xcc00cc000000}, {0xadd, 0xee00ee000000}, {0xadc, 0xff00ff000000}, {0xadb, 0x80008000000}, {0xada, 0xc000c000000}, {0xad9, 0xe000e000000}, {0xad8, 0xf000f000000}, {0xad7, 0x88008800000}, {0xad6, 0xcc00cc00000}, {0xad5, 0xee00ee00000}, {0xad4, 0xff00ff00000}, {0xad3, 0x88808880000}, {0xad2, 0xccc0ccc0000}, {0xad1, 0xce60ce60000}, {0xad0, 0xef70ef70000}, {0xacf, 0x880088008800}, {0xace, 0xcc00cc00cc00}, {0xacd, 0xcc00ee006600}, {0xacc, 0xee00ff007700}, {0xacb, 0x80008000800}, {0xaca, 0xc000c000c00}, {0xac9, 0xc000e000600}, {0xac8, 0xe000f000700}, {0xac7, 0x88008800880}, {0xac6, 0xcc00cc00cc0}, {0xac5, 0xcc00ee00660}, {0xac4, 0xee00ff00770}, {0xac3, 0x88008880088}, {0xac2, 0xcc00ccc00cc}, {0xac1, 0xcc00ce60066}, {0xac0, 0xee00ef70077}, {0xabf, 0xcc00cc0000000000}, {0xabe, 0x4400440000000000}, {0xabd, 0x6600660000000000}, {0xabc, 0x7700770000000000}, {0xabb, 0xc000c0000000000}, {0xaba, 0x400040000000000}, {0xab9, 0x600060000000000}, {0xab8, 0x700070000000000}, {0xab7, 0xcc00cc000000000}, {0xab6, 0x440044000000000}, {0xab5, 0x660066000000000}, {0xab4, 0x770077000000000}, {0xab3, 0xccc0ccc00000000}, {0xab2, 0x444044400000000}, {0xab1, 0x666066600000000}, {0xab0, 0x673067300000000}, {0xaaf, 0xcc0000000000}, {0xaae, 0x440000000000}, {0xaad, 0x660000000000}, {0xaac, 0x770000000000}, {0xaab, 0xc0000000000}, {0xaaa, 0x40000000000}, {0xaa9, 0x60000000000}, {0xaa8, 0x70000000000}, {0xaa7, 0xcc000000000}, {0xaa6, 0x44000000000}, {0xaa5, 0x66000000000}, {0xaa4, 0x77000000000}, {0xaa3, 0xccc00000000}, {0xaa2, 0x44400000000}, {0xaa1, 0x66600000000}, {0xaa0, 0x67300000000}, {0xa9f, 0xcc00cc000000}, {0xa9e, 0x440044000000}, {0xa9d, 0x660066000000}, {0xa9c, 0x770077000000}, {0xa9b, 0xc000c000000}, {0xa9a, 0x40004000000}, {0xa99, 0x60006000000}, {0xa98, 0x70007000000}, {0xa97, 0xcc00cc00000}, {0xa96, 0x44004400000}, {0xa95, 0x66006600000}, {0xa94, 0x77007700000}, {0xa93, 0xccc0ccc0000}, {0xa92, 0x44404440000}, {0xa91, 0x66606660000}, {0xa90, 0x67306730000}, {0xa8f, 0xcc00cc00cc00}, {0xa8e, 0x440044004400}, {0xa8d, 0x660066006600}, {0xa8c, 0x660077003300}, {0xa8b, 0xc000c000c00}, {0xa8a, 0x40004000400}, {0xa89, 0x60006000600}, {0xa88, 0x60007000300}, {0xa87, 0xcc00cc00cc0}, {0xa86, 0x44004400440}, {0xa85, 0x66006600660}, {0xa84, 0x66007700330}, {0xa83, 0xcc00ccc00cc}, {0xa82, 0x44004440044}, {0xa81, 0x66006660066}, {0xa80, 0x66006730033}, {0xa7f, 0xee00ee0000000000}, {0xa7e, 0x6600660000000000}, {0xa7d, 0x2200220000000000}, {0xa7c, 0x3300330000000000}, {0xa7b, 0xe000e0000000000}, {0xa7a, 0x600060000000000}, {0xa79, 0x200020000000000}, {0xa78, 0x300030000000000}, {0xa77, 0xee00ee000000000}, {0xa76, 0x660066000000000}, {0xa75, 0x220022000000000}, {0xa74, 0x330033000000000}, {0xa73, 0x6ec06ec00000000}, {0xa72, 0x666066600000000}, {0xa71, 0x222022200000000}, {0xa70, 0x333033300000000}, {0xa6f, 0xee0000000000}, {0xa6e, 0x660000000000}, {0xa6d, 0x220000000000}, {0xa6c, 0x330000000000}, {0xa6b, 0xe0000000000}, {0xa6a, 0x60000000000}, {0xa69, 0x20000000000}, {0xa68, 0x30000000000}, {0xa67, 0xee000000000}, {0xa66, 0x66000000000}, {0xa65, 0x22000000000}, {0xa64, 0x33000000000}, {0xa63, 0x6ec00000000}, {0xa62, 0x66600000000}, {0xa61, 0x22200000000}, {0xa60, 0x33300000000}, {0xa5f, 0xee00ee000000}, {0xa5e, 0x660066000000}, {0xa5d, 0x220022000000}, {0xa5c, 0x330033000000}, {0xa5b, 0xe000e000000}, {0xa5a, 0x60006000000}, {0xa59, 0x20002000000}, {0xa58, 0x30003000000}, {0xa57, 0xee00ee00000}, {0xa56, 0x66006600000}, {0xa55, 0x22002200000}, {0xa54, 0x33003300000}, {0xa53, 0x6ec06ec0000}, {0xa52, 0x66606660000}, {0xa51, 0x22202220000}, {0xa50, 0x33303330000}, {0xa4f, 0x6600ee00cc00}, {0xa4e, 0x660066006600}, {0xa4d, 0x220022002200}, {0xa4c, 0x330033003300}, {0xa4b, 0x6000e000c00}, {0xa4a, 0x60006000600}, {0xa49, 0x20002000200}, {0xa48, 0x30003000300}, {0xa47, 0x6600ee00cc0}, {0xa46, 0x66006600660}, {0xa45, 0x22002200220}, {0xa44, 0x33003300330}, {0xa43, 0x66006ec00cc}, {0xa42, 0x66006660066}, {0xa41, 0x22002220022}, {0xa40, 0x33003330033}, {0xa3f, 0xff00ff0000000000}, {0xa3e, 0x7700770000000000}, {0xa3d, 0x3300330000000000}, {0xa3c, 0x1100110000000000}, {0xa3b, 0xf000f0000000000}, {0xa3a, 0x700070000000000}, {0xa39, 0x300030000000000}, {0xa38, 0x100010000000000}, {0xa37, 0xff00ff000000000}, {0xa36, 0x770077000000000}, {0xa35, 0x330033000000000}, {0xa34, 0x110011000000000}, {0xa33, 0x7fe07fe00000000}, {0xa32, 0x376037600000000}, {0xa31, 0x333033300000000}, {0xa30, 0x111011100000000}, {0xa2f, 0xff0000000000}, {0xa2e, 0x770000000000}, {0xa2d, 0x330000000000}, {0xa2c, 0x110000000000}, {0xa2b, 0xf0000000000}, {0xa2a, 0x70000000000}, {0xa29, 0x30000000000}, {0xa28, 0x10000000000}, {0xa27, 0xff000000000}, {0xa26, 0x77000000000}, {0xa25, 0x33000000000}, {0xa24, 0x11000000000}, {0xa23, 0x7fe00000000}, {0xa22, 0x37600000000}, {0xa21, 0x33300000000}, {0xa20, 0x11100000000}, {0xa1f, 0xff00ff000000}, {0xa1e, 0x770077000000}, {0xa1d, 0x330033000000}, {0xa1c, 0x110011000000}, {0xa1b, 0xf000f000000}, {0xa1a, 0x70007000000}, {0xa19, 0x30003000000}, {0xa18, 0x10001000000}, {0xa17, 0xff00ff00000}, {0xa16, 0x77007700000}, {0xa15, 0x33003300000}, {0xa14, 0x11001100000}, {0xa13, 0x7fe07fe0000}, {0xa12, 0x37603760000}, {0xa11, 0x33303330000}, {0xa10, 0x11101110000}, {0xa0f, 0x7700ff00ee00}, {0xa0e, 0x330077006600}, {0xa0d, 0x330033003300}, {0xa0c, 0x110011001100}, {0xa0b, 0x7000f000e00}, {0xa0a, 0x30007000600}, {0xa09, 0x30003000300}, {0xa08, 0x10001000100}, {0xa07, 0x7700ff00ee0}, {0xa06, 0x33007700660}, {0xa05, 0x33003300330}, {0xa04, 0x11001100110}, {0xa03, 0x77007fe00ee}, {0xa02, 0x33003760066}, {0xa01, 0x33003330033}, {0xa00, 0x11001110011}, {0x9ff, 0x8880888000000000}, {0x9fe, 0xccc0ccc000000000}, {0x9fd, 0x6ec06ec000000000}, {0x9fc, 0x7fe07fe000000000}, {0x9fb, 0x880088000000000}, {0x9fa, 0xcc00cc000000000}, {0x9f9, 0xee00ee000000000}, {0x9f8, 0xff00ff000000000}, {0x9f7, 0x80008000000000}, {0x9f6, 0xc000c000000000}, {0x9f5, 0xe000e000000000}, {0x9f4, 0xf000f000000000}, {0x9f3, 0x88008800000000}, {0x9f2, 0xcc00cc00000000}, {0x9f1, 0xee00ee00000000}, {0x9f0, 0xff00ff00000000}, {0x9ef, 0x888000000000}, {0x9ee, 0xccc000000000}, {0x9ed, 0x6ec000000000}, {0x9ec, 0x7fe000000000}, {0x9eb, 0x88000000000}, {0x9ea, 0xcc000000000}, {0x9e9, 0xee000000000}, {0x9e8, 0xff000000000}, {0x9e7, 0x8000000000}, {0x9e6, 0xc000000000}, {0x9e5, 0xe000000000}, {0x9e4, 0xf000000000}, {0x9e3, 0x8800000000}, {0x9e2, 0xcc00000000}, {0x9e1, 0xee00000000}, {0x9e0, 0xff00000000}, {0x9df, 0x888088800000}, {0x9de, 0xccc0ccc00000}, {0x9dd, 0x6ec06ec00000}, {0x9dc, 0x7fe07fe00000}, {0x9db, 0x88008800000}, {0x9da, 0xcc00cc00000}, {0x9d9, 0xee00ee00000}, {0x9d8, 0xff00ff00000}, {0x9d7, 0x8000800000}, {0x9d6, 0xc000c00000}, {0x9d5, 0xe000e00000}, {0x9d4, 0xf000f00000}, {0x9d3, 0x8800880000}, {0x9d2, 0xcc00cc0000}, {0x9d1, 0xee00ee0000}, {0x9d0, 0xff00ff0000}, {0x9cf, 0x88088808800}, {0x9ce, 0xcc0ccc0cc00}, {0x9cd, 0xcc06ec06600}, {0x9cc, 0xee07fe07700}, {0x9cb, 0x88008800880}, {0x9ca, 0xcc00cc00cc0}, {0x9c9, 0xcc00ee00660}, {0x9c8, 0xee00ff00770}, {0x9c7, 0x8000800080}, {0x9c6, 0xc000c000c0}, {0x9c5, 0xc000e00060}, {0x9c4, 0xe000f00070}, {0x9c3, 0x8800880088}, {0x9c2, 0xcc00cc00cc}, {0x9c1, 0xcc00ee0066}, {0x9c0, 0xee00ff0077}, {0x9bf, 0xccc0ccc000000000}, {0x9be, 0x4440444000000000}, {0x9bd, 0x6660666000000000}, {0x9bc, 0x3760376000000000}, {0x9bb, 0xcc00cc000000000}, {0x9ba, 0x440044000000000}, {0x9b9, 0x660066000000000}, {0x9b8, 0x770077000000000}, {0x9b7, 0xc000c000000000}, {0x9b6, 0x40004000000000}, {0x9b5, 0x60006000000000}, {0x9b4, 0x70007000000000}, {0x9b3, 0xcc00cc00000000}, {0x9b2, 0x44004400000000}, {0x9b1, 0x66006600000000}, {0x9b0, 0x77007700000000}, {0x9af, 0xccc000000000}, {0x9ae, 0x444000000000}, {0x9ad, 0x666000000000}, {0x9ac, 0x376000000000}, {0x9ab, 0xcc000000000}, {0x9aa, 0x44000000000}, {0x9a9, 0x66000000000}, {0x9a8, 0x77000000000}, {0x9a7, 0xc000000000}, {0x9a6, 0x4000000000}, {0x9a5, 0x6000000000}, {0x9a4, 0x7000000000}, {0x9a3, 0xcc00000000}, {0x9a2, 0x4400000000}, {0x9a1, 0x6600000000}, {0x9a0, 0x7700000000}, {0x99f, 0xccc0ccc00000}, {0x99e, 0x444044400000}, {0x99d, 0x666066600000}, {0x99c, 0x376037600000}, {0x99b, 0xcc00cc00000}, {0x99a, 0x44004400000}, {0x999, 0x66006600000}, {0x998, 0x77007700000}, {0x997, 0xc000c00000}, {0x996, 0x4000400000}, {0x995, 0x6000600000}, {0x994, 0x7000700000}, {0x993, 0xcc00cc0000}, {0x992, 0x4400440000}, {0x991, 0x6600660000}, {0x990, 0x7700770000}, {0x98f, 0xcc0ccc0cc00}, {0x98e, 0x44044404400}, {0x98d, 0x66066606600}, {0x98c, 0x66037603300}, {0x98b, 0xcc00cc00cc0}, {0x98a, 0x44004400440}, {0x989, 0x66006600660}, {0x988, 0x66007700330}, {0x987, 0xc000c000c0}, {0x986, 0x4000400040}, {0x985, 0x6000600060}, {0x984, 0x6000700030}, {0x983, 0xcc00cc00cc}, {0x982, 0x4400440044}, {0x981, 0x6600660066}, {0x980, 0x6600770033}, {0x97f, 0xce60ce6000000000}, {0x97e, 0x6660666000000000}, {0x97d, 0x2220222000000000}, {0x97c, 0x3330333000000000}, {0x97b, 0xee00ee000000000}, {0x97a, 0x660066000000000}, {0x979, 0x220022000000000}, {0x978, 0x330033000000000}, {0x977, 0xe000e000000000}, {0x976, 0x60006000000000}, {0x975, 0x20002000000000}, {0x974, 0x30003000000000}, {0x973, 0xee00ee00000000}, {0x972, 0x66006600000000}, {0x971, 0x22002200000000}, {0x970, 0x33003300000000}, {0x96f, 0xce6000000000}, {0x96e, 0x666000000000}, {0x96d, 0x222000000000}, {0x96c, 0x333000000000}, {0x96b, 0xee000000000}, {0x96a, 0x66000000000}, {0x969, 0x22000000000}, {0x968, 0x33000000000}, {0x967, 0xe000000000}, {0x966, 0x6000000000}, {0x965, 0x2000000000}, {0x964, 0x3000000000}, {0x963, 0xee00000000}, {0x962, 0x6600000000}, {0x961, 0x2200000000}, {0x960, 0x3300000000}, {0x95f, 0xce60ce600000}, {0x95e, 0x666066600000}, {0x95d, 0x222022200000}, {0x95c, 0x333033300000}, {0x95b, 0xee00ee00000}, {0x95a, 0x66006600000}, {0x959, 0x22002200000}, {0x958, 0x33003300000}, {0x957, 0xe000e00000}, {0x956, 0x6000600000}, {0x955, 0x2000200000}, {0x954, 0x3000300000}, {0x953, 0xee00ee0000}, {0x952, 0x6600660000}, {0x951, 0x2200220000}, {0x950, 0x3300330000}, {0x94f, 0x660ce60cc00}, {0x94e, 0x66066606600}, {0x94d, 0x22022202200}, {0x94c, 0x33033303300}, {0x94b, 0x6600ee00cc0}, {0x94a, 0x66006600660}, {0x949, 0x22002200220}, {0x948, 0x33003300330}, {0x947, 0x6000e000c0}, {0x946, 0x6000600060}, {0x945, 0x2000200020}, {0x944, 0x3000300030}, {0x943, 0x6600ee00cc}, {0x942, 0x6600660066}, {0x941, 0x2200220022}, {0x940, 0x3300330033}, {0x93f, 0xef70ef7000000000}, {0x93e, 0x6730673000000000}, {0x93d, 0x3330333000000000}, {0x93c, 0x1110111000000000}, {0x93b, 0xff00ff000000000}, {0x93a, 0x770077000000000}, {0x939, 0x330033000000000}, {0x938, 0x110011000000000}, {0x937, 0xf000f000000000}, {0x936, 0x70007000000000}, {0x935, 0x30003000000000}, {0x454, 0x330000}, {0x453, 0xe0000}, {0x452, 0x60000}, {0x451, 0x20000}, {0x450, 0x30000}, {0x44f, 0xcee6cee6}, {0x44e, 0x66666666}, {0x44d, 0x22222222}, {0x44c, 0x33333333}, {0x44b, 0xce60ce6}, {0x44a, 0x6660666}, {0x449, 0x2220222}, {0x448, 0x3330333}, {0x447, 0xee00ee}, {0x446, 0x660066}, {0x445, 0x220022}, {0x444, 0x330033}, {0x443, 0xe000e}, {0x442, 0x60006}, {0x441, 0x20002}, {0x440, 0x30003}, {0x43f, 0xce60ce7306730000}, {0x43e, 0x6660677303330000}, {0x43d, 0x3330333303330000}, {0x43c, 0x1110111101110000}, {0x43b, 0xee00ef700770000}, {0x43a, 0x660067300330000}, {0x439, 0x330033300330000}, {0x438, 0x110011100110000}, {0x437, 0xee00ff00770000}, {0x436, 0x66007700330000}, {0x435, 0x33003300330000}, {0x434, 0x11001100110000}, {0x433, 0xe000f00070000}, {0x432, 0x6000700030000}, {0x431, 0x3000300030000}, {0x430, 0x1000100010000}, {0x42f, 0xce73ce730000}, {0x42e, 0x677367730000}, {0x42d, 0x333333330000}, {0x42c, 0x111111110000}, {0x42b, 0xef70ef70000}, {0x42a, 0x67306730000}, {0x429, 0x33303330000}, {0x428, 0x11101110000}, {0x427, 0xff00ff0000}, {0x426, 0x7700770000}, {0x425, 0x3300330000}, {0x424, 0x1100110000}, {0x423, 0xf000f0000}, {0x422, 0x700070000}, {0x421, 0x300030000}, {0x420, 0x100010000}, {0x41f, 0xce730000}, {0x41e, 0x67730000}, {0x41d, 0x33330000}, {0x41c, 0x11110000}, {0x41b, 0xef70000}, {0x41a, 0x6730000}, {0x419, 0x3330000}, {0x418, 0x1110000}, {0x417, 0xff0000}, {0x416, 0x770000}, {0x415, 0x330000}, {0x414, 0x110000}, {0x413, 0xf0000}, {0x412, 0x70000}, {0x411, 0x30000}, {0x410, 0x10000}, {0x40f, 0xce73ce73}, {0x40e, 0x67736773}, {0x40d, 0x33333333}, {0x40c, 0x11111111}, {0x40b, 0xef70ef7}, {0x40a, 0x6730673}, {0x409, 0x3330333}, {0x408, 0x1110111}, {0x407, 0xff00ff}, {0x406, 0x770077}, {0x405, 0x330033}, {0x404, 0x110011}, {0x403, 0xf000f}, {0x402, 0x70007}, {0x401, 0x30003}, {0x400, 0x10001}, {0x3ff, 0x8000800080008000}, {0x3fe, 0xc000c000c000c000}, {0x3fd, 0x6000e000e000c000}, {0x3fc, 0x30007000e000c000}, {0x3fb, 0x8800880088008800}, {0x3fa, 0xcc00cc00cc00cc00}, {0x3f9, 0x6600ee00ee00cc00}, {0x3f8, 0x33007700ee00cc00}, {0x3f7, 0x880888088808800}, {0x3f6, 0xcc0ccc0ccc0cc00}, {0x3f5, 0x660ce60ce60cc00}, {0x3f4, 0x3306770ee60cc00}, {0x3f3, 0x88088888808800}, {0x3f2, 0xcc0cccccc0cc00}, {0x3f1, 0x660ee6cee0cc00}, {0x3f0, 0x330673ce60cc00}, {0x3ef, 0x800080008000}, {0x3ee, 0xc000c000c000}, {0x3ed, 0x6000e000c000}, {0x3ec, 0x7000f000e000}, {0x3eb, 0x880088008800}, {0x3ea, 0xcc00cc00cc00}, {0x3e9, 0x6600ee00cc00}, {0x3e8, 0x7700ff00ee00}, {0x3e7, 0x88088808800}, {0x3e6, 0xcc0ccc0cc00}, {0x3e5, 0x660ce60cc00}, {0x3e4, 0x770ef70ee00}, {0x3e3, 0x88888888880}, {0x3e2, 0xcccccccccc0}, {0x3e1, 0x666cee6ccc0}, {0x3e0, 0x673ce73ce60}, {0x3df, 0x80008000}, {0x3de, 0xc000c000}, {0x3dd, 0xe000e000}, {0x3dc, 0xf000f000}, {0x3db, 0x88008800}, {0x3da, 0xcc00cc00}, {0x3d9, 0xee00ee00}, {0x3d8, 0xff00ff00}, {0x3d7, 0x88808880}, {0x3d6, 0xccc0ccc0}, {0x3d5, 0xce60ce60}, {0x3d4, 0xef70ef70}, {0x3d3, 0x88888888}, {0x3d2, 0xcccccccc}, {0x3d1, 0xcee6cee6}, {0x3d0, 0xce73ce73}, {0x3cf, 0x8000}, {0x3ce, 0xc000}, {0x3cd, 0xe000}, {0x3cc, 0xf000}, {0x3cb, 0x8800}, {0x3ca, 0xcc00}, {0x3c9, 0xee00}, {0x3c8, 0xff00}, {0x3c7, 0x8880}, {0x3c6, 0xccc0}, {0x3c5, 0xce60}, {0x3c4, 0xef70}, {0x3c3, 0x8888}, {0x3c2, 0xcccc}, {0x3c1, 0xcee6}, {0x3c0, 0xce73}, {0x3bf, 0xc000c000c000c000}, {0x3be, 0x4000400040004000}, {0x3bd, 0x6000600060006000}, {0x3bc, 0x3000700070006000}, {0x3bb, 0xcc00cc00cc00cc00}, {0x3ba, 0x4400440044004400}, {0x3b9, 0x6600660066006600}, {0x3b8, 0x3300770077006600}, {0x3b7, 0xcc0ccc0ccc0cc00}, {0x3b6, 0x440444044404400}, {0x3b5, 0x660666066606600}, {0x3b4, 0x330673067306600}, {0x3b3, 0xcc0cccccc0cc00}, {0x3b2, 0x44044444404400}, {0x3b1, 0x66066666606600}, {0x3b0, 0x33077367706600}, {0x3af, 0xc000c000c000}, {0x3ae, 0x400040004000}, {0x3ad, 0x600060006000}, {0x3ac, 0x300070006000}, {0x3ab, 0xcc00cc00cc00}, {0x3aa, 0x440044004400}, {0x3a9, 0x660066006600}, {0x3a8, 0x330077006600}, {0x3a7, 0xcc0ccc0cc00}, {0x3a6, 0x44044404400}, {0x3a5, 0x66066606600}, {0x3a4, 0x33067306600}, {0x3a3, 0xcccccccccc0}, {0x3a2, 0x44444444440}, {0x3a1, 0x66666666660}, {0x3a0, 0x33367736660}, {0x39f, 0xc000c000}, {0x39e, 0x40004000}, {0x39d, 0x60006000}, {0x39c, 0x70007000}, {0x39b, 0xcc00cc00}, {0x39a, 0x44004400}, {0x399, 0x66006600}, {0x398, 0x77007700}, {0x397, 0xccc0ccc0}, {0x396, 0x44404440}, {0x395, 0x66606660}, {0x394, 0x67306730}, {0x393, 0xcccccccc}, {0x392, 0x44444444}, {0x391, 0x66666666}, {0x390, 0x67736773}, {0x38f, 0xc000}, {0x38e, 0x4000}, {0x38d, 0x6000}, {0x38c, 0x7000}, {0x38b, 0xcc00}, {0x38a, 0x4400}, {0x389, 0x6600}, {0x388, 0x7700}, {0x387, 0xccc0}, {0x386, 0x4440}, {0x385, 0x6660}, {0x384, 0x6730}, {0x383, 0xcccc}, {0x382, 0x4444}, {0x381, 0x6666}, {0x380, 0x6773}, {0x37f, 0xc000e000e0006000}, {0x37e, 0x6000600060006000}, {0x37d, 0x2000200020002000}, {0x37c, 0x3000300030003000}, {0x37b, 0xcc00ee00ee006600}, {0x37a, 0x6600660066006600}, {0x379, 0x2200220022002200}, {0x378, 0x3300330033003300}, {0x377, 0xcc06ec06ec06600}, {0x376, 0x660666066606600}, {0x375, 0x220222022202200}, {0x374, 0x330333033303300}, {0x373, 0xcc0eec6ee06600}, {0x372, 0x66066666606600}, {0x371, 0x22022222202200}, {0x370, 0x33033333303300}, {0x36f, 0xc000e0006000}, {0x36e, 0x600060006000}, {0x36d, 0x200020002000}, {0x36c, 0x300030003000}, {0x36b, 0xcc00ee006600}, {0x36a, 0x660066006600}, {0x369, 0x220022002200}, {0x368, 0x330033003300}, {0x367, 0xcc06ec06600}, {0x366, 0x66066606600}, {0x365, 0x22022202200}, {0x364, 0x33033303300}, {0x363, 0xccc6eec6660}, {0x362, 0x66666666660}, {0x361, 0x22222222220}, {0x360, 0x33333333330}, {0x35f, 0xe000e000}, {0x35e, 0x60006000}, {0x35d, 0x20002000}, {0x35c, 0x30003000}, {0x35b, 0xee00ee00}, {0x35a, 0x66006600}, {0x359, 0x22002200}, {0x358, 0x33003300}, {0x357, 0x6ec06ec0}, {0x356, 0x66606660}, {0x355, 0x22202220}, {0x354, 0x33303330}, {0x353, 0x6eec6eec}, {0x352, 0x66666666}, {0x351, 0x22222222}, {0x350, 0x33333333}, {0x34f, 0xe000}, {0x34e, 0x6000}, {0x34d, 0x2000}, {0x34c, 0x3000}, {0x34b, 0xee00}, {0x34a, 0x6600}, {0x349, 0x2200}, {0x348, 0x3300}, {0x347, 0x6ec0}, {0x346, 0x6660}, {0x345, 0x2220}, {0x344, 0x3330}, {0x343, 0x6eec}, {0x342, 0x6666}, {0x341, 0x2222}, {0x340, 0x3333}, {0x33f, 0xc000e00070003000}, {0x33e, 0x6000700070003000}, {0x33d, 0x3000300030003000}, {0x33c, 0x1000100010001000}, {0x33b, 0xcc00ee0077003300}, {0x33a, 0x6600770077003300}, {0x339, 0x3300330033003300}, {0x338, 0x1100110011001100}, {0x337, 0xcc06ee077603300}, {0x336, 0x660376037603300}, {0x335, 0x330333033303300}, {0x334, 0x110111011101100}, {0x333, 0xcc06ec37603300}, {0x332, 0x66077637703300}, {0x331, 0x33033333303300}, {0x330, 0x11011111101100}, {0x32f, 0xe000f0007000}, {0x32e, 0x600070003000}, {0x32d, 0x300030003000}, {0x32c, 0x100010001000}, {0x32b, 0xee00ff007700}, {0x32a, 0x660077003300}, {0x329, 0x330033003300}, {0x328, 0x110011001100}, {0x327, 0xee07fe07700}, {0x326, 0x66037603300}, {0x325, 0x33033303300}, {0x324, 0x11011101100}, {0x323, 0x6ec37ec3760}, {0x322, 0x66637763330}, {0x321, 0x33333333330}, {0x320, 0x11111111110}, {0x31f, 0xf000f000}, {0x31e, 0x70007000}, {0x31d, 0x30003000}, {0x31c, 0x10001000}, {0x31b, 0xff00ff00}, {0x31a, 0x77007700}, {0x319, 0x33003300}, {0x318, 0x11001100}, {0x317, 0x7fe07fe0}, {0x316, 0x37603760}, {0x315, 0x33303330}, {0x314, 0x11101110}, {0x313, 0x37ec37ec}, {0x312, 0x37763776}, {0x311, 0x33333333}, {0x310, 0x11111111}, {0x30f, 0xf000}, {0x30e, 0x7000}, {0x30d, 0x3000}, {0x30c, 0x1000}, {0x30b, 0xff00}, {0x30a, 0x7700}, {0x309, 0x3300}, {0x308, 0x1100}, {0x307, 0x7fe0}, {0x306, 0x3760}, {0x305, 0x3330}, {0x304, 0x1110}, {0x303, 0x37ec}, {0x302, 0x3776}, {0x301, 0x3333}, {0x300, 0x1111}, {0x2ff, 0x8800880088008800}, {0x2fe, 0xcc00cc00cc00cc00}, {0x2fd, 0x6600ee00ee00cc00}, {0x2fc, 0x33007700ee00cc00}, {0x2fb, 0x800080008000800}, {0x2fa, 0xc000c000c000c00}, {0x2f9, 0x6000e000e000c00}, {0x2f8, 0x30007000e000c00}, {0x2f7, 0x880088008800880}, {0x2f6, 0xcc00cc00cc00cc0}, {0x2f5, 0x6600ee00ee00cc0}, {0x2f4, 0x33007700ee00cc0}, {0x2f3, 0x88088808880880}, {0x2f2, 0xcc0ccc0ccc0cc0}, {0x2f1, 0x660ce60ce60cc0}, {0x2f0, 0x3306770ee60cc0}, {0x2ef, 0x880088008800}, {0x2ee, 0xcc00cc00cc00}, {0x2ed, 0x6600ee00cc00}, {0x2ec, 0x7700ff00ee00}, {0x2eb, 0x80008000800}, {0x2ea, 0xc000c000c00}, {0x2e9, 0x6000e000c00}, {0x2e8, 0x7000f000e00}, {0x2e7, 0x88008800880}, {0x2e6, 0xcc00cc00cc0}, {0x2e5, 0x6600ee00cc0}, {0x2e4, 0x7700ff00ee0}, {0x2e3, 0x8808880880}, {0x2e2, 0xcc0ccc0cc0}, {0x2e1, 0x660ce60cc0}, {0x2e0, 0x770ef70ee0}, {0x2df, 0x88008800}, {0x2de, 0xcc00cc00}, {0x2dd, 0xee00ee00}, {0x2dc, 0xff00ff00}, {0x2db, 0x8000800}, {0x2da, 0xc000c00}, {0x2d9, 0xe000e00}, {0x2d8, 0xf000f00}, {0x2d7, 0x8800880}, {0x2d6, 0xcc00cc0}, {0x2d5, 0xee00ee0}, {0x2d4, 0xff00ff0}, {0x2d3, 0x8880888}, {0x2d2, 0xccc0ccc}, {0x2d1, 0xce60ce6}, {0x2d0, 0xef70ef7}, {0x2cf, 0x8800}, {0x2ce, 0xcc00}, {0x2cd, 0xee00}, {0x2cc, 0xff00}, {0x2cb, 0x800}, {0x2ca, 0xc00}, {0x2c9, 0xe00}, {0x2c8, 0xf00}, {0x2c7, 0x880}, {0x2c6, 0xcc0}, {0x2c5, 0xee0}, {0x2c4, 0xff0}, {0x2c3, 0x888}, {0x2c2, 0xccc}, {0x2c1, 0xce6}, {0x2c0, 0xef7}, {0x2bf, 0xcc00cc00cc00cc00}, {0x2be, 0x4400440044004400}, {0x2bd, 0x6600660066006600}, {0x2bc, 0x3300770077006600}, {0x2bb, 0xc000c000c000c00}, {0x2ba, 0x400040004000400}, {0x2b9, 0x600060006000600}, {0x2b8, 0x300070007000600}, {0x2b7, 0xcc00cc00cc00cc0}, {0x2b6, 0x440044004400440}, {0x2b5, 0x660066006600660}, {0x2b4, 0x330077007700660}, {0x2b3, 0xcc0ccc0ccc0cc0}, {0x2b2, 0x44044404440440}, {0x2b1, 0x66066606660660}, {0x2b0, 0x33067306730660}, {0x2af, 0xcc00cc00cc00}, {0x2ae, 0x440044004400}, {0x2ad, 0x660066006600}, {0x2ac, 0x330077006600}, {0x2ab, 0xc000c000c00}, {0x2aa, 0x40004000400}, {0x2a9, 0x60006000600}, {0x2a8, 0x30007000600}, {0x2a7, 0xcc00cc00cc0}, {0x2a6, 0x44004400440}, {0x2a5, 0x66006600660}, {0x2a4, 0x33007700660}, {0x2a3, 0xcc0ccc0cc0}, {0x2a2, 0x4404440440}, {0x2a1, 0x6606660660}, {0x2a0, 0x3306730660}, {0x29f, 0xcc00cc00}, {0x29e, 0x44004400}, {0x29d, 0x66006600}, {0x29c, 0x77007700}, {0x29b, 0xc000c00}, {0x29a, 0x4000400}, {0x299, 0x6000600}, {0x298, 0x7000700}, {0x297, 0xcc00cc0}, {0x296, 0x4400440}, {0x295, 0x6600660}, {0x294, 0x7700770}, {0x293, 0xccc0ccc}, {0x292, 0x4440444}, {0x291, 0x6660666}, {0x290, 0x6730673}, {0x28f, 0xcc00}, {0x28e, 0x4400}, {0x28d, 0x6600}, {0x28c, 0x7700}, {0x28b, 0xc00}, {0x28a, 0x400}, {0x289, 0x600}, {0x288, 0x700}, {0x287, 0xcc0}, {0x286, 0x440}, {0x285, 0x660}, {0x284, 0x770}, {0x283, 0xccc}, {0x282, 0x444}, {0x281, 0x666}, {0x280, 0x673}, {0x27f, 0xcc00ee00ee006600}, {0x27e, 0x6600660066006600}, {0x27d, 0x2200220022002200}, {0x27c, 0x3300330033003300}, {0x27b, 0xc000e000e000600}, {0x27a, 0x600060006000600}, {0x279, 0x200020002000200}, {0x278, 0x300030003000300}, {0x277, 0xcc00ee00ee00660}, {0x276, 0x660066006600660}, {0x275, 0x220022002200220}, {0x274, 0x330033003300330}, {0x273, 0xcc06ec06ec0660}, {0x272, 0x66066606660660}, {0x271, 0x22022202220220}, {0x270, 0x33033303330330}, {0x26f, 0xcc00ee006600}, {0x26e, 0x660066006600}, {0x26d, 0x220022002200}, {0x26c, 0x330033003300}, {0x26b, 0xc000e000600}, {0x26a, 0x60006000600}, {0x269, 0x20002000200}, {0x268, 0x30003000300}, {0x267, 0xcc00ee00660}, {0x266, 0x66006600660}, {0x265, 0x22002200220}, {0x264, 0x33003300330}, {0x263, 0xcc06ec0660}, {0x262, 0x6606660660}, {0x261, 0x2202220220}, {0x260, 0x3303330330}, {0x25f, 0xee00ee00}, {0x25e, 0x66006600}, {0x25d, 0x22002200}, {0x25c, 0x33003300}, {0x25b, 0xe000e00}, {0x25a, 0x6000600}, {0x259, 0x2000200}, {0x258, 0x3000300}, {0x257, 0xee00ee0}, {0x256, 0x6600660}, {0x255, 0x2200220}, {0x254, 0x3300330}, {0x253, 0x6ec06ec}, {0x252, 0x6660666}, {0x251, 0x2220222}, {0x250, 0x3330333}, {0x24f, 0xee00}, {0x24e, 0x6600}, {0x24d, 0x2200}, {0x24c, 0x3300}, {0x24b, 0xe00}, {0x24a, 0x600}, {0x249, 0x200}, {0x248, 0x300}, {0x247, 0xee0}, {0x246, 0x660}, {0x245, 0x220}, {0x244, 0x330}, {0x243, 0x6ec}, {0x242, 0x666}, {0x241, 0x222}, {0x240, 0x333}, {0x23f, 0xcc00ee0077003300}, {0x23e, 0x6600770077003300}, {0x23d, 0x3300330033003300}, {0x23c, 0x1100110011001100}, {0x23b, 0xc000e0007000300}, {0x23a, 0x600070007000300}, {0x239, 0x300030003000300}, {0x238, 0x100010001000100}, {0x237, 0xcc00ee007700330}, {0x236, 0x660077007700330}, {0x235, 0x330033003300330}, {0x234, 0x110011001100110}, {0x233, 0xcc06ee07760330}, {0x232, 0x66037603760330}, {0x231, 0x33033303330330}, {0x230, 0x11011101110110}, {0x22f, 0xee00ff007700}, {0x22e, 0x660077003300}, {0x22d, 0x330033003300}, {0x22c, 0x110011001100}, {0x22b, 0xe000f000700}, {0x22a, 0x60007000300}, {0x229, 0x30003000300}, {0x228, 0x10001000100}, {0x227, 0xee00ff00770}, {0x226, 0x66007700330}, {0x225, 0x33003300330}, {0x224, 0x11001100110}, {0x223, 0xee07fe0770}, {0x222, 0x6603760330}, {0x221, 0x3303330330}, {0x220, 0x1101110110}, {0x21f, 0xff00ff00}, {0x21e, 0x77007700}, {0x21d, 0x33003300}, {0x100, 0x11}, {0xff, 0x8800888008880088}, {0xfe, 0xcc00ccc00ccc00cc}, {0xfd, 0x66006ee00eec00cc}, {0xfc, 0x3300376006ec00cc}, {0xfb, 0x880088808880088}, {0xfa, 0xcc00ccc0ccc00cc}, {0xf9, 0x66006ec06ec00cc}, {0xf8, 0x330077606ee00cc}, {0xf7, 0x88008800880088}, {0xf6, 0xcc00cc00cc00cc}, {0xf5, 0x6600ee00ee00cc}, {0xf4, 0x33007700ee00cc}, {0xf3, 0x8000800080008}, {0xf2, 0xc000c000c000c}, {0xf1, 0x6000e000e000c}, {0xf0, 0x30007000e000c}, {0xef, 0x888088880888}, {0xee, 0xccc0cccc0ccc}, {0xed, 0x66606eec0ccc}, {0xec, 0x376037ec06ec}, {0xeb, 0x88008880088}, {0xea, 0xcc00ccc00cc}, {0xe9, 0x66006ec00cc}, {0xe8, 0x77007fe00ee}, {0xe7, 0x8800880088}, {0xe6, 0xcc00cc00cc}, {0xe5, 0x6600ee00cc}, {0xe4, 0x7700ff00ee}, {0xe3, 0x800080008}, {0xe2, 0xc000c000c}, {0xe1, 0x6000e000c}, {0xe0, 0x7000f000e}, {0xdf, 0x88888888}, {0xde, 0xcccccccc}, {0xdd, 0x6eec6eec}, {0xdc, 0x37ec37ec}, {0xdb, 0x8880888}, {0xda, 0xccc0ccc}, {0xd9, 0x6ec06ec}, {0xd8, 0x7fe07fe}, {0xd7, 0x880088}, {0xd6, 0xcc00cc}, {0xd5, 0xee00ee}, {0xd4, 0xff00ff}, {0xd3, 0x80008}, {0xd2, 0xc000c}, {0xd1, 0xe000e}, {0xd0, 0xf000f}, {0xcf, 0x8888}, {0xce, 0xcccc}, {0xcd, 0x6eec}, {0xcc, 0x37ec}, {0xcb, 0x888}, {0xca, 0xccc}, {0xc9, 0x6ec}, {0xc8, 0x7fe}, {0xc7, 0x88}, {0xc6, 0xcc}, {0xc5, 0xee}, {0xc4, 0xff}, {0xc3, 0x8}, {0xc2, 0xc}, {0xc1, 0xe}, {0xc0, 0xf}, {0xbf, 0xcc00ccc00ccc00cc}, {0xbe, 0x4400444004440044}, {0xbd, 0x6600666006660066}, {0xbc, 0x3300377007760066}, {0xbb, 0xcc00ccc0ccc00cc}, {0xba, 0x440044404440044}, {0xb9, 0x660066606660066}, {0xb8, 0x330037603760066}, {0xb7, 0xcc00cc00cc00cc}, {0xb6, 0x44004400440044}, {0xb5, 0x66006600660066}, {0xb4, 0x33007700770066}, {0xb3, 0xc000c000c000c}, {0xb2, 0x4000400040004}, {0xb1, 0x6000600060006}, {0xb0, 0x3000700070006}, {0xaf, 0xccc0cccc0ccc}, {0xae, 0x444044440444}, {0xad, 0x666066660666}, {0xac, 0x333037760666}, {0xab, 0xcc00ccc00cc}, {0xaa, 0x44004440044}, {0xa9, 0x66006660066}, {0xa8, 0x33003760066}, {0xa7, 0xcc00cc00cc}, {0xa6, 0x4400440044}, {0xa5, 0x6600660066}, {0xa4, 0x3300770066}, {0xa3, 0xc000c000c}, {0xa2, 0x400040004}, {0xa1, 0x600060006}, {0xa0, 0x300070006}, {0x9f, 0xcccccccc}, {0x9e, 0x44444444}, {0x9d, 0x66666666}, {0x9c, 0x37763776}, {0x9b, 0xccc0ccc}, {0x9a, 0x4440444}, {0x99, 0x6660666}, {0x98, 0x3760376}, {0x97, 0xcc00cc}, {0x96, 0x440044}, {0x95, 0x660066}, {0x94, 0x770077}, {0x93, 0xc000c}, {0x92, 0x40004}, {0x91, 0x60006}, {0x90, 0x70007}, {0x8f, 0xcccc}, {0x8e, 0x4444}, {0x8d, 0x6666}, {0x8c, 0x3776}, {0x8b, 0xccc}, {0x8a, 0x444}, {0x89, 0x666}, {0x88, 0x376}, {0x87, 0xcc}, {0x86, 0x44}, {0x85, 0x66}, {0x84, 0x77}, {0x83, 0xc}, {0x82, 0x4}, {0x81, 0x6}, {0x80, 0x7}, {0x7f, 0xcc00cee00ee60066}, {0x3a, 0x660067306730033}, {0x39, 0x330033303330033}, {0x38, 0x110011101110011}, {0x37, 0xcc00ee00770033}, {0x36, 0x66007700770033}, {0x35, 0x33003300330033}, {0x34, 0x11001100110011}, {0x33, 0xc000e00070003}, {0x32, 0x6000700070003}, {0x31, 0x3000300030003}, {0x30, 0x1000100010001}, {0x2f, 0xce60ce730673}, {0x2e, 0x666067730333}, {0x2d, 0x333033330333}, {0x2c, 0x111011110111}, {0x2b, 0xee00ef70077}, {0x2a, 0x66006730033}, {0x29, 0x33003330033}, {0x28, 0x11001110011}, {0x27, 0xee00ff0077}, {0x26, 0x6600770033}, {0x25, 0x3300330033}, {0x24, 0x1100110011}, {0x23, 0xe000f0007}, {0x22, 0x600070003}, {0x21, 0x300030003}, {0x20, 0x100010001}, {0x1f, 0xce73ce73}, {0x1e, 0x67736773}, {0x1d, 0x33333333}, {0xc, 0x1111}, {0xb, 0xef7}, {0xa, 0x673}, {0x9, 0x333}, {0x8, 0x111}, {0x7, 0xff}, {0x6, 0x77}, {0x5, 0x33}, {0x4, 0x11}, {0x3, 0xf}, {0x2, 0x7}, {0x1, 0x3}, {0x0, 0x1}, {0xd, 0x3333}, {0xe, 0x6773}, {0xf, 0xce73}, {0x10, 0x10001}, {0x11, 0x30003}, {0x12, 0x70007}, {0x13, 0xf000f}, {0x14, 0x110011}, {0x15, 0x330033}, {0x16, 0x770077}, {0x17, 0xff00ff}, {0x18, 0x1110111}, {0x19, 0x3330333}, {0x1a, 0x6730673}, {0x1b, 0xef70ef7}, {0x1c, 0x11111111}, {0x3b, 0xcc00ee606770033}, {0x3c, 0x1100111001110011}, {0x3d, 0x3300333003330033}, {0x3e, 0x6600677007730033}, {0x3f, 0xcc00ce6006730033}, {0x40, 0x3}, {0x41, 0x2}, {0x42, 0x6}, {0x43, 0xe}, {0x44, 0x33}, {0x45, 0x22}, {0x46, 0x66}, {0x47, 0xee}, {0x48, 0x333}, {0x49, 0x222}, {0x4a, 0x666}, {0x4b, 0xce6}, {0x4c, 0x3333}, {0x4d, 0x2222}, {0x4e, 0x6666}, {0x4f, 0xcee6}, {0x50, 0x30003}, {0x51, 0x20002}, {0x52, 0x60006}, {0x53, 0xe000e}, {0x54, 0x330033}, {0x55, 0x220022}, {0x56, 0x660066}, {0x57, 0xee00ee}, {0x58, 0x3330333}, {0x59, 0x2220222}, {0x5a, 0x6660666}, {0x5b, 0xce60ce6}, {0x5c, 0x33333333}, {0x5d, 0x22222222}, {0x5e, 0x66666666}, {0x5f, 0xcee6cee6}, {0x60, 0x300030003}, {0x61, 0x200020002}, {0x62, 0x600060006}, {0x63, 0xc000e0006}, {0x64, 0x3300330033}, {0x65, 0x2200220022}, {0x66, 0x6600660066}, {0x67, 0xcc00ee0066}, {0x68, 0x33003330033}, {0x69, 0x22002220022}, {0x6a, 0x66006660066}, {0x6b, 0xcc00ce60066}, {0x6c, 0x333033330333}, {0x6d, 0x222022220222}, {0x6e, 0x666066660666}, {0x6f, 0xccc0cee60666}, {0x70, 0x3000300030003}, {0x71, 0x2000200020002}, {0x72, 0x6000600060006}, {0x73, 0xc000e000e0006}, {0x74, 0x33003300330033}, {0x75, 0x22002200220022}, {0x76, 0x66006600660066}, {0x77, 0xcc00ee00ee0066}, {0x78, 0x330033303330033}, {0x79, 0x220022202220022}, {0x7a, 0x660066606660066}, {0x7b, 0xcc00ce60ce60066}, {0x7c, 0x3300333003330033}, {0x7d, 0x2200222002220022}, {0x7e, 0x6600666006660066}, {0x101, 0x33}, {0x102, 0x77}, {0x103, 0xff}, {0x104, 0x10}, {0x105, 0x30}, {0x106, 0x70}, {0x107, 0xf0}, {0x108, 0x110}, {0x109, 0x330}, {0x10a, 0x770}, {0x10b, 0xff0}, {0x10c, 0x1110}, {0x10d, 0x3330}, {0x10e, 0x6730}, {0x10f, 0xef70}, {0x110, 0x110011}, {0x111, 0x330033}, {0x112, 0x770077}, {0x113, 0xff00ff}, {0x114, 0x100010}, {0x115, 0x300030}, {0x116, 0x700070}, {0x117, 0xf000f0}, {0x118, 0x1100110}, {0x119, 0x3300330}, {0x11a, 0x7700770}, {0x11b, 0xff00ff0}, {0x11c, 0x11101110}, {0x11d, 0x33303330}, {0x11e, 0x67306730}, {0x11f, 0xef70ef70}, {0x120, 0x1100110011}, {0x121, 0x3300330033}, {0x122, 0x6600770033}, {0x123, 0xee00ff0077}, {0x124, 0x1000100010}, {0x125, 0x3000300030}, {0x126, 0x6000700030}, {0x127, 0xe000f00070}, {0x128, 0x11001100110}, {0x129, 0x33003300330}, {0x12a, 0x66007700330}, {0x12b, 0xee00ff00770}, {0x12c, 0x110011100110}, {0x12d, 0x330033300330}, {0x12e, 0x660067300330}, {0x12f, 0xee00ef700770}, {0x130, 0x11001100110011}, {0x131, 0x33003300330033}, {0x132, 0x66007700770033}, {0x133, 0xcc00ee00770033}, {0x134, 0x10001000100010}, {0x135, 0x30003000300030}, {0x136, 0x60007000700030}, {0x137, 0xc000e000700030}, {0x138, 0x110011001100110}, {0x139, 0x330033003300330}, {0x13a, 0x660077007700330}, {0x13b, 0xcc00ee007700330}, {0x13c, 0x1100111011100110}, {0x13d, 0x3300333033300330}, {0x13e, 0x6600673067300330}, {0x13f, 0xcc00ee6067700330}, {0x140, 0x33}, {0x141, 0x22}, {0x142, 0x66}, {0x143, 0xee}, {0x144, 0x30}, {0x145, 0x20}, {0x146, 0x60}, {0x147, 0xe0}, {0x148, 0x330}, {0x149, 0x220}, {0x14a, 0x660}, {0x14b, 0xee0}, {0x14c, 0x3330}, {0x14d, 0x2220}, {0x14e, 0x6660}, {0x14f, 0xce60}, {0x150, 0x330033}, {0x151, 0x220022}, {0x152, 0x660066}, {0x153, 0xee00ee}, {0x154, 0x300030}, {0x155, 0x200020}, {0x156, 0x600060}, {0x157, 0xe000e0}, {0x158, 0x3300330}, {0x159, 0x2200220}, {0x15a, 0x6600660}, {0x15b, 0xee00ee0}, {0x15c, 0x33303330}, {0x15d, 0x22202220}, {0x15e, 0x66606660}, {0x15f, 0xce60ce60}, {0x160, 0x3300330033}, {0x161, 0x2200220022}, {0x162, 0x6600660066}, {0x163, 0xcc00ee0066}, {0x164, 0x3000300030}, {0x165, 0x2000200020}, {0x166, 0x6000600060}, {0x167, 0xc000e00060}, {0x168, 0x33003300330}, {0x169, 0x22002200220}, {0x16a, 0x66006600660}, {0x16b, 0xcc00ee00660}, {0x16c, 0x330033300330}, {0x16d, 0x220022200220}, {0x16e, 0x660066600660}, {0x16f, 0xcc00ce600660}, {0x170, 0x33003300330033}, {0x171, 0x22002200220022}, {0x172, 0x66006600660066}, {0x173, 0xcc00ee00ee0066}, {0x174, 0x30003000300030}, {0x175, 0x20002000200020}, {0x176, 0x60006000600060}, {0x177, 0xc000e000e00060}, {0x178, 0x330033003300330}, {0x179, 0x220022002200220}, {0x17a, 0x660066006600660}, {0x17b, 0xcc00ee00ee00660}, {0x17c, 0x3300333033300330}, {0x17d, 0x2200222022200220}, {0x17e, 0x6600666066600660}, {0x17f, 0xcc00ce60ce600660}, {0x180, 0x77}, {0x181, 0x66}, {0x182, 0x44}, {0x183, 0xcc}, {0x184, 0x70}, {0x185, 0x60}, {0x186, 0x40}, {0x187, 0xc0}, {0x188, 0x770}, {0x189, 0x660}, {0x18a, 0x440}, {0x18b, 0xcc0}, {0x18c, 0x3760}, {0x18d, 0x6660}, {0x18e, 0x4440}, {0x18f, 0xccc0}, {0x190, 0x770077}, {0x191, 0x660066}, {0x192, 0x440044}, {0x193, 0xcc00cc}, {0x194, 0x700070}, {0x195, 0x600060}, {0x196, 0x400040}, {0x197, 0xc000c0}, {0x198, 0x7700770}, {0x199, 0x6600660}, {0x19a, 0x4400440}, {0x19b, 0xcc00cc0}, {0x19c, 0x37603760}, {0x19d, 0x66606660}, {0x19e, 0x44404440}, {0x19f, 0xccc0ccc0}, {0x1a0, 0x3300770066}, {0x1a1, 0x6600660066}, {0x1a2, 0x4400440044}, {0x1a3, 0xcc00cc00cc}, {0x1a4, 0x3000700060}, {0x1a5, 0x6000600060}, {0x1a6, 0x4000400040}, {0x1a7, 0xc000c000c0}, {0x1a8, 0x33007700660}, {0x1a9, 0x66006600660}, {0x1aa, 0x44004400440}, {0x1ab, 0xcc00cc00cc0}, {0x1ac, 0x330037600660}, {0x1ad, 0x660066600660}, {0x1ae, 0x440044400440}, {0x1af, 0xcc00ccc00cc0}, {0x1b0, 0x33007700770066}, {0x1b1, 0x66006600660066}, {0x1b2, 0x44004400440044}, {0x1b3, 0xcc00cc00cc00cc}, {0x1b4, 0x30007000700060}, {0x1b5, 0x60006000600060}, {0x1b6, 0x40004000400040}, {0x1b7, 0xc000c000c000c0}, {0x1b8, 0x330077007700660}, {0x1b9, 0x660066006600660}, {0x1ba, 0x440044004400440}, {0x1bb, 0xcc00cc00cc00cc0}, {0x1bc, 0x3300376037600660}, {0x1bd, 0x6600666066600660}, {0x1be, 0x4400444044400440}, {0x1bf, 0xcc00ccc0ccc00cc0}, {0x1c0, 0xff}, {0x1c1, 0xee}, {0x1c2, 0xcc}, {0x1c3, 0x88}, {0x1c4, 0xf0}, {0x1c5, 0xe0}, {0x1c6, 0xc0}, {0x1c7, 0x80}, {0x1c8, 0xff0}, {0x1c9, 0xee0}, {0x1ca, 0xcc0}, {0x1cb, 0x880}, {0x1cc, 0x7fe0}, {0x1cd, 0x6ec0}, {0x1ce, 0xccc0}, {0x1cf, 0x8880}, {0x1d0, 0xff00ff}, {0x1d1, 0xee00ee}, {0x1d2, 0xcc00cc}, {0x1d3, 0x880088}, {0x1d4, 0xf000f0}, {0x1d5, 0xe000e0}, {0x1d6, 0xc000c0}, {0x1d7, 0x800080}, {0x1d8, 0xff00ff0}, {0x1d9, 0xee00ee0}, {0x1da, 0xcc00cc0}, {0x1db, 0x8800880}, {0x1dc, 0x7fe07fe0}, {0x1dd, 0x6ec06ec0}, {0x1de, 0xccc0ccc0}, {0x1df, 0x88808880}, {0x1e0, 0x7700ff00ee}, {0x1e1, 0x6600ee00cc}, {0x1e2, 0xcc00cc00cc}, {0x1e3, 0x8800880088}, {0x1e4, 0x7000f000e0}, {0x1e5, 0x6000e000c0}, {0x1e6, 0xc000c000c0}, {0x1e7, 0x8000800080}, {0x1e8, 0x7700ff00ee0}, {0x1e9, 0x6600ee00cc0}, {0x1ea, 0xcc00cc00cc0}, {0x1eb, 0x88008800880}, {0x1ec, 0x77007fe00ee0}, {0x1ed, 0x66006ec00cc0}, {0x1ee, 0xcc00ccc00cc0}, {0x1ef, 0x880088800880}, {0x1f0, 0x33007700ee00cc}, {0x1f1, 0x6600ee00ee00cc}, {0x1f2, 0xcc00cc00cc00cc}, {0x1f3, 0x88008800880088}, {0x1f4, 0x30007000e000c0}, {0x1f5, 0x6000e000e000c0}, {0x1f6, 0xc000c000c000c0}, {0x1f7, 0x80008000800080}, {0x1f8, 0x33007700ee00cc0}, {0x1f9, 0x6600ee00ee00cc0}, {0x1fa, 0xcc00cc00cc00cc0}, {0x1fb, 0x880088008800880}, {0x1fc, 0x330077606ee00cc0}, {0x1fd, 0x66006ec06ec00cc0}, {0x1fe, 0xcc00ccc0ccc00cc0}, {0x1ff, 0x8800888088800880}, {0x200, 0x111}, {0x201, 0x333}, {0x202, 0x376}, {0x203, 0x7fe}, {0x204, 0x110}, {0x205, 0x330}, {0x206, 0x770}, {0x207, 0xff0}, {0x208, 0x100}, {0x209, 0x300}, {0x20a, 0x700}, {0x20b, 0xf00}, {0x20c, 0x1100}, {0x20d, 0x3300}, {0x20e, 0x7700}, {0x20f, 0xff00}, {0x210, 0x1110111}, {0x211, 0x3330333}, {0x212, 0x3760376}, {0x213, 0x7fe07fe}, {0x214, 0x1100110}, {0x215, 0x3300330}, {0x216, 0x7700770}, {0x217, 0xff00ff0}, {0x218, 0x1000100}, {0x219, 0x3000300}, {0x21a, 0x7000700}, {0x21b, 0xf000f00}, {0x21c, 0x11001100}, {0x455, 0x220000}, {0x456, 0x660000}, {0x457, 0xee0000}, {0x458, 0x3330000}, {0x459, 0x2220000}, {0x45a, 0x6660000}, {0x45b, 0xce60000}, {0x45c, 0x33330000}, {0x45d, 0x22220000}, {0x45e, 0x66660000}, {0x45f, 0xcee60000}, {0x460, 0x300030000}, {0x461, 0x200020000}, {0x462, 0x600060000}, {0x463, 0xe000e0000}, {0x464, 0x3300330000}, {0x465, 0x2200220000}, {0x466, 0x6600660000}, {0x467, 0xee00ee0000}, {0x468, 0x33303330000}, {0x469, 0x22202220000}, {0x46a, 0x66606660000}, {0x46b, 0xce60ce60000}, {0x46c, 0x333333330000}, {0x46d, 0x222222220000}, {0x46e, 0x666666660000}, {0x46f, 0xcee6cee60000}, {0x470, 0x3000300030000}, {0x471, 0x2000200020000}, {0x472, 0x6000600060000}, {0x473, 0xc000e00060000}, {0x474, 0x33003300330000}, {0x475, 0x22002200220000}, {0x476, 0x66006600660000}, {0x477, 0xcc00ee00660000}, {0x478, 0x330033300330000}, {0x479, 0x220022200220000}, {0x47a, 0x660066600660000}, {0x47b, 0xcc00ce600660000}, {0x47c, 0x3330333303330000}, {0x47d, 0x2220222202220000}, {0x47e, 0x6660666606660000}, {0x47f, 0xccc0cee606660000}, {0x480, 0x70007}, {0x481, 0x60006}, {0x482, 0x40004}, {0x483, 0xc000c}, {0x484, 0x770077}, {0x485, 0x660066}, {0x486, 0x440044}, {0x487, 0xcc00cc}, {0x488, 0x3760376}, {0x489, 0x6660666}, {0x48a, 0x4440444}, {0x48b, 0xccc0ccc}, {0x48c, 0x37763776}, {0x48d, 0x66666666}, {0x48e, 0x44444444}, {0x48f, 0xcccccccc}, {0x490, 0x70000}, {0x491, 0x60000}, {0x492, 0x40000}, {0x493, 0xc0000}, {0x494, 0x770000}, {0x495, 0x660000}, {0x496, 0x440000}, {0x497, 0xcc0000}, {0x498, 0x3760000}, {0x499, 0x6660000}, {0x49a, 0x4440000}, {0x49b, 0xccc0000}, {0x49c, 0x37760000}, {0x49d, 0x66660000}, {0x49e, 0x44440000}, {0x49f, 0xcccc0000}, {0x4a0, 0x700070000}, {0x4a1, 0x600060000}, {0x4a2, 0x400040000}, {0x4a3, 0xc000c0000}, {0x4a4, 0x7700770000}, {0x4a5, 0x6600660000}, {0x4a6, 0x4400440000}, {0x4a7, 0xcc00cc0000}, {0x4a8, 0x37603760000}, {0x4a9, 0x66606660000}, {0x4aa, 0x44404440000}, {0x4ab, 0xccc0ccc0000}, {0x4ac, 0x377637760000}, {0x4ad, 0x666666660000}, {0x4ae, 0x444444440000}, {0x4af, 0xcccccccc0000}, {0x4b0, 0x3000700060000}, {0x4b1, 0x6000600060000}, {0x4b2, 0x4000400040000}, {0x4b3, 0xc000c000c0000}, {0x4b4, 0x33007700660000}, {0x4b5, 0x66006600660000}, {0x4b6, 0x44004400440000}, {0x4b7, 0xcc00cc00cc0000}, {0x4b8, 0x330037600660000}, {0x4b9, 0x660066600660000}, {0x4ba, 0x440044400440000}, {0x4bb, 0xcc00ccc00cc0000}, {0x4bc, 0x3330377606660000}, {0x4bd, 0x6660666606660000}, {0x4be, 0x4440444404440000}, {0x4bf, 0xccc0cccc0ccc0000}, {0x4c0, 0xf000f}, {0x4c1, 0xe000e}, {0x4c2, 0xc000c}, {0x4c3, 0x80008}, {0x4c4, 0xff00ff}, {0x4c5, 0xee00ee}, {0x4c6, 0xcc00cc}, {0x4c7, 0x880088}, {0x4c8, 0x7fe07fe}, {0x4c9, 0x6ec06ec}, {0x4ca, 0xccc0ccc}, {0x4cb, 0x8880888}, {0x4cc, 0x37ec37ec}, {0x4cd, 0x6eec6eec}, {0x4ce, 0xcccccccc}, {0x4cf, 0x88888888}, {0x4d0, 0xf0000}, {0x4d1, 0xe0000}, {0x4d2, 0xc0000}, {0x4d3, 0x80000}, {0x4d4, 0xff0000}, {0x4d5, 0xee0000}, {0x4d6, 0xcc0000}, {0x4d7, 0x880000}, {0x4d8, 0x7fe0000}, {0x4d9, 0x6ec0000}, {0x4da, 0xccc0000}, {0x4db, 0x8880000}, {0x4dc, 0x37ec0000}, {0x4dd, 0x6eec0000}, {0x4de, 0xcccc0000}, {0x4df, 0x88880000}, {0x4e0, 0xf000f0000}, {0x4e1, 0xe000e0000}, {0x4e2, 0xc000c0000}, {0x4e3, 0x800080000}, {0x4e4, 0xff00ff0000}, {0x4e5, 0xee00ee0000}, {0x4e6, 0xcc00cc0000}, {0x4e7, 0x8800880000}, {0x4e8, 0x7fe07fe0000}, {0x4e9, 0x6ec06ec0000}, {0x4ea, 0xccc0ccc0000}, {0x4eb, 0x88808880000}, {0x4ec, 0x37ec37ec0000}, {0x4ed, 0x6eec6eec0000}, {0x4ee, 0xcccccccc0000}, {0x4ef, 0x888888880000}, {0x4f0, 0x7000f000e0000}, {0x4f1, 0x6000e000c0000}, {0x4f2, 0xc000c000c0000}, {0x4f3, 0x8000800080000}, {0x4f4, 0x7700ff00ee0000}, {0x4f5, 0x6600ee00cc0000}, {0x4f6, 0xcc00cc00cc0000}, {0x4f7, 0x88008800880000}, {0x4f8, 0x77007fe00ee0000}, {0x4f9, 0x66006ec00cc0000}, {0x4fa, 0xcc00ccc00cc0000}, {0x4fb, 0x880088800880000}, {0x4fc, 0x376037ec06ec0000}, {0x4fd, 0x66606eec0ccc0000}, {0x4fe, 0xccc0cccc0ccc0000}, {0x4ff, 0x8880888808880000}, {0x500, 0x110011}, {0x501, 0x330033}, {0x502, 0x770077}, {0x503, 0xff00ff}, {0x504, 0x100010}, {0x505, 0x300030}, {0x506, 0x700070}, {0x507, 0xf000f0}, {0x508, 0x1100110}, {0x509, 0x3300330}, {0x50a, 0x7700770}, {0x50b, 0xff00ff0}, {0x50c, 0x11101110}, {0x50d, 0x33303330}, {0x50e, 0x67306730}, {0x50f, 0xef70ef70}, {0x510, 0x110000}, {0x511, 0x330000}, {0x512, 0x770000}, {0x513, 0xff0000}, {0x514, 0x100000}, {0x515, 0x300000}, {0x516, 0x700000}, {0x517, 0xf00000}, {0x518, 0x1100000}, {0x519, 0x3300000}, {0x51a, 0x7700000}, {0x51b, 0xff00000}, {0x51c, 0x11100000}, {0x51d, 0x33300000}, {0x51e, 0x67300000}, {0x51f, 0xef700000}, {0x520, 0x1100110000}, {0x521, 0x3300330000}, {0x522, 0x7700770000}, {0x523, 0xff00ff0000}, {0x524, 0x1000100000}, {0x525, 0x3000300000}, {0x526, 0x7000700000}, {0x527, 0xf000f00000}, {0x528, 0x11001100000}, {0x529, 0x33003300000}, {0x52a, 0x77007700000}, {0x52b, 0xff00ff00000}, {0x52c, 0x111011100000}, {0x52d, 0x333033300000}, {0x52e, 0x673067300000}, {0x52f, 0xef70ef700000}, {0x530, 0x11001100110000}, {0x531, 0x33003300330000}, {0x532, 0x66007700330000}, {0x533, 0xee00ff00770000}, {0x534, 0x10001000100000}, {0x535, 0x30003000300000}, {0x536, 0x60007000300000}, {0x537, 0xe000f000700000}, {0x538, 0x110011001100000}, {0x539, 0x330033003300000}, {0x53a, 0x660077003300000}, {0x53b, 0xee00ff007700000}, {0x53c, 0x1100111001100000}, {0x53d, 0x3300333003300000}, {0x53e, 0x6600673003300000}, {0x53f, 0xee00ef7007700000}, {0x540, 0x330033}, {0x541, 0x220022}, {0x542, 0x660066}, {0x543, 0xee00ee}, {0x544, 0x300030}, {0x545, 0x200020}, {0x546, 0x600060}, {0x547, 0xe000e0}, {0x548, 0x3300330}, {0x549, 0x2200220}, {0x54a, 0x6600660}, {0x54b, 0xee00ee0}, {0x54c, 0x33303330}, {0x54d, 0x22202220}, {0x54e, 0x66606660}, {0x54f, 0xce60ce60}, {0x550, 0x330000}, {0x551, 0x220000}, {0x552, 0x660000}, {0x553, 0xee0000}, {0x554, 0x300000}, {0x555, 0x200000}, {0x556, 0x600000}, {0x557, 0xe00000}, {0x558, 0x3300000}, {0x559, 0x2200000}, {0x55a, 0x6600000}, {0x55b, 0xee00000}, {0x55c, 0x33300000}, {0x55d, 0x22200000}, {0x55e, 0x66600000}, {0x55f, 0xce600000}, {0x560, 0x3300330000}, {0x561, 0x2200220000}, {0x562, 0x6600660000}, {0x563, 0xee00ee0000}, {0x564, 0x3000300000}, {0x565, 0x2000200000}, {0x566, 0x6000600000}, {0x567, 0xe000e00000}, {0x568, 0x33003300000}, {0x569, 0x22002200000}, {0x56a, 0x66006600000}, {0x56b, 0xee00ee00000}, {0x56c, 0x333033300000}, {0x56d, 0x222022200000}, {0x56e, 0x666066600000}, {0x56f, 0xce60ce600000}, {0x570, 0x33003300330000}, {0x571, 0x22002200220000}, {0x572, 0x66006600660000}, {0x573, 0xcc00ee00660000}, {0x574, 0x30003000300000}, {0x575, 0x20002000200000}, {0x576, 0x60006000600000}, {0x577, 0xc000e000600000}, {0x578, 0x330033003300000}, {0x579, 0x220022002200000}, {0x57a, 0x660066006600000}, {0x57b, 0xcc00ee006600000}, {0x57c, 0x3300333003300000}, {0x57d, 0x2200222002200000}, {0x57e, 0x6600666006600000}, {0x57f, 0xcc00ce6006600000}, {0x580, 0x770077}, {0x581, 0x660066}, {0x582, 0x440044}, {0x583, 0xcc00cc}, {0x584, 0x700070}, {0x585, 0x600060}, {0x586, 0x400040}, {0x587, 0xc000c0}, {0x588, 0x7700770}, {0x589, 0x6600660}, {0x58a, 0x4400440}, {0x58b, 0xcc00cc0}, {0x58c, 0x37603760}, {0x58d, 0x66606660}, {0x58e, 0x44404440}, {0x58f, 0xccc0ccc0}, {0x590, 0x770000}, {0x591, 0x660000}, {0x592, 0x440000}, {0x593, 0xcc0000}, {0x594, 0x700000}, {0x595, 0x600000}, {0x596, 0x400000}, {0x597, 0xc00000}, {0x598, 0x7700000}, {0x599, 0x6600000}, {0x59a, 0x4400000}, {0x59b, 0xcc00000}, {0x59c, 0x37600000}, {0x59d, 0x66600000}, {0x59e, 0x44400000}, {0x59f, 0xccc00000}, {0x5a0, 0x7700770000}, {0x5a1, 0x6600660000}, {0x5a2, 0x4400440000}, {0x5a3, 0xcc00cc0000}, {0x5a4, 0x7000700000}, {0x5a5, 0x6000600000}, {0x5a6, 0x4000400000}, {0x5a7, 0xc000c00000}, {0x5a8, 0x77007700000}, {0x5a9, 0x66006600000}, {0x5aa, 0x44004400000}, {0x5ab, 0xcc00cc00000}, {0x5ac, 0x376037600000}, {0x5ad, 0x666066600000}, {0x5ae, 0x444044400000}, {0x5af, 0xccc0ccc00000}, {0x5b0, 0x33007700660000}, {0x5b1, 0x66006600660000}, {0x5b2, 0x44004400440000}, {0x5b3, 0xcc00cc00cc0000}, {0x5b4, 0x30007000600000}, {0x5b5, 0x60006000600000}, {0x5b6, 0x40004000400000}, {0x5b7, 0xc000c000c00000}, {0x5b8, 0x330077006600000}, {0x5b9, 0x660066006600000}, {0x5ba, 0x440044004400000}, {0x5bb, 0xcc00cc00cc00000}, {0x5bc, 0x3300376006600000}, {0x5bd, 0x6600666006600000}, {0x5be, 0x4400444004400000}, {0x5bf, 0xcc00ccc00cc00000}, {0x5c0, 0xff00ff}, {0x5c1, 0xee00ee}, {0x5c2, 0xcc00cc}, {0x5c3, 0x880088}, {0x5c4, 0xf000f0}, {0x5c5, 0xe000e0}, {0x5c6, 0xc000c0}, {0x5c7, 0x800080}, {0x5c8, 0xff00ff0}, {0x5c9, 0xee00ee0}, {0x5ca, 0xcc00cc0}, {0x5cb, 0x8800880}, {0x5cc, 0x7fe07fe0}, {0x5cd, 0x6ec06ec0}, {0x5ce, 0xccc0ccc0}, {0x5cf, 0x88808880}, {0x5d0, 0xff0000}, {0x5d1, 0xee0000}, {0x5d2, 0xcc0000}, {0x5d3, 0x880000}, {0x5d4, 0xf00000}, {0x5d5, 0xe00000}, {0x5d6, 0xc00000}, {0x5d7, 0x800000}, {0x5d8, 0xff00000}, {0x5d9, 0xee00000}, {0x5da, 0xcc00000}, {0x5db, 0x8800000}, {0x5dc, 0x7fe00000}, {0x5dd, 0x6ec00000}, {0x5de, 0xccc00000}, {0x5df, 0x88800000}, {0x5e0, 0xff00ff0000}, {0x5e1, 0xee00ee0000}, {0x5e2, 0xcc00cc0000}, {0x5e3, 0x8800880000}, {0x5e4, 0xf000f00000}, {0x5e5, 0xe000e00000}, {0x5e6, 0xc000c00000}, {0x5e7, 0x8000800000}, {0x5e8, 0xff00ff00000}, {0x5e9, 0xee00ee00000}, {0x5ea, 0xcc00cc00000}, {0x5eb, 0x88008800000}, {0x5ec, 0x7fe07fe00000}, {0x5ed, 0x6ec06ec00000}, {0x5ee, 0xccc0ccc00000}, {0x5ef, 0x888088800000}, {0x5f0, 0x7700ff00ee0000}, {0x5f1, 0x6600ee00cc0000}, {0x5f2, 0xcc00cc00cc0000}, {0x5f3, 0x88008800880000}, {0x5f4, 0x7000f000e00000}, {0x5f5, 0x6000e000c00000}, {0x5f6, 0xc000c000c00000}, {0x5f7, 0x80008000800000}, {0x5f8, 0x7700ff00ee00000}, {0x5f9, 0x6600ee00cc00000}, {0x5fa, 0xcc00cc00cc00000}, {0x5fb, 0x880088008800000}, {0x5fc, 0x77007fe00ee00000}, {0x5fd, 0x66006ec00cc00000}, {0x5fe, 0xcc00ccc00cc00000}, {0x5ff, 0x8800888008800000}, {0x600, 0x1110111}, {0x601, 0x3330333}, {0x602, 0x3760376}, {0x603, 0x7fe07fe}, {0x604, 0x1100110}, {0x605, 0x3300330}, {0x606, 0x7700770}, {0x607, 0xff00ff0}, {0x608, 0x1000100}, {0x609, 0x3000300}, {0x60a, 0x7000700}, {0x60b, 0xf000f00}, {0x60c, 0x11001100}, {0x60d, 0x33003300}, {0x60e, 0x77007700}, {0x60f, 0xff00ff00}, {0x610, 0x1110000}, {0x611, 0x3330000}, {0x612, 0x3760000}, {0x613, 0x7fe0000}, {0x614, 0x1100000}, {0x615, 0x3300000}, {0x616, 0x7700000}, {0x617, 0xff00000}, {0x618, 0x1000000}, {0x619, 0x3000000}, {0x61a, 0x7000000}, {0x61b, 0xf000000}, {0x61c, 0x11000000}, {0x61d, 0x33000000}, {0x61e, 0x77000000}, {0x61f, 0xff000000}, {0x620, 0x11101110000}, {0x621, 0x33303330000}, {0x622, 0x37603760000}, {0x623, 0x7fe07fe0000}, {0x624, 0x11001100000}, {0x625, 0x33003300000}, {0x626, 0x77007700000}, {0x627, 0xff00ff00000}, {0x628, 0x10001000000}, {0x629, 0x30003000000}, {0x62a, 0x70007000000}, {0x62b, 0xf000f000000}, {0x62c, 0x110011000000}, {0x62d, 0x330033000000}, {0x62e, 0x770077000000}, {0x62f, 0xff00ff000000}, {0x630, 0x11011101100000}, {0x631, 0x33033303300000}, {0x632, 0x66037603300000}, {0x633, 0xee07fe07700000}, {0x634, 0x110011001100000}, {0x635, 0x330033003300000}, {0x636, 0x660077003300000}, {0x637, 0xee00ff007700000}, {0x638, 0x100010001000000}, {0x639, 0x300030003000000}, {0x63a, 0x600070003000000}, {0x63b, 0xe000f0007000000}, {0x63c, 0x1100110011000000}, {0x63d, 0x3300330033000000}, {0x63e, 0x6600770033000000}, {0x63f, 0xee00ff0077000000}, {0x640, 0x3330333}, {0x641, 0x2220222}, {0x642, 0x6660666}, {0x643, 0x6ec06ec}, {0x644, 0x3300330}, {0x645, 0x2200220}, {0x646, 0x6600660}, {0x647, 0xee00ee0}, {0x648, 0x3000300}, {0x649, 0x2000200}, {0x64a, 0x6000600}, {0x64b, 0xe000e00}, {0x64c, 0x33003300}, {0x64d, 0x22002200}, {0x64e, 0x66006600}, {0x64f, 0xee00ee00}, {0x650, 0x3330000}, {0x651, 0x2220000}, {0x652, 0x6660000}, {0x653, 0x6ec0000}, {0x654, 0x3300000}, {0x655, 0x2200000}, {0x656, 0x6600000}, {0x657, 0xee00000}, {0x658, 0x3000000}, {0x659, 0x2000000}, {0x65a, 0x6000000}, {0x65b, 0xe000000}, {0x65c, 0x33000000}, {0x65d, 0x22000000}, {0x65e, 0x66000000}, {0x65f, 0xee000000}, {0x660, 0x33303330000}, {0x661, 0x22202220000}, {0x662, 0x66606660000}, {0x663, 0x6ec06ec0000}, {0x664, 0x33003300000}, {0x665, 0x22002200000}, {0x666, 0x66006600000}, {0x667, 0xee00ee00000}, {0x668, 0x30003000000}, {0x669, 0x20002000000}, {0x66a, 0x60006000000}, {0x66b, 0xe000e000000}, {0x66c, 0x330033000000}, {0x66d, 0x220022000000}, {0x66e, 0x660066000000}, {0x66f, 0xee00ee000000}, {0x670, 0x33033303300000}, {0x671, 0x22022202200000}, {0x672, 0x66066606600000}, {0x673, 0xcc06ec06600000}, {0x674, 0x330033003300000}, {0x675, 0x220022002200000}, {0x676, 0x660066006600000}, {0x677, 0xcc00ee006600000}, {0x678, 0x300030003000000}, {0x679, 0x200020002000000}, {0x67a, 0x600060006000000}, {0x67b, 0xc000e0006000000}, {0x67c, 0x3300330033000000}, {0x67d, 0x2200220022000000}, {0x67e, 0x6600660066000000}, {0x67f, 0xcc00ee0066000000}, {0x680, 0x6730673}, {0x681, 0x6660666}, {0x682, 0x4440444}, {0x683, 0xccc0ccc}, {0x684, 0x7700770}, {0x685, 0x6600660}, {0x686, 0x4400440}, {0x687, 0xcc00cc0}, {0x688, 0x7000700}, {0x689, 0x6000600}, {0x68a, 0x4000400}, {0x68b, 0xc000c00}, {0x68c, 0x77007700}, {0x68d, 0x66006600}, {0x68e, 0x44004400}, {0x68f, 0xcc00cc00}, {0x690, 0x6730000}, {0x691, 0x6660000}, {0x692, 0x4440000}, {0x693, 0xccc0000}, {0x694, 0x7700000}, {0x695, 0x6600000}, {0x696, 0x4400000}, {0x697, 0xcc00000}, {0x698, 0x7000000}, {0x699, 0x6000000}, {0x69a, 0x4000000}, {0x69b, 0xc000000}, {0x69c, 0x77000000}, {0x69d, 0x66000000}, {0x69e, 0x44000000}, {0x69f, 0xcc000000}, {0x6a0, 0x67306730000}, {0x6a1, 0x66606660000}, {0x6a2, 0x44404440000}, {0x6a3, 0xccc0ccc0000}, {0x6a4, 0x77007700000}, {0x6a5, 0x66006600000}, {0x6a6, 0x44004400000}, {0x6a7, 0xcc00cc00000}, {0x6a8, 0x70007000000}, {0x6a9, 0x60006000000}, {0x6aa, 0x40004000000}, {0x6ab, 0xc000c000000}, {0x6ac, 0x770077000000}, {0x6ad, 0x660066000000}, {0x6ae, 0x440044000000}, {0x6af, 0xcc00cc000000}, {0x6b0, 0x33067306600000}, {0x6b1, 0x66066606600000}, {0x6b2, 0x44044404400000}, {0x6b3, 0xcc0ccc0cc00000}, {0x6b4, 0x330077006600000}, {0x6b5, 0x660066006600000}, {0x6b6, 0x440044004400000}, {0x6b7, 0xcc00cc00cc00000}, {0x6b8, 0x300070006000000}, {0x6b9, 0x600060006000000}, {0x6ba, 0x400040004000000}, {0x6bb, 0xc000c000c000000}, {0x6bc, 0x3300770066000000}, {0x6bd, 0x6600660066000000}, {0x6be, 0x4400440044000000}, {0x6bf, 0xcc00cc00cc000000}, {0x6c0, 0xef70ef7}, {0x6c1, 0xce60ce6}, {0x6c2, 0xccc0ccc}, {0x6c3, 0x8880888}, {0x6c4, 0xff00ff0}, {0x6c5, 0xee00ee0}, {0x6c6, 0xcc00cc0}, {0x6c7, 0x8800880}, {0x6c8, 0xf000f00}, {0x6c9, 0xe000e00}, {0x6ca, 0xc000c00}, {0x6cb, 0x8000800}, {0x6cc, 0xff00ff00}, {0x6cd, 0xee00ee00}, {0x6ce, 0xcc00cc00}, {0x6cf, 0x88008800}, {0x6d0, 0xef70000}, {0x6d1, 0xce60000}, {0x6d2, 0xccc0000}, {0x6d3, 0x8880000}, {0x6d4, 0xff00000}, {0x6d5, 0xee00000}, {0x6d6, 0xcc00000}, {0x6d7, 0x8800000}, {0x6d8, 0xf000000}, {0x6d9, 0xe000000}, {0x6da, 0xc000000}, {0x6db, 0x8000000}, {0x6dc, 0xff000000}, {0x6dd, 0xee000000}, {0x6de, 0xcc000000}, {0x6df, 0x88000000}, {0x6e0, 0xef70ef70000}, {0x6e1, 0xce60ce60000}, {0x6e2, 0xccc0ccc0000}, {0x6e3, 0x88808880000}, {0x6e4, 0xff00ff00000}, {0x6e5, 0xee00ee00000}, {0x6e6, 0xcc00cc00000}, {0x6e7, 0x88008800000}, {0x6e8, 0xf000f000000}, {0x6e9, 0xe000e000000}, {0x6ea, 0xc000c000000}, {0x6eb, 0x80008000000}, {0x6ec, 0xff00ff000000}, {0x6ed, 0xee00ee000000}, {0x6ee, 0xcc00cc000000}, {0x6ef, 0x880088000000}, {0x6f0, 0x770ef70ee00000}, {0x6f1, 0x660ce60cc00000}, {0x6f2, 0xcc0ccc0cc00000}, {0x6f3, 0x88088808800000}, {0x6f4, 0x7700ff00ee00000}, {0x6f5, 0x6600ee00cc00000}, {0x6f6, 0xcc00cc00cc00000}, {0x6f7, 0x880088008800000}, {0x6f8, 0x7000f000e000000}, {0x6f9, 0x6000e000c000000}, {0x6fa, 0xc000c000c000000}, {0x6fb, 0x800080008000000}, {0x6fc, 0x7700ff00ee000000}, {0x6fd, 0x6600ee00cc000000}, {0x6fe, 0xcc00cc00cc000000}, {0x6ff, 0x8800880088000000}, {0x700, 0x11111111}, {0x701, 0x33333333}, {0x702, 0x37763776}, {0x703, 0x37ec37ec}, {0x704, 0x11101110}, {0x705, 0x33303330}, {0x706, 0x37603760}, {0x707, 0x7fe07fe0}, {0x708, 0x11001100}, {0x709, 0x33003300}, {0x70a, 0x77007700}, {0x70b, 0xff00ff00}, {0x70c, 0x10001000}, {0x70d, 0x30003000}, {0x70e, 0x70007000}, {0x70f, 0xf000f000}, {0x710, 0x11110000}, {0x711, 0x33330000}, {0x712, 0x37760000}, {0x713, 0x37ec0000}, {0x714, 0x11100000}, {0x715, 0x33300000}, {0x716, 0x37600000}, {0x717, 0x7fe00000}, {0x718, 0x11000000}, {0x719, 0x33000000}, {0x71a, 0x77000000}, {0x71b, 0xff000000}, {0x71c, 0x10000000}, {0x71d, 0x30000000}, {0x71e, 0x70000000}, {0x71f, 0xf0000000}, {0x720, 0x111111110000}, {0x721, 0x333333330000}, {0x722, 0x377637760000}, {0x723, 0x37ec37ec0000}, {0x724, 0x111011100000}, {0x725, 0x333033300000}, {0x726, 0x376037600000}, {0x727, 0x7fe07fe00000}, {0x728, 0x110011000000}, {0x729, 0x330033000000}, {0x72a, 0x770077000000}, {0x72b, 0xff00ff000000}, {0x72c, 0x100010000000}, {0x72d, 0x300030000000}, {0x72e, 0x700070000000}, {0x72f, 0xf000f0000000}, {0x730, 0x111111111100000}, {0x731, 0x333333333300000}, {0x732, 0x666377633300000}, {0x733, 0x6ec37ec37600000}, {0x734, 0x110111011000000}, {0x735, 0x330333033000000}, {0x736, 0x660376033000000}, {0x737, 0xee07fe077000000}, {0x738, 0x1100110011000000}, {0x739, 0x3300330033000000}, {0x73a, 0x6600770033000000}, {0x73b, 0xee00ff0077000000}, {0x73c, 0x1000100010000000}, {0x73d, 0x3000300030000000}, {0x73e, 0x6000700030000000}, {0x73f, 0xe000f00070000000}, {0x740, 0x33333333}, {0x741, 0x22222222}, {0x742, 0x66666666}, {0x743, 0x6eec6eec}, {0x744, 0x33303330}, {0x745, 0x22202220}, {0x746, 0x66606660}, {0x747, 0x6ec06ec0}, {0x748, 0x33003300}, {0x749, 0x22002200}, {0x74a, 0x66006600}, {0x74b, 0xee00ee00}, {0x74c, 0x30003000}, {0x74d, 0x20002000}, {0x74e, 0x60006000}, {0x74f, 0xe000e000}, {0x750, 0x33330000}, {0x751, 0x22220000}, {0x752, 0x66660000}, {0x753, 0x6eec0000}, {0x754, 0x33300000}, {0x755, 0x22200000}, {0x756, 0x66600000}, {0x757, 0x6ec00000}, {0x758, 0x33000000}, {0x759, 0x22000000}, {0x75a, 0x66000000}, {0x75b, 0xee000000}, {0x75c, 0x30000000}, {0x75d, 0x20000000}, {0x75e, 0x60000000}, {0x75f, 0xe0000000}, {0x760, 0x333333330000}, {0x761, 0x222222220000}, {0x762, 0x666666660000}, {0x763, 0x6eec6eec0000}, {0x764, 0x333033300000}, {0x765, 0x222022200000}, {0x766, 0x666066600000}, {0x767, 0x6ec06ec00000}, {0x768, 0x330033000000}, {0x769, 0x220022000000}, {0x76a, 0x660066000000}, {0x76b, 0xee00ee000000}, {0x76c, 0x300030000000}, {0x76d, 0x200020000000}, {0x76e, 0x600060000000}, {0x76f, 0xe000e0000000}, {0x770, 0x333333333300000}, {0x771, 0x222222222200000}, {0x772, 0x666666666600000}, {0x773, 0xccc6eec66600000}, {0x774, 0x330333033000000}, {0x775, 0x220222022000000}, {0x776, 0x660666066000000}, {0x777, 0xcc06ec066000000}, {0x778, 0x3300330033000000}, {0x779, 0x2200220022000000}, {0x77a, 0x6600660066000000}, {0x77b, 0xcc00ee0066000000}, {0x77c, 0x3000300030000000}, {0x77d, 0x2000200020000000}, {0x77e, 0x6000600060000000}, {0x77f, 0xc000e00060000000}, {0x780, 0x67736773}, {0x781, 0x66666666}, {0x782, 0x44444444}, {0x783, 0xcccccccc}, {0x784, 0x67306730}, {0x785, 0x66606660}, {0x786, 0x44404440}, {0x787, 0xccc0ccc0}, {0x788, 0x77007700}, {0x789, 0x66006600}, {0x78a, 0x44004400}, {0x78b, 0xcc00cc00}, {0x78c, 0x70007000}, {0x78d, 0x60006000}, {0x78e, 0x40004000}, {0x78f, 0xc000c000}, {0x790, 0x67730000}, {0x791, 0x66660000}, {0x792, 0x44440000}, {0x793, 0xcccc0000}, {0x794, 0x67300000}, {0x795, 0x66600000}, {0x796, 0x44400000}, {0x797, 0xccc00000}, {0x798, 0x77000000}, {0x799, 0x66000000}, {0x79a, 0x44000000}, {0x79b, 0xcc000000}, {0x79c, 0x70000000}, {0x79d, 0x60000000}, {0x79e, 0x40000000}, {0x79f, 0xc0000000}, {0x7a0, 0x677367730000}, {0x7a1, 0x666666660000}, {0x7a2, 0x444444440000}, {0x7a3, 0xcccccccc0000}, {0x7a4, 0x673067300000}, {0x7a5, 0x666066600000}, {0x7a6, 0x444044400000}, {0x7a7, 0xccc0ccc00000}, {0x7a8, 0x770077000000}, {0x7a9, 0x660066000000}, {0x7aa, 0x440044000000}, {0x7ab, 0xcc00cc000000}, {0x7ac, 0x700070000000}, {0x7ad, 0x600060000000}, {0x7ae, 0x400040000000}, {0x7af, 0xc000c0000000}, {0x7b0, 0x333677366600000}, {0x7b1, 0x666666666600000}, {0x7b2, 0x444444444400000}, {0x7b3, 0xcccccccccc00000}, {0x7b4, 0x330673066000000}, {0x7b5, 0x660666066000000}, {0x7b6, 0x440444044000000}, {0x7b7, 0xcc0ccc0cc000000}, {0x7b8, 0x3300770066000000}, {0x7b9, 0x6600660066000000}, {0x7ba, 0x4400440044000000}, {0x7bb, 0xcc00cc00cc000000}, {0x7bc, 0x3000700060000000}, {0x7bd, 0x6000600060000000}, {0x7be, 0x4000400040000000}, {0x7bf, 0xc000c000c0000000}, {0x7c0, 0xce73ce73}, {0x7c1, 0xcee6cee6}, {0x7c2, 0xcccccccc}, {0x7c3, 0x88888888}, {0x7c4, 0xef70ef70}, {0x7c5, 0xce60ce60}, {0x7c6, 0xccc0ccc0}, {0x7c7, 0x88808880}, {0x7c8, 0xff00ff00}, {0x7c9, 0xee00ee00}, {0x7ca, 0xcc00cc00}, {0x7cb, 0x88008800}, {0x7cc, 0xf000f000}, {0x7cd, 0xe000e000}, {0x7ce, 0xc000c000}, {0x7cf, 0x80008000}, {0x7d0, 0xce730000}, {0x7d1, 0xcee60000}, {0x7d2, 0xcccc0000}, {0x7d3, 0x88880000}, {0x7d4, 0xef700000}, {0x7d5, 0xce600000}, {0x7d6, 0xccc00000}, {0x7d7, 0x88800000}, {0x7d8, 0xff000000}, {0x7d9, 0xee000000}, {0x7da, 0xcc000000}, {0x7db, 0x88000000}, {0x7dc, 0xf0000000}, {0x7dd, 0xe0000000}, {0x7de, 0xc0000000}, {0x7df, 0x80000000}, {0x7e0, 0xce73ce730000}, {0x7e1, 0xcee6cee60000}, {0x7e2, 0xcccccccc0000}, {0x7e3, 0x888888880000}, {0x7e4, 0xef70ef700000}, {0x7e5, 0xce60ce600000}, {0x7e6, 0xccc0ccc00000}, {0x7e7, 0x888088800000}, {0x7e8, 0xff00ff000000}, {0x7e9, 0xee00ee000000}, {0x7ea, 0xcc00cc000000}, {0x7eb, 0x880088000000}, {0x7ec, 0xf000f0000000}, {0x7ed, 0xe000e0000000}, {0x7ee, 0xc000c0000000}, {0x7ef, 0x800080000000}, {0x7f0, 0x673ce73ce600000}, {0x7f1, 0x666cee6ccc00000}, {0x7f2, 0xcccccccccc00000}, {0x7f3, 0x888888888800000}, {0x7f4, 0x770ef70ee000000}, {0x7f5, 0x660ce60cc000000}, {0x7f6, 0xcc0ccc0cc000000}, {0x7f7, 0x880888088000000}, {0x7f8, 0x7700ff00ee000000}, {0x7f9, 0x6600ee00cc000000}, {0x7fa, 0xcc00cc00cc000000}, {0x7fb, 0x8800880088000000}, {0x7fc, 0x7000f000e0000000}, {0x7fd, 0x6000e000c0000000}, {0x7fe, 0xc000c000c0000000}, {0x7ff, 0x8000800080000000}, {0x800, 0x100010001}, {0x801, 0x300030003}, {0x802, 0x300070006}, {0x803, 0x7000f000e}, {0x804, 0x1100110011}, {0x805, 0x3300330033}, {0x806, 0x3300770066}, {0x807, 0x7700ff00ee}, {0x808, 0x1101110110}, {0x809, 0x3303330330}, {0x80a, 0x3306730660}, {0x80b, 0x770ef70ee0}, {0x80c, 0x11111111110}, {0x80d, 0x33333333330}, {0x80e, 0x33367736660}, {0x80f, 0x673ce73ce60}, {0x810, 0x100010000}, {0x811, 0x300030000}, {0x812, 0x700070000}, {0x813, 0xf000f0000}, {0x814, 0x1100110000}, {0x815, 0x3300330000}, {0x816, 0x7700770000}, {0x817, 0xff00ff0000}, {0x818, 0x11101110000}, {0x819, 0x33303330000}, {0x81a, 0x67306730000}, {0x81b, 0xef70ef70000}, {0x81c, 0x111111110000}, {0x81d, 0x333333330000}, {0x81e, 0x677367730000}, {0x81f, 0xce73ce730000}, {0x820, 0x100000000}, {0x821, 0x300000000}, {0x822, 0x700000000}, {0x823, 0xf00000000}, {0x824, 0x1100000000}, {0x825, 0x3300000000}, {0x826, 0x7700000000}, {0x827, 0xff00000000}, {0x828, 0x11100000000}, {0x829, 0x33300000000}, {0x82a, 0x67300000000}, {0x82b, 0xef700000000}, {0x82c, 0x111100000000}, {0x82d, 0x333300000000}, {0x82e, 0x677300000000}, {0x82f, 0xce7300000000}, {0x830, 0x1000100000000}, {0x831, 0x3000300000000}, {0x832, 0x7000700000000}, {0x833, 0xf000f00000000}, {0x834, 0x11001100000000}, {0x835, 0x33003300000000}, {0x836, 0x77007700000000}, {0x837, 0xff00ff00000000}, {0x838, 0x111011100000000}, {0x839, 0x333033300000000}, {0x83a, 0x673067300000000}, {0x83b, 0xef70ef700000000}, {0x83c, 0x1111111100000000}, {0x83d, 0x3333333300000000}, {0x83e, 0x6773677300000000}, {0x83f, 0xce73ce7300000000}, {0x840, 0x300030003}, {0x841, 0x200020002}, {0x842, 0x600060006}, {0x843, 0x6000e000c}, {0x844, 0x3300330033}, {0x845, 0x2200220022}, {0x846, 0x6600660066}, {0x847, 0x6600ee00cc}, {0x848, 0x3303330330}, {0x849, 0x2202220220}, {0x84a, 0x6606660660}, {0x84b, 0x660ce60cc0}, {0x84c, 0x33333333330}, {0x84d, 0x22222222220}, {0x84e, 0x66666666660}, {0x84f, 0x666cee6ccc0}, {0x850, 0x300030000}, {0x851, 0x200020000}, {0x852, 0x600060000}, {0x853, 0xe000e0000}, {0x854, 0x3300330000}, {0x855, 0x2200220000}, {0x856, 0x6600660000}, {0x857, 0xee00ee0000}, {0x858, 0x33303330000}, {0x859, 0x22202220000}, {0x85a, 0x66606660000}, {0x85b, 0xce60ce60000}, {0x85c, 0x333333330000}, {0x85d, 0x222222220000}, {0x85e, 0x666666660000}, {0x85f, 0xcee6cee60000}, {0x860, 0x300000000}, {0x861, 0x200000000}, {0x862, 0x600000000}, {0x863, 0xe00000000}, {0x864, 0x3300000000}, {0x865, 0x2200000000}, {0x866, 0x6600000000}, {0x867, 0xee00000000}, {0x868, 0x33300000000}, {0x869, 0x22200000000}, {0x86a, 0x66600000000}, {0x86b, 0xce600000000}, {0x86c, 0x333300000000}, {0x86d, 0x222200000000}, {0x86e, 0x666600000000}, {0x86f, 0xcee600000000}, {0x870, 0x3000300000000}, {0x871, 0x2000200000000}, {0x872, 0x6000600000000}, {0x873, 0xe000e00000000}, {0x874, 0x33003300000000}, {0x875, 0x22002200000000}, {0x876, 0x66006600000000}, {0x877, 0xee00ee00000000}, {0x878, 0x333033300000000}, {0x879, 0x222022200000000}, {0x87a, 0x666066600000000}, {0x87b, 0xce60ce600000000}, {0x87c, 0x3333333300000000}, {0x87d, 0x2222222200000000}, {0x87e, 0x6666666600000000}, {0x87f, 0xcee6cee600000000}, {0x880, 0x600070003}, {0x881, 0x600060006}, {0x882, 0x400040004}, {0x883, 0xc000c000c}, {0x884, 0x6600770033}, {0x885, 0x6600660066}, {0x886, 0x4400440044}, {0x887, 0xcc00cc00cc}, {0x888, 0x6603760330}, {0x889, 0x6606660660}, {0x88a, 0x4404440440}, {0x88b, 0xcc0ccc0cc0}, {0x88c, 0x66637763330}, {0x88d, 0x66666666660}, {0x88e, 0x44444444440}, {0x88f, 0xcccccccccc0}, {0x890, 0x700070000}, {0x891, 0x600060000}, {0x892, 0x400040000}, {0x893, 0xc000c0000}, {0x894, 0x7700770000}, {0x895, 0x6600660000}, {0x896, 0x4400440000}, {0x897, 0xcc00cc0000}, {0x898, 0x37603760000}, {0x899, 0x66606660000}, {0x89a, 0x44404440000}, {0x89b, 0xccc0ccc0000}, {0x89c, 0x377637760000}, {0x89d, 0x666666660000}, {0x89e, 0x444444440000}, {0x89f, 0xcccccccc0000}, {0x8a0, 0x700000000}, {0x8a1, 0x600000000}, {0x8a2, 0x400000000}, {0x8a3, 0xc00000000}, {0x8a4, 0x7700000000}, {0x8a5, 0x6600000000}, {0x8a6, 0x4400000000}, {0x8a7, 0xcc00000000}, {0x8a8, 0x37600000000}, {0x8a9, 0x66600000000}, {0x8aa, 0x44400000000}, {0x8ab, 0xccc00000000}, {0x8ac, 0x377600000000}, {0x8ad, 0x666600000000}, {0x8ae, 0x444400000000}, {0x8af, 0xcccc00000000}, {0x8b0, 0x7000700000000}, {0x8b1, 0x6000600000000}, {0x8b2, 0x4000400000000}, {0x8b3, 0xc000c00000000}, {0x8b4, 0x77007700000000}, {0x8b5, 0x66006600000000}, {0x8b6, 0x44004400000000}, {0x8b7, 0xcc00cc00000000}, {0x8b8, 0x376037600000000}, {0x8b9, 0x666066600000000}, {0x8ba, 0x444044400000000}, {0x8bb, 0xccc0ccc00000000}, {0x8bc, 0x3776377600000000}, {0x8bd, 0x6666666600000000}, {0x8be, 0x4444444400000000}, {0x8bf, 0xcccccccc00000000}, {0x8c0, 0xe000f0007}, {0x8c1, 0xc000e0006}, {0x8c2, 0xc000c000c}, {0x8c3, 0x800080008}, {0x8c4, 0xee00ff0077}, {0x8c5, 0xcc00ee0066}, {0x8c6, 0xcc00cc00cc}, {0x8c7, 0x8800880088}, {0x8c8, 0xee07fe0770}, {0x8c9, 0xcc06ec0660}, {0x8ca, 0xcc0ccc0cc0}, {0x8cb, 0x8808880880}, {0x8cc, 0x6ec37ec3760}, {0x8cd, 0xccc6eec6660}, {0x8ce, 0xcccccccccc0}, {0x8cf, 0x88888888880}, {0x8d0, 0xf000f0000}, {0x8d1, 0xe000e0000}, {0x8d2, 0xc000c0000}, {0x8d3, 0x800080000}, {0x8d4, 0xff00ff0000}, {0x8d5, 0xee00ee0000}, {0x8d6, 0xcc00cc0000}, {0x8d7, 0x8800880000}, {0x8d8, 0x7fe07fe0000}, {0x8d9, 0x6ec06ec0000}, {0x8da, 0xccc0ccc0000}, {0x8db, 0x88808880000}, {0x8dc, 0x37ec37ec0000}, {0x8dd, 0x6eec6eec0000}, {0x8de, 0xcccccccc0000}, {0x8df, 0x888888880000}, {0x8e0, 0xf00000000}, {0x8e1, 0xe00000000}, {0x8e2, 0xc00000000}, {0x8e3, 0x800000000}, {0x8e4, 0xff00000000}, {0x8e5, 0xee00000000}, {0x8e6, 0xcc00000000}, {0x8e7, 0x8800000000}, {0x8e8, 0x7fe00000000}, {0x8e9, 0x6ec00000000}, {0x8ea, 0xccc00000000}, {0x8eb, 0x88800000000}, {0x8ec, 0x37ec00000000}, {0x8ed, 0x6eec00000000}, {0x8ee, 0xcccc00000000}, {0x8ef, 0x888800000000}, {0x8f0, 0xf000f00000000}, {0x8f1, 0xe000e00000000}, {0x8f2, 0xc000c00000000}, {0x8f3, 0x8000800000000}, {0x8f4, 0xff00ff00000000}, {0x8f5, 0xee00ee00000000}, {0x8f6, 0xcc00cc00000000}, {0x8f7, 0x88008800000000}, {0x8f8, 0x7fe07fe00000000}, {0x8f9, 0x6ec06ec00000000}, {0x8fa, 0xccc0ccc00000000}, {0x8fb, 0x888088800000000}, {0x8fc, 0x37ec37ec00000000}, {0x8fd, 0x6eec6eec00000000}, {0x8fe, 0xcccccccc00000000}, {0x8ff, 0x8888888800000000}, {0x900, 0x1100110011}, {0x901, 0x3300330033}, {0x902, 0x3300770066}, {0x903, 0x7700ff00ee}, {0x904, 0x1000100010}, {0x905, 0x3000300030}, {0x906, 0x3000700060}, {0x907, 0x7000f000e0}, {0x908, 0x11001100110}, {0x909, 0x33003300330}, {0x90a, 0x33007700660}, {0x90b, 0x7700ff00ee0}, {0x90c, 0x11011101100}, {0x90d, 0x33033303300}, {0x90e, 0x33067306600}, {0x90f, 0x770ef70ee00}, {0x910, 0x1100110000}, {0x911, 0x3300330000}, {0x912, 0x7700770000}, {0x913, 0xff00ff0000}, {0x914, 0x1000100000}, {0x915, 0x3000300000}, {0x916, 0x7000700000}, {0x917, 0xf000f00000}, {0x918, 0x11001100000}, {0x919, 0x33003300000}, {0x91a, 0x77007700000}, {0x91b, 0xff00ff00000}, {0x91c, 0x111011100000}, {0x91d, 0x333033300000}, {0x91e, 0x673067300000}, {0x91f, 0xef70ef700000}, {0x920, 0x1100000000}, {0x921, 0x3300000000}, {0x922, 0x7700000000}, {0x923, 0xff00000000}, {0x924, 0x1000000000}, {0x925, 0x3000000000}, {0x926, 0x7000000000}, {0x927, 0xf000000000}, {0x928, 0x11000000000}, {0x929, 0x33000000000}, {0x92a, 0x77000000000}, {0x92b, 0xff000000000}, {0x92c, 0x111000000000}, {0x92d, 0x333000000000}, {0x92e, 0x673000000000}, {0x92f, 0xef7000000000}, {0x930, 0x11001100000000}, {0x931, 0x33003300000000}, {0x932, 0x77007700000000}, {0x933, 0xff00ff00000000}, {0x934, 0x10001000000000}
};

inline bool VWBVHAggregate::maskTest(
    const Bounds3f& bounds,
    const Ray& ray,
    const LinearVWBVHNode& node,
    const Float& t0,
    const Float& t1
) const {
    Point3f p0 = ray.o + t0 * ray.d;
    Point3f p1 = ray.o + t1 * ray.d;

    Vector3f extent = bounds.pMax - bounds.pMin;
    Vector3f inv(1.0 / extent.x, 1.0 / extent.y, 1.0 / extent.z);
    Vector3i skey, ekey;

    #pragma unroll
    for(int i=0; i<3; ++i){
        skey[i] = static_cast<int>((p0[i] - bounds.pMin[i]) * inv[i]);
        ekey[i] = static_cast<int>((p1[i] - bounds.pMin[i]) * inv[i]);
    }

    uint16_t key = (skey.x << 10) | (skey.y << 8) | (skey.z << 6) | (ekey.x << 4) | (ekey.y << 2) | (ekey.z << 0);
    
    // TODO:: if possible, comment this to optimize
    // if(raymask_lut.find(key) == raymask_lut.end()){
    //     printf("not exist raymask key: 0x%x\n", key);
    //     ErrorExit("not exist raymask key");
    // }
    bool hit = (raymask_lut[key] & node.mask) > 0;
    maskTests++;
    maskFalses += !hit;
    return hit;
}

Bounds3f VWBVHAggregate::Bounds() const {
    CHECK(nodes);
    return nodes[0].bounds;
}

pstd::optional<ShapeIntersection> VWBVHAggregate::Intersect(const Ray &ray,
                                                          Float tMax) const {
    if (!nodes)
        return {};
    pstd::optional<ShapeIntersection> si;
    Vector3f invDir(1 / ray.d.x, 1 / ray.d.y, 1 / ray.d.z);
    int dirIsNeg[3] = {int(invDir.x < 0), int(invDir.y < 0), int(invDir.z < 0)};
    // Follow ray through BVH nodes to find primitive intersections
    int      toVisitOffset = 0;
    int      nodesToVisit[64];
    int      currentNodeIndex = 0;

    int nodesVisited = 0;
    Float t0, t1;

    while (true) {
        ++nodesVisited;
        const LinearVWBVHNode *node = &nodes[currentNodeIndex];

        // Check ray against BVH node
        bool hit = node->bounds.IntersectP(ray.o, ray.d, tMax, invDir, dirIsNeg, t0, t1);
        if(hit) hit = maskTest(node->bounds, ray, *node, t0, t1);

        if (hit) {
            if (node->nPrimitives > 0) {
                // Intersect ray with primitives in leaf BVH node
                for (int i = 0; i < node->nPrimitives; ++i) {
                    // Check for intersection with primitive in BVH node
                    pstd::optional<ShapeIntersection> primSi =
                        primitives[node->primitivesOffset + i].Intersect(ray, tMax);
                    if (primSi) {
                        si = primSi;
                        tMax = si->tHit;
                    }
                }
                if (toVisitOffset == 0)
                    break;
                --toVisitOffset;
                currentNodeIndex = nodesToVisit[toVisitOffset];
            } else {
                // Put father bound on stack;
                // Put far BVH node on _nodesToVisit_ stack, advance to near node
                if (dirIsNeg[node->axis]) {
                    nodesToVisit[toVisitOffset++] = currentNodeIndex + 1;
                    currentNodeIndex = node->secondChildOffset;
                } else {
                    nodesToVisit[toVisitOffset++] = node->secondChildOffset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
            }
        } else {
            if (toVisitOffset == 0)
                break;
            --toVisitOffset;
            currentNodeIndex = nodesToVisit[toVisitOffset];
        }
    }

    bvhNodesVisited += nodesVisited;
    return si;
}

bool VWBVHAggregate::IntersectP(const Ray &ray, Float tMax) const {
    if (!nodes)
        return false;
    Vector3f invDir(1.f / ray.d.x, 1.f / ray.d.y, 1.f / ray.d.z);
    int dirIsNeg[3] = {static_cast<int>(invDir.x < 0), static_cast<int>(invDir.y < 0),
                       static_cast<int>(invDir.z < 0)};
    int toVisitOffset = 0;
    int nodesToVisit[64];
    Bounds3f nodesBounds[64];

    int      currentNodeIndex = 0;
    
    int nodesVisited = 0;
    Float t0, t1;

    while (true) {
        ++nodesVisited;
        const LinearVWBVHNode *node = &nodes[currentNodeIndex];

        bool hit = node->bounds.IntersectP(ray.o, ray.d, tMax, invDir, dirIsNeg, t0, t1);
        if(hit) hit = maskTest(node->bounds, ray, *node, t0, t1);

        if (hit) {
            // Process BVH node _node_ for traversal
            if (node->nPrimitives > 0) {
                for (int i = 0; i < node->nPrimitives; ++i) {
                    if (primitives[node->primitivesOffset + i].IntersectP(ray, tMax)) {
                        bvhNodesVisited += nodesVisited;
                        return true;
                    }
                }
                if (toVisitOffset == 0)
                    break;
                --toVisitOffset;
                currentNodeIndex = nodesToVisit[toVisitOffset];
            } else {
                if (dirIsNeg[node->axis]) {
                    nodesToVisit[toVisitOffset++] = currentNodeIndex + 1;
                    currentNodeIndex = node->secondChildOffset;
                } else {
                    nodesToVisit[toVisitOffset++] = node->secondChildOffset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
            }
        } else {
            if (toVisitOffset == 0)
                break;
            --toVisitOffset;
            currentNodeIndex = nodesToVisit[toVisitOffset];
        }
    }
    bvhNodesVisited += nodesVisited;
    return false;
}

VWBVHAggregate *VWBVHAggregate::Create(std::vector<Primitive> prims,
                                   const ParameterDictionary &parameters) {
    std::string splitMethodName = parameters.GetOneString("splitmethod", "sah");
    VWBVHAggregate::SplitMethod splitMethod;
    if (splitMethodName == "sah")
        splitMethod = VWBVHAggregate::SplitMethod::SAH;
    // else if (splitMethodName == "hlbvh")
    //     splitMethod = VWBVHAggregate::SplitMethod::HLBVH;
    // else if (splitMethodName == "middle")
    //     splitMethod = VWBVHAggregate::SplitMethod::Middle;
    // else if (splitMethodName == "equal")
    //     splitMethod = VWBVHAggregate::SplitMethod::EqualCounts;
    else {
        Warning(R"(BVH split method "%s" unknown.  Using "sah".)", splitMethodName);
        splitMethod = VWBVHAggregate::SplitMethod::SAH;
    }

    int maxPrimsInNode = parameters.GetOneInt("maxnodeprims", 4);
    return new VWBVHAggregate(std::move(prims), maxPrimsInNode, splitMethod);
}



// KdNodeToVisit Definition
struct KdNodeToVisit {
    const KdTreeNode *node;
    Float tMin, tMax;
};

// KdTreeNode Definition
struct alignas(8) KdTreeNode {
    // KdTreeNode Methods
    void InitLeaf(pstd::span<const int> primNums, std::vector<int> *primitiveIndices);

    void InitInterior(int axis, int aboveChild, Float s) {
        split = s;
        flags = axis | (aboveChild << 2);
    }

    Float SplitPos() const { return split; }
    int nPrimitives() const { return flags >> 2; }
    int SplitAxis() const { return flags & 3; }
    bool IsLeaf() const { return (flags & 3) == 3; }
    int AboveChild() const { return flags >> 2; }

    union {
        Float split;                 // Interior
        int onePrimitiveIndex;       // Leaf
        int primitiveIndicesOffset;  // Leaf
    };

  private:
    uint32_t flags;
};

// EdgeType Definition
enum class EdgeType { Start, End };

// BoundEdge Definition
struct BoundEdge {
    // BoundEdge Public Methods
    BoundEdge() {}

    BoundEdge(Float t, int primNum, bool starting) : t(t), primNum(primNum) {
        type = starting ? EdgeType::Start : EdgeType::End;
    }

    Float t;
    int primNum;
    EdgeType type;
};

STAT_PIXEL_COUNTER("Kd-Tree/Nodes visited", kdNodesVisited);

// KdTreeAggregate Method Definitions
KdTreeAggregate::KdTreeAggregate(std::vector<Primitive> p, int isectCost,
                                 int traversalCost, Float emptyBonus, int maxPrims,
                                 int maxDepth)
    : isectCost(isectCost),
      traversalCost(traversalCost),
      maxPrims(maxPrims),
      emptyBonus(emptyBonus),
      primitives(std::move(p)) {
    // Build kd-tree aggregate
    nextFreeNode = nAllocedNodes = 0;
    if (maxDepth <= 0)
        maxDepth = std::round(8 + 1.3f * Log2Int(int64_t(primitives.size())));
    // Compute bounds for kd-tree construction
    std::vector<Bounds3f> primBounds;
    primBounds.reserve(primitives.size());
    for (Primitive &prim : primitives) {
        Bounds3f b = prim.Bounds();
        bounds = Union(bounds, b);
        primBounds.push_back(b);
    }

    // Allocate working memory for kd-tree construction
    std::vector<BoundEdge> edges[3];
    for (int i = 0; i < 3; ++i)
        edges[i].resize(2 * primitives.size());

    std::vector<int> prims0(primitives.size());
    std::vector<int> prims1((maxDepth + 1) * primitives.size());

    // Initialize _primNums_ for kd-tree construction
    std::vector<int> primNums(primitives.size());
    for (size_t i = 0; i < primitives.size(); ++i)
        primNums[i] = i;

    // Start recursive construction of kd-tree
    buildTree(0, bounds, primBounds, primNums, maxDepth, edges, pstd::span<int>(prims0),
              pstd::span<int>(prims1), 0);
}

void KdTreeNode::InitLeaf(pstd::span<const int> primNums,
                          std::vector<int> *primitiveIndices) {
    flags = 3 | (primNums.size() << 2);
    // Store primitive ids for leaf node
    if (primNums.size() == 0)
        onePrimitiveIndex = 0;
    else if (primNums.size() == 1)
        onePrimitiveIndex = primNums[0];
    else {
        primitiveIndicesOffset = primitiveIndices->size();
        for (int pn : primNums)
            primitiveIndices->push_back(pn);
    }
}

void KdTreeAggregate::buildTree(int nodeNum, const Bounds3f &nodeBounds,
                                const std::vector<Bounds3f> &allPrimBounds,
                                pstd::span<const int> primNums, int depth,
                                std::vector<BoundEdge> edges[3], pstd::span<int> prims0,
                                pstd::span<int> prims1, int badRefines) {
    CHECK_EQ(nodeNum, nextFreeNode);
    // Get next free node from _nodes_ array
    if (nextFreeNode == nAllocedNodes) {
        int nNewAllocNodes = std::max(2 * nAllocedNodes, 512);
        KdTreeNode *n = new KdTreeNode[nNewAllocNodes];
        if (nAllocedNodes > 0) {
            std::memcpy(n, nodes, nAllocedNodes * sizeof(KdTreeNode));
            delete[] nodes;
        }
        nodes = n;
        nAllocedNodes = nNewAllocNodes;
    }
    ++nextFreeNode;

    // Initialize leaf node if termination criteria met
    if (primNums.size() <= maxPrims || depth == 0) {
        nodes[nodeNum].InitLeaf(primNums, &primitiveIndices);
        return;
    }

    // Initialize interior node and continue recursion
    // Choose split axis position for interior node
    int bestAxis = -1, bestOffset = -1;
    Float bestCost = Infinity, leafCost = isectCost * primNums.size();
    Float invTotalSA = 1 / nodeBounds.SurfaceArea();
    // Choose which axis to split along
    int axis = nodeBounds.MaxDimension();

    // Choose split along axis and attempt to partition primitives
    int retries = 0;
    size_t nPrimitives = primNums.size();
retrySplit:
    // Initialize edges for _axis_
    for (size_t i = 0; i < nPrimitives; ++i) {
        int pn = primNums[i];
        const Bounds3f &bounds = allPrimBounds[pn];
        edges[axis][2 * i] = BoundEdge(bounds.pMin[axis], pn, true);
        edges[axis][2 * i + 1] = BoundEdge(bounds.pMax[axis], pn, false);
    }
    // Sort _edges_ for _axis_
    std::sort(edges[axis].begin(), edges[axis].begin() + 2 * nPrimitives,
              [](const BoundEdge &e0, const BoundEdge &e1) -> bool {
                  return std::tie(e0.t, e0.type) < std::tie(e1.t, e1.type);
              });

    // Compute cost of all splits for _axis_ to find best
    int nBelow = 0, nAbove = primNums.size();
    for (size_t i = 0; i < 2 * primNums.size(); ++i) {
        if (edges[axis][i].type == EdgeType::End)
            --nAbove;
        Float edgeT = edges[axis][i].t;
        if (edgeT > nodeBounds.pMin[axis] && edgeT < nodeBounds.pMax[axis]) {
            // Compute child surface areas for split at _edgeT_
            Vector3f d = nodeBounds.pMax - nodeBounds.pMin;
            int otherAxis0 = (axis + 1) % 3, otherAxis1 = (axis + 2) % 3;
            Float belowSA =
                2 * (d[otherAxis0] * d[otherAxis1] +
                     (edgeT - nodeBounds.pMin[axis]) * (d[otherAxis0] + d[otherAxis1]));
            Float aboveSA =
                2 * (d[otherAxis0] * d[otherAxis1] +
                     (nodeBounds.pMax[axis] - edgeT) * (d[otherAxis0] + d[otherAxis1]));

            // Compute cost for split at _i_th edge
            Float pBelow = belowSA * invTotalSA, pAbove = aboveSA * invTotalSA;
            Float eb = (nAbove == 0 || nBelow == 0) ? emptyBonus : 0;
            Float cost = traversalCost +
                         isectCost * (1 - eb) * (pBelow * nBelow + pAbove * nAbove);
            // Update best split if this is lowest cost so far
            if (cost < bestCost) {
                bestCost = cost;
                bestAxis = axis;
                bestOffset = i;
            }
        }
        if (edges[axis][i].type == EdgeType::Start)
            ++nBelow;
    }
    CHECK(nBelow == nPrimitives && nAbove == 0);

    // Try to split along another axis if no good splits were found
    if (bestAxis == -1 && retries < 2) {
        ++retries;
        axis = (axis + 1) % 3;
        goto retrySplit;
    }

    // Create leaf if no good splits were found
    if (bestCost > leafCost)
        ++badRefines;
    if ((bestCost > 4 * leafCost && nPrimitives < 16) || bestAxis == -1 ||
        badRefines == 3) {
        nodes[nodeNum].InitLeaf(primNums, &primitiveIndices);
        return;
    }

    // Classify primitives with respect to split
    int n0 = 0, n1 = 0;
    for (int i = 0; i < bestOffset; ++i)
        if (edges[bestAxis][i].type == EdgeType::Start)
            prims0[n0++] = edges[bestAxis][i].primNum;
    for (int i = bestOffset + 1; i < 2 * nPrimitives; ++i)
        if (edges[bestAxis][i].type == EdgeType::End)
            prims1[n1++] = edges[bestAxis][i].primNum;

    // Recursively initialize kd-tree node's children
    Float tSplit = edges[bestAxis][bestOffset].t;
    Bounds3f bounds0 = nodeBounds, bounds1 = nodeBounds;
    bounds0.pMax[bestAxis] = bounds1.pMin[bestAxis] = tSplit;
    buildTree(nodeNum + 1, bounds0, allPrimBounds, prims0.subspan(0, n0), depth - 1,
              edges, prims0, prims1.subspan(n1), badRefines);
    int aboveChild = nextFreeNode;
    nodes[nodeNum].InitInterior(bestAxis, aboveChild, tSplit);
    buildTree(aboveChild, bounds1, allPrimBounds, prims1.subspan(0, n1), depth - 1, edges,
              prims0, prims1.subspan(n1), badRefines);
}

pstd::optional<ShapeIntersection> KdTreeAggregate::Intersect(const Ray &ray,
                                                             Float rayTMax) const {
    // Compute initial parametric range of ray inside kd-tree extent
    Float tMin, tMax;
    if (!bounds.IntersectP(ray.o, ray.d, rayTMax, &tMin, &tMax))
        return {};

    // Prepare to traverse kd-tree for ray
    Vector3f invDir(1 / ray.d.x, 1 / ray.d.y, 1 / ray.d.z);
    constexpr int maxToVisit = 64;
    KdNodeToVisit toVisit[maxToVisit];
    int toVisitIndex = 0;
    int nodesVisited = 0;

    // Traverse kd-tree nodes in order for ray
    pstd::optional<ShapeIntersection> si;
    const KdTreeNode *node = &nodes[0];
    while (node) {
        // Bail out if we found a hit closer than the current node
        if (rayTMax < tMin)
            break;

        ++nodesVisited;
        if (!node->IsLeaf()) {
            // Visit kd-tree interior node
            // Compute parametric distance along ray to split plane
            int axis = node->SplitAxis();
            Float tSplit = (node->SplitPos() - ray.o[axis]) * invDir[axis];

            // Get node child pointers for ray
            const KdTreeNode *firstChild, *secondChild;
            int belowFirst = (ray.o[axis] < node->SplitPos()) ||
                             (ray.o[axis] == node->SplitPos() && ray.d[axis] <= 0);
            if (belowFirst) {
                firstChild = node + 1;
                secondChild = &nodes[node->AboveChild()];
            } else {
                firstChild = &nodes[node->AboveChild()];
                secondChild = node + 1;
            }

            // Advance to next child node, possibly enqueue other child
            if (tSplit > tMax || tSplit <= 0)
                node = firstChild;
            else if (tSplit < tMin)
                node = secondChild;
            else {
                // Enqueue _secondChild_ in todo list
                toVisit[toVisitIndex].node = secondChild;
                toVisit[toVisitIndex].tMin = tSplit;
                toVisit[toVisitIndex].tMax = tMax;
                ++toVisitIndex;

                node = firstChild;
                tMax = tSplit;
            }

        } else {
            // Check for intersections inside leaf node
            int nPrimitives = node->nPrimitives();
            if (nPrimitives == 1) {
                const Primitive &p = primitives[node->onePrimitiveIndex];
                // Check one primitive inside leaf node
                pstd::optional<ShapeIntersection> primSi = p.Intersect(ray, rayTMax);
                if (primSi) {
                    si = primSi;
                    rayTMax = si->tHit;
                }

            } else {
                for (int i = 0; i < nPrimitives; ++i) {
                    int index = primitiveIndices[node->primitiveIndicesOffset + i];
                    const Primitive &p = primitives[index];
                    // Check one primitive inside leaf node
                    pstd::optional<ShapeIntersection> primSi = p.Intersect(ray, rayTMax);
                    if (primSi) {
                        si = primSi;
                        rayTMax = si->tHit;
                    }
                }
            }

            // Grab next node to visit from todo list
            if (toVisitIndex > 0) {
                --toVisitIndex;
                node = toVisit[toVisitIndex].node;
                tMin = toVisit[toVisitIndex].tMin;
                tMax = toVisit[toVisitIndex].tMax;
            } else
                break;
        }
    }
    kdNodesVisited += nodesVisited;
    return si;
}

bool KdTreeAggregate::IntersectP(const Ray &ray, Float raytMax) const {
    // Compute initial parametric range of ray inside kd-tree extent
    Float tMin, tMax;
    if (!bounds.IntersectP(ray.o, ray.d, raytMax, &tMin, &tMax))
        return false;

    // Prepare to traverse kd-tree for ray
    Vector3f invDir(1 / ray.d.x, 1 / ray.d.y, 1 / ray.d.z);
    constexpr int maxTodo = 64;
    KdNodeToVisit toVisit[maxTodo];
    int toVisitIndex = 0;
    int nodesVisited = 0;
    const KdTreeNode *node = &nodes[0];
    while (node) {
        ++nodesVisited;
        if (node->IsLeaf()) {
            // Check for shadow ray intersections inside leaf node
            int nPrimitives = node->nPrimitives();
            if (nPrimitives == 1) {
                const Primitive &p = primitives[node->onePrimitiveIndex];
                if (p.IntersectP(ray, raytMax)) {
                    kdNodesVisited += nodesVisited;
                    return true;
                }
            } else {
                for (int i = 0; i < nPrimitives; ++i) {
                    int primitiveIndex =
                        primitiveIndices[node->primitiveIndicesOffset + i];
                    const Primitive &prim = primitives[primitiveIndex];
                    if (prim.IntersectP(ray, raytMax)) {
                        kdNodesVisited += nodesVisited;
                        return true;
                    }
                }
            }

            // Grab next node to process from todo list
            if (toVisitIndex > 0) {
                --toVisitIndex;
                node = toVisit[toVisitIndex].node;
                tMin = toVisit[toVisitIndex].tMin;
                tMax = toVisit[toVisitIndex].tMax;
            } else
                break;
        } else {
            // Process kd-tree interior node

            // Compute parametric distance along ray to split plane
            int axis = node->SplitAxis();
            Float tSplit = (node->SplitPos() - ray.o[axis]) * invDir[axis];

            // Get node children pointers for ray
            const KdTreeNode *firstChild, *secondChild;
            int belowFirst = (ray.o[axis] < node->SplitPos()) ||
                             (ray.o[axis] == node->SplitPos() && ray.d[axis] <= 0);
            if (belowFirst != 0) {
                firstChild = node + 1;
                secondChild = &nodes[node->AboveChild()];
            } else {
                firstChild = &nodes[node->AboveChild()];
                secondChild = node + 1;
            }

            // Advance to next child node, possibly enqueue other child
            if (tSplit > tMax || tSplit <= 0)
                node = firstChild;
            else if (tSplit < tMin)
                node = secondChild;
            else {
                // Enqueue _secondChild_ in todo list
                toVisit[toVisitIndex].node = secondChild;
                toVisit[toVisitIndex].tMin = tSplit;
                toVisit[toVisitIndex].tMax = tMax;
                ++toVisitIndex;
                node = firstChild;
                tMax = tSplit;
            }
        }
    }
    kdNodesVisited += nodesVisited;
    return false;
}

KdTreeAggregate *KdTreeAggregate::Create(std::vector<Primitive> prims,
                                         const ParameterDictionary &parameters) {
    int isectCost = parameters.GetOneInt("intersectcost", 5);
    int travCost = parameters.GetOneInt("traversalcost", 1);
    Float emptyBonus = parameters.GetOneFloat("emptybonus", 0.5f);
    int maxPrims = parameters.GetOneInt("maxprims", 1);
    int maxDepth = parameters.GetOneInt("maxdepth", -1);
    return new KdTreeAggregate(std::move(prims), isectCost, travCost, emptyBonus,
                               maxPrims, maxDepth);
}

Primitive CreateAccelerator(const std::string &name, std::vector<Primitive> prims,
                            const ParameterDictionary &parameters) {
    Primitive accel = nullptr;
    LOG_CONCISE("Start create accelerator called with name %s", name);
    if (name == "bvh")
        accel = BVHAggregate::Create(std::move(prims), parameters);
    else if(name == "vwbvh")
        accel = VWBVHAggregate::Create(std::move(prims), parameters);
    else if (name == "kdtree")
        accel = KdTreeAggregate::Create(std::move(prims), parameters);
    else
        ErrorExit("%s: accelerator type unknown.", name);

    if (!accel)
        ErrorExit("%s: unable to create accelerator.", name);

    parameters.ReportUnused();
    LOG_CONCISE("End create acceleratror");
    return accel;
}

}  // namespace pbrt
